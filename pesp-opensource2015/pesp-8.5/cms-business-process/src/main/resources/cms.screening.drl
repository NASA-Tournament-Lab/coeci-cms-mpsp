package cms.screening
import gov.medicaid.domain.model.*
import gov.medicaid.domain.rules.inference.*


rule 'Setup validation reporting'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        not ErrorReporter()
        $validation: ValidationResultType() 
    then
        insert(new ErrorReporter($validation));

end

rule 'Assert provider aggreements'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
salience 100
    when
        $provider: ProviderInformationType( )
        not AcceptedAgreementsType() from $provider.acceptedAgreements; 
    then
        $provider.setAcceptedAgreements(new AcceptedAgreementsType());
        update($provider);

end

rule 'Assert provider documents'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
salience 100
    when
        $provider: ProviderInformationType( )
        not AttachedDocumentsType( ) from $provider.attachedDocuments; 
    then
        $provider.setAttachedDocuments(new AttachedDocumentsType());
        update($provider);

end

rule 'Assert provider licenses'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
salience 100
    when
        $provider: ProviderInformationType()
        not LicenseInformationType() from $provider.licenseInformation; 
    then
        $provider.setLicenseInformation(new LicenseInformationType());
        update($provider);

end


/*
rule 'Provider Agreement(DHS-4138) Is Required'
dialect 'mvel'
    when
        $provider: ProviderInformationType()
        $acceptedAgreements: AcceptedAgreementsType( ) from $provider.acceptedAgreements; 
        not ProviderAgreementType(acceptedDate != null, agreementDocumentTitle == DocumentNames.PROVIDER_AGREEMENT_DHS_4138.value()) from $acceptedAgreements.providerAgreement; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AcceptedAgreements",
            "00002",
            "Provider Agreement(DHS-4138) Is Required."
        );

end
 */

rule 'Department of Health Registration As Audiologist Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.AUDIOLOGIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(issuingState == "MN", attachmentObjectId != null, licenseType == "Audiologist License") from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Audiologist License from MN Is Required."
        );

end

rule 'Audiologists That Will Also Be Registered As Hearing Aid Dispensers Must Also Provide HAD Registration'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.AUDIOLOGIST.value())
        $licenseInformation: LicenseInformationType(additionalServiceCategoryRequest contains ServiceCategoryNames.HEARING_AIDS.value()) from $provider.licenseInformation; 
        not LicenseType(issuingState == "MN", attachmentObjectId != null, licenseType == LicenseNames.HEARING_AID_DISPENSER.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Copy of Hearing Aid Dispenser Registration with Department of Health Is Required."
        );

end

rule 'FEIN for the employer should not be listed for Individual Audiologist or Hearing Aid Dispenser'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.AUDIOLOGIST.value() || providerType == ProviderType.HEARING_AID_DISPENSER.value())
        PracticeInformationType(groupNPI != null, FEIN != null) from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/FEIN",
            "00002",
            "FEIN for the employer should not be listed."
        );

end

rule 'Tribal Code Must Be One Of The Recognized Values'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType()
        LicenseInformationType($tribalCode : tribalCode, tribalCode != null) from $provider.licenseInformation;
        not LookupEntry(code == $tribalCode, type == "TribalCode") 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/TribalCode",
            "00002",
            "Tribal code provided is not recognized."
        );

end

rule 'Traditional Midwife License from the MN Board of Medical Practice Is Present'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "traditional-midwife-license-activation"
    when
        $provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_PROFESSIONAL_MIDWIFE.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "MN", attachmentObjectId != null, licenseType == LicenseNames.TRADITIONAL_MIDWIFE.value()) from $licenseInformation.license; 
    then

end

rule 'Traditional Midwife License Not Issued by MN Is Acceptable If Working On A Reservation Is Present'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "traditional-midwife-license-activation"
    when
        $provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_PROFESSIONAL_MIDWIFE.value())
        $licenseInformation: LicenseInformationType(worksOnReservation == "Y", tribalCode != null) from $provider.licenseInformation; 
        LicenseType(issuingState != "MN", attachmentObjectId != null, licenseType == LicenseNames.TRADITIONAL_MIDWIFE.value()) from $licenseInformation.license; 
    then

end

rule 'A Traditional Midwife License Or Equivalent Certificate Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
salience -10
activation-group "traditional-midwife-license-activation"
    when
        ProviderInformationType(providerType == ProviderType.CERTIFIED_PROFESSIONAL_MIDWIFE.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Traditional Midwife License from the MN Board of Medical Practice Is Required."
        );

end

rule 'Copy of MnSCU Certification Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.COMMUNITY_HEALTH_CARE_WORKER.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(issuingState == "MN", attachmentObjectId != null, licenseType == LicenseNames.MN_SCU_CERTIFICATION.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Copy of MnSCU Certification Is Required."
        );

end

rule 'MHCP Applicant Assurance Statement Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.COMMUNITY_HEALTH_CARE_WORKER.value())
        $attachedDocuments: AttachedDocumentsType( ) from $provider.attachedDocuments; 
        not DocumentType(objectId != null, name == DocumentNames.MHCP_APPLICANT_ASSURANCE_STATEMENT_COMMUNITY_HEALTH_WORKERS_DHS_5308.value()) from $attachedDocuments.attachment; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments",
            "00002",
            "MHCP Applicant Assurance Statement - Community Health Workers (DHS-5308) Is Required."
        );

end

rule 'MnSCU Certification Must Be Issued By the Approved Institutions'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.COMMUNITY_HEALTH_CARE_WORKER.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType($licenseNumber : licenseNumber, issuingState == "MN", attachmentObjectId != null, licenseType == LicenseNames.MN_SCU_CERTIFICATION.value()) from $licenseInformation.license; 
        not LookupEntry(code == $licenseNumber, type == "ApprovedMnSCU") 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "MnSCU Certification Must Be Issued By the Approved Institutions."
        );

end

rule 'Individual Applicant Risk Level Is Limited With Some Exceptions'
dialect 'mvel'
salience 20
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $enrollment: EnrollmentInformationType(riskLevel == null)
        ProviderInformationType(applicantType == ApplicantType.INDIVIDUAL, providerType != ProviderType.PHYSICAL_THERAPIST.value())
    then
        modify($enrollment) {
            setRiskLevel(RiskLevelType.LIMITED) 
        };

end

rule 'High Risk Level Applicants Require Background Checks'
dialect 'mvel'
salience 10
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        EnrollmentInformationType(riskLevel == RiskLevelType.HIGH)
        $postSubmission: PostSubmissionInformationType(requiresBackgroundCheck != "Y")
    then
        modify($postSubmission) {
            setRequiresBackgroundCheck("Y") 
        };
end

rule 'High Risk Level Applicants Require SIRS Processing'
dialect 'mvel'
salience 10
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        EnrollmentInformationType(riskLevel == RiskLevelType.HIGH)
        $postSubmission: PostSubmissionInformationType(requiresSIRS != "Y")
    then
        modify($postSubmission) {
            setRequiresSIRS("Y") 
        };

end

rule 'Moderate Risk Level Applicants Require SIRS Processing'
dialect 'mvel'
salience 10
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        EnrollmentInformationType(riskLevel == RiskLevelType.MODERATE)
        $postSubmission: PostSubmissionInformationType(requiresSIRS != "Y")
    then
        modify($postSubmission) {
            setRequiresSIRS("Y") 
        };

end

rule 'A Mailbox Account Is Requested For All Applicants'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $postSubmission: PostSubmissionInformationType(requiresMailbox != "Y")
    then
        modify($postSubmission) {
            setRequiresMailbox("Y") 
        };

end

rule 'Set license verification status based on the current status of all licenses.'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType()
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(verified != "Y") from $licenseInformation.license;
        $verification : VerificationStatusType(licenses != "Y")
    then
        modify($verification) {
            setLicenses("Y") 
        };

end

rule 'All Submitted Licenses Must Be Verified'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
salience -10

    when
        VerificationStatusType(licenses != "Y")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "All Submitted Licenses Must Be Verified."
        );

end

rule 'SSN Must Be Verified'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType()
        $applicantInformation: ApplicantInformationType( ) from $provider.applicantInformation
        IndividualApplicantType(socialSecurityNumber != null) from $applicantInformation.personalInformation
        VerificationStatusType(socialSecurityNumber != "Y")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicationInformationType/PersonalInformation/SocialSecurityNumber",
            "00002",
            "SSN Must Be Verified."
        );

end

rule 'Applicant Must Not Be In the Excluded Providers List'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        VerificationStatusType(nonExclusion != "Y")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicationInformationType",
            "00002",
            "Applicant Must Not Be In the Excluded Providers List."
        );

end

rule 'NPI Must Be Verified'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "check-npi-only-once"
    when
        ProviderInformationType(NPI != null)
        VerificationStatusType(NPI != "Y")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/NPI",
            "00002",
            "NPI Must Be Verified."
        );
end

rule 'Registered Nurse Certificate Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType in (ProviderType.CLINICAL_NURSE_SPECIALIST.value(), ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST.value()))
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(licenseType == LicenseNames.REGISTERED_NURSE.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Registered Nurse Certificate Is Required."
        );

end

rule 'If the applicant is working on a reservation, any state license is acceptable including those issued by a reservation'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "registered-nurse-license-activation"
    when
        $provider: ProviderInformationType(providerType in (ProviderType.CLINICAL_NURSE_SPECIALIST.value(), ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST.value()))
        $licenseInformation: LicenseInformationType(tribalCode != null, worksOnReservation == "Y") from $provider.licenseInformation;
        LicenseType(attachmentObjectId != null, licenseType == LicenseNames.REGISTERED_NURSE.value()) from $licenseInformation.license; 
    then

end

rule 'If the state is not an NLC state, only the state issued RN licenses are accepted unless applicant is working on a reservation'
dialect 'mvel'
activation-group "registered-nurse-license-activation"
    when
        $provider: ProviderInformationType(providerType in (ProviderType.CLINICAL_NURSE_SPECIALIST.value(), ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST.value()))
        $licenseInformation: LicenseInformationType() from $provider.licenseInformation;
        LicenseType($issuingState: issuingState, issuingState == "MN", attachmentObjectId != null, licenseType == LicenseNames.REGISTERED_NURSE.value()) from $licenseInformation.license; 
        not LookupEntry(type == "NLCState", code == $issuingState ) 
    then

end

rule 'If the state is an NLC state, licenses issued by residence state is acceptable only if the residence state is also an NLC state'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "registered-nurse-license-activation"
    when
        $provider: ProviderInformationType(providerType in (ProviderType.CLINICAL_NURSE_SPECIALIST.value(), ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST.value()))
        $licenseInformation: LicenseInformationType() from $provider.licenseInformation;
        LicenseType($issuingState: issuingState, issuingState == "MN", attachmentObjectId != null, licenseType == LicenseNames.REGISTERED_NURSE.value()) from $licenseInformation.license; 
        $applicant: ApplicantInformationType(  ) from $provider.applicantInformation
        $individual: IndividualApplicantType(  ) from $applicant.personalInformation
        $contact: ContactInformationType(  ) from $individual.contactInformation
        AddressType($stateOfResidence: state) from $contact.address
        LookupEntry(type == "NLCState", code == $issuingState)
        LookupEntry(type == "NLCState", code == $stateOfResidence) 
    then

end

rule 'RN License Must Be Issued By An Accepted Board'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
salience -10
activation-group "registered-nurse-license-activation"
    when
        $provider: ProviderInformationType()
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(attachmentObjectId != null, licenseType == LicenseNames.REGISTERED_NURSE.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "RN License Must Be Issued By An Accepted Board."
        );


end

rule 'Clinical Nurse Specialist Certificate Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.CLINICAL_NURSE_SPECIALIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(issuingState == "XX", licenseType == LicenseNames.CLINICAL_NURSE_SPECIALIST.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Clinical Nurse Specialist Certificate Is Required."
        );

end

rule 'CRNA Certification from the AANA for Nurse Anesthetists Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(issuingState == "XX", licenseType == LicenseNames.CERTIFIED_REGISTERED_NURSE_ANESTHETIST.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "CRNA Certificate Is Required."
        );

end

rule 'Chiropractic Examiner License Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.CHIROPRACTOR.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(issuingState == "MN", licenseType == LicenseNames.CHIROPRACTIC_EXAMINER.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Chiropractic Examiner License Is Required."
        );

end

rule 'Podiatrist License Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.PODIATRIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(issuingState == "MN", licenseType == LicenseNames.PODIATRIST_LICENSE.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Podiatrist License Is Required."
        );

end

rule 'Marriage And Family Therapist License From The Practice State Is Provided'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "marriage-and-family-therapy-license-activation"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_MARRIAGE_AND_FAMILY_THERAPIST.value())
        $licenseInformation: LicenseInformationType() from $provider.licenseInformation;
        LicenseType($issuingState: issuingState, issuingState == "MN", attachmentObjectId != null, licenseType == LicenseNames.MARRIAGE_AND_FAMILY_THERAPIST.value()) from $licenseInformation.license; 
    then

end

rule 'MN Accepts LMFT from ND As Substitute For MFT License And The Person Must Have A Masters in Social Work'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "marriage-and-family-therapy-license-activation"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_MARRIAGE_AND_FAMILY_THERAPIST.value())
        $licenseInformation: LicenseInformationType() from $provider.licenseInformation;
        LicenseType($issuingState: issuingState, issuingState == "ND", attachmentObjectId != null, licenseType == LicenseNames.MARRIAGE_AND_FAMILY_THERAPIST.value()) from $licenseInformation.license;
        $applicant: ApplicantInformationType(  ) from $provider.applicantInformation
        IndividualApplicantType(highestDegreeEarned == "MASTERS" || highestDegreeEarned == "DOCTORATE") from $applicant.personalInformation
    then

end

rule 'MN Accepts LPCC from ND As Substitute For MFT License And The Person Must Have A Masters in Social Work'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "marriage-and-family-therapy-license-activation"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_MARRIAGE_AND_FAMILY_THERAPIST.value())
        $licenseInformation: LicenseInformationType() from $provider.licenseInformation;
        LicenseType($issuingState: issuingState, issuingState == "ND", attachmentObjectId != null, licenseType == LicenseNames.PROFESSIONAL_CLINICAL_COUNSELOR.value()) from $licenseInformation.license;
        $applicant: ApplicantInformationType(  ) from $provider.applicantInformation
        IndividualApplicantType(highestDegreeEarned == "MASTERS" || highestDegreeEarned == "DOCTORATE") from $applicant.personalInformation
    then

end

rule 'Marriage And Family Therapist License Or Equivalent Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
salience -10
activation-group "marriage-and-family-therapy-license-activation"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_MARRIAGE_AND_FAMILY_THERAPIST.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Marriage And Family Therapist License Or Equivalent Is Required."
        );


end

rule 'MFT with existing registration as LPCC or LICSW should register as such As LPCC,LICSW'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        ProviderInformationType(providerType == ProviderType.LICENSED_MARRIAGE_AND_FAMILY_THERAPIST.value())
        $screening: ScreeningResultsType( )
        $screeningResult: ScreeningResultType( screeningType == "ENROLLMENT HISTORY" ) from $screening.screeningResult
        $searchResult: SearchResultType( ) from $screeningResult.searchResult
        $row: SearchResultItemType(  ) from $searchResult.searchResultItem
        $columns: PropertyListType(  ) from $row.columnData
        exists NameValuePairType(name == "ProviderType", value == ProviderType.LICENSED_PROFESSIONAL_CLINICAL_COUNSELOR.value() || value == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value()) from $columns.nameValuePair
        exists NameValuePairType(name == "Status", value == "Active") from $columns.nameValuePair
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "MFT with existing registration as LPCC or LICSW Should Register As LPCC/LICSW."
        );

end

rule 'LPCC License From the MN is Provided'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "professional-clinical-counserlor-license-activation"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PROFESSIONAL_CLINICAL_COUNSELOR.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "MN", attachmentObjectId != null, licenseType == LicenseNames.PROFESSIONAL_CLINICAL_COUNSELOR.value()) from $licenseInformation.license; 
    then

end

rule 'MN Accepts LPCC License from Virginia'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "professional-clinical-counserlor-license-activation"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PROFESSIONAL_CLINICAL_COUNSELOR.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "VA", attachmentObjectId != null, licenseType == LicenseNames.PROFESSIONAL_CLINICAL_COUNSELOR.value()) from $licenseInformation.license; 
    then

end

rule 'MN Accepts LPCC License from other states or from a reservation for providers working on a reservation'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "professional-clinical-counserlor-license-activation"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PROFESSIONAL_CLINICAL_COUNSELOR.value())
        $licenseInformation: LicenseInformationType(worksOnReservation == "Y", tribalCode != null) from $provider.licenseInformation; 
        LicenseType(attachmentObjectId != null, licenseType == LicenseNames.PROFESSIONAL_CLINICAL_COUNSELOR.value()) from $licenseInformation.license; 
    then

end

rule 'Professional Clinical Counselor License Or Equivalent Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
salience -10
activation-group "professional-clinical-counserlor-license-activation"
    when
        ProviderInformationType(providerType == ProviderType.LICENSED_PROFESSIONAL_CLINICAL_COUNSELOR.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Professional Clinical Counselor License Or Equivalent Is Required."
        );

end

rule 'ND Licensed LPCC Should be enrolled as Marriage and Family Therapist'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "professional-clinical-counserlor-license-activation"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PROFESSIONAL_CLINICAL_COUNSELOR.value())
        $licenseInformation: LicenseInformationType() from $provider.licenseInformation
        LicenseType(issuingState == "ND", attachmentObjectId != null, licenseType == LicenseNames.PROFESSIONAL_CLINICAL_COUNSELOR.value()) from $licenseInformation.license 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "ND Licensed LPCC Should be enrolled as Marriage and Family Therapist."
        );

end

rule 'Physician License or Equivalent Is required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "physician-license-or-equivalent-is-required"
salience -10
    when
        $provider: ProviderInformationType(providerType == ProviderType.PHYSICIAN.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Physician License Is Required."
        );

end

rule 'Physician License From MN is Accepted'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "physician-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.PHYSICIAN.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation
        LicenseType(issuingState == "MN", licenseType == LicenseNames.PHYSICIAN.value()) from $licenseInformation.license
    then

end

rule 'Physician License From Other States Or A Reservation Is Accepted If Working On A Reservation'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "physician-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.PHYSICIAN.value())
        $licenseInformation: LicenseInformationType(worksOnReservation == "Y", tribalCode != null) from $provider.licenseInformation
        LicenseType(issuingState != "MN", licenseType == LicenseNames.PHYSICIAN.value()) from $licenseInformation.license
    then

end

rule 'Physicians with Specialization is required to have Certification for that Specialization'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.PHYSICIAN.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation
        $licenseType: LicenseType(specialtyType: specialtyType) from $licenseInformation.license
        not SpecialtiesType(specialtyName contains specialtyType ) from $provider.specialties
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Specialization Certification Is Required for Physicians with Specialization."
        );

end

rule 'Psychologist License From MN is Accepted'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "psychologist-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation
        LicenseType(issuingState == "MN", licenseType == LicenseNames.PSYCHOLOGIST.value()) from $licenseInformation.license
    then

end

rule 'Psychologist License From Other States Or A Reservation Is Accepted If Working On A Reservation'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "psychologist-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
        $licenseInformation: LicenseInformationType(worksOnReservation == "Y", tribalCode != null) from $provider.licenseInformation
        LicenseType(issuingState != "MN", licenseType == LicenseNames.PSYCHOLOGIST.value()) from $licenseInformation.license
    then

end

rule 'Psychologist License From State of Practice Or Equivalent Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "psychologist-license-or-equivalent-is-required"
salience -10
    when
        ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Psychologist License From State of Practice Or Equivalent Is Required."
        );

end

rule 'MDH Psychologist Registration Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
        $licenseInformation: LicenseInformationType() from $provider.licenseInformation
        not LicenseType(issuingState == "MN", licenseType == LicenseNames.MDH_PSYCHOLOGIST_REGISTRATION.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Registration with the Department Of Health as a Psychologist Is Required."
        );

end

rule 'If Neuropsychology Is Entered As Specialty, Supporting Documentation Must Be Provided'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "psychologist-neuropsychology-supporting-document-is-required"
salience -10
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
        SpecialtiesType(specialtyName contains SpecialtyNames.NEUROPSYCHOLOGY.value()) from $provider.specialties
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Supporting Documentation For Neuoropsychology Specialty must be provided."
        );

end

rule 'Received A Diploma From American Board of Clinical Neuropsychology (ABCN)'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "psychologist-neuropsychology-supporting-document-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
        $attachedDocuments: AttachedDocumentsType( ) from $provider.attachedDocuments
        DocumentType(objectId != null, name == DocumentNames.DIPLOMA_FROM_AMERICAN_BOARD_OF_CLINICAL_NEUROPSYCHOLOGY_ABCN.value()) from $attachedDocuments.attachment; 
    then

end

rule 'Received A Diploma From America Board of Professional Neuropsychology (ABPN)'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "psychologist-neuropsychology-supporting-document-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
        $attachedDocuments: AttachedDocumentsType( ) from $provider.attachedDocuments
        DocumentType(objectId != null, name == DocumentNames.DIPLOMA_FROM_AMERICA_BOARD_OF_PROFESSIONAL_NEUROPSYCHOLOGY_ABPN.value()) from $attachedDocuments.attachment; 
    then

end

rule 'Received A Diploma From  American Academy of Pediatric Neuropsychology (AAPN)'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "psychologist-neuropsychology-supporting-document-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
        $attachedDocuments: AttachedDocumentsType( ) from $provider.attachedDocuments 
        DocumentType(objectId != null, name == DocumentNames.DIPLOMA_FROM_AMERICAN_ACADEMY_OF_PEDIATRIC_NEUROPSYCHOLOGY_AAPN.value()) from $attachedDocuments.attachment; 
    then

end

rule 'Earned a doctoral degree in psychology from an accredited university training program and completed experience requirements'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "psychologist-neuropsychology-supporting-document-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
        $attachedDocuments: AttachedDocumentsType( ) from $provider.attachedDocuments
        DocumentType(objectId != null, name == DocumentNames.PROOF_OF_COMPLETED_INTERNSHIP_OR_ITS_EQUIVALENT_IN_A_CLINICALLY_RELEVANT_AREA_OF_PROFESSIONAL_PSYCHOLOGY.value()) from $attachedDocuments.attachment; 
        DocumentType(objectId != null, name == DocumentNames.PROOF_OF_EQUIVALENT_OF_TWO_FULL_TIME_YEARS_OF_EXPERIENCE_AND_SPECIALIZE_TRAINING_AT_LEAST_ONE_WHICH_IS_AT_THE_POST_DOCTORAL_LEVEL_IN_THE_STUDY_AND_PRACTICE_OF_CLINICAL_NEUROPSYCHOLOGY_AND_RELATED_NEUROSCIENCES_SUPERVISED_BY_A_CLINICAL_NEUROPSYCHOLOGIST.PROOF_OF_COMPLETED_INTERNSHIP_OR_ITS_EQUIVALENT_IN_A_CLINICALLY_RELEVANT_AREA_OF_PROFESSIONAL_PSYCHOLOGY.value()) from $attachedDocuments.attachment;
        $applicant: ApplicantInformationType(  ) from $provider.applicantInformation
        IndividualApplicantType(highestDegreeEarned == "DOCTORATE") from $applicant.personalInformation
    then

end

rule 'Been approved by the commissioner'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "psychologist-neuropsychology-supporting-document-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
        $screening: ScreeningResultsType( )
        $screeningResult: ScreeningResultType( screeningType == "ENROLLMENT HISTORY" ) from $screening.screeningResult
        $searchResult: SearchResultType( ) from $screeningResult.searchResult
        $row: SearchResultItemType(  ) from $searchResult.searchResultItem
        $columns: PropertyListType(  ) from $row.columnData
        exists NameValuePairType(name == "SpecialtyType", value == SpecialtyNames.NEUROPSYCHOLOGY.value()) from $columns.nameValuePair
    then

end

rule 'Been licensed or credentialed by another state board'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "psychologist-neuropsychology-supporting-document-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
        $licenseInformation: LicenseInformationType() from $provider.licenseInformation
        LicenseType(issuingState != "MN", specialtyType == SpecialtyNames.NEUROPSYCHOLOGY.value()) from $licenseInformation.license; 
    then

end

rule 'Acupuncturist Also Licensed As Chiropractors should be enrolled as chiropractors'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        ProviderInformationType(providerType == ProviderType.ACUPUNCTURIST.value())
        $screening: ScreeningResultsType( )
        $screeningResult: ScreeningResultType( screeningType == "ENROLLMENT HISTORY" ) from $screening.screeningResult
        $searchResult: SearchResultType( ) from $screeningResult.searchResult
        $row: SearchResultItemType(  ) from $searchResult.searchResultItem
        $columns: PropertyListType(  ) from $row.columnData
        exists NameValuePairType(name == "ProviderType", value == ProviderType.CHIROPRACTOR.value()) from $columns.nameValuePair
        exists NameValuePairType(name == "Status", value == "Active") from $columns.nameValuePair
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Acupuncturist with existing license as a chiropractor should register as such."
        );

end

rule 'Acupuncturist License or Equivalent is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "acupuncturist-license-or-equivalent-is-required"
salience -10
    when
        $provider: ProviderInformationType(providerType == ProviderType.ACUPUNCTURIST.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Acupuncturist License Is Required."
        );

end

rule 'Certification from NBCOT is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.OCCUPATIONAL_THERAPIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(issuingState == "XX", licenseType == LicenseNames.NBCOT_CERTIFICATION.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Certification from the NBCOT Is Required."
        );

end

rule 'Clinical Social Worker License Or Equivalent Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "clinical-social-worker-license-or-equivalent-is-required"
salience -10
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Clinical Social Worker license or equivalent is required."
        );

end

rule 'Collaborative Practice Dental Hygienist Assurance Statement is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.ALLIED_DENTAL_PROFESSIONAL.value())
        $attachedDocuments: AttachedDocumentsType( ) from $provider.attachedDocuments; 
        not DocumentType(objectId != null, name == DocumentNames.COLLABORATIVE_PRACTICE_DENTAL_HYGIENIST_ASSURANCE_STATEMENT.value()) from $attachedDocuments.attachment; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments",
            "00002",
            "Collaborative Practice Dental Hygienist Assurance Statement Is Required."
        );

end

rule 'Copy of Collaborative Agreement that meets MN requirements Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.ALLIED_DENTAL_PROFESSIONAL.value())
        $attachedDocuments: AttachedDocumentsType( ) from $provider.attachedDocuments; 
        not DocumentType(objectId != null, name == DocumentNames.COPY_OF_COLLABORATIVE_AGREEMENT.value()) from $attachedDocuments.attachment; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments",
            "00002",
            "Copy of Collaborative Agreement Is Required."
        );

end

rule 'Copy Of Hearing Instrument Dispenser Certificate Or Equivalent Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
salience -10
activation-group "hearing-instrument-dispenser-certificate-or-equivalent-is-required"
    when
        ProviderInformationType(providerType == ProviderType.HEARING_AID_DISPENSER.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Copy of hearing instrument dispenser certificate or equivalent is required."
        );

end

rule 'Copy of License of Dentist who signed Collaborative Agreement Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.ALLIED_DENTAL_PROFESSIONAL.value())
        $attachedDocuments: AttachedDocumentsType( ) from $provider.attachedDocuments; 
        not DocumentType(objectId != null, name == DocumentNames.COPY_OF_LICENSE_OF_DENTIST_WHO_SIGNED_COLLABORATIVE_AGREEMENT.value()) from $attachedDocuments.attachment; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments",
            "00002",
            "Copy of License of Dentist who signed Collaborative Agreement Is Required."
        );

end

rule 'Copy Of Masters Degree In A Related  Field Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_MENTAL_HEALTH_REHAB_PROF_CPRP.value())
        $attachedDocuments: AttachedDocumentsType( ) from $provider.attachedDocuments; 
        not DocumentType(objectId != null, name == DocumentNames.COPY_OF_HIGHEST_DEGREE_EARNED.value()) from $attachedDocuments.attachment; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments",
            "00002",
            "Copy of Master's Degree in a related field must be provided."
        );

end

rule 'Copy Of Masters Degree In Social Work Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
        $attachedDocuments: AttachedDocumentsType( ) from $provider.attachedDocuments; 
        not DocumentType(objectId != null, name == DocumentNames.COPY_OF_HIGHEST_DEGREE_EARNED.value()) from $attachedDocuments.attachment; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments",
            "00002",
            "Copy of Master's Degree in social work must be provided."
        );

end

rule 'Dental Hygienist License or Equivalent is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
activation-group "dental-hygienist-license-or-equivalent-is-required"
salience -10
    when
        $provider: ProviderInformationType(providerType == ProviderType.ALLIED_DENTAL_PROFESSIONAL.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Dental Hygienist License Is Required."
        );

end

rule 'Dental License From MN Is Accepted'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "dental-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.DENTIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "MN", attachmentObjectId != null, licenseType == LicenseNames.DENTAL.value()) from $licenseInformation.license; 
    then

end

rule 'Dental License Or Equivalent Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
salience -10
activation-group "dental-license-or-equivalent-is-required"
    when
        ProviderInformationType(providerType == ProviderType.DENTIST.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Dental license or equivalent is required."
        );

end

rule 'DHS-6095 Is Required For CPRP'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_MENTAL_HEALTH_REHAB_PROF_CPRP.value())
        $attachedDocuments: AttachedDocumentsType( ) from $provider.attachedDocuments; 
        not DocumentType(objectId != null, name == DocumentNames.CERTIFIED_MENTAL_HEALTH_REHABILITATION_PROFESSIONAL_ASSURANCE_STATEMENT.value()) from $attachedDocuments.attachment; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments",
            "00002",
            "Signed Certified Mental Health Rehabilitation Professional Assurance Statement must be provided."
        );

end

rule 'Dietician Or Nutritionist License Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "dietician-or-nutritionist-license-or-equivalent-is-required"
salience -10
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_DIETICIAN_OR_LICENSED_NUTRITIONIST.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Dietician or Nutritionist License from the state of practice is required."
        );

end

rule 'Dietician, Nutritionist License From The State Of Practice Is Accepted'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "dietician-or-nutritionist-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_DIETICIAN_OR_LICENSED_NUTRITIONIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation;
        AddressType($practiceState : state) from $provider.practiceInformation.contactInformation.address
        LicenseType(issuingState == $practiceState, licenseType == LicenseNames.DIETICIAN_OR_NUTRITIONIST.value()) from $licenseInformation.license; 
    then

end

rule 'HAD Certificate From State Of Practice Is Accepted'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "hearing-instrument-dispenser-certificate-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.HEARING_AID_DISPENSER.value())
        AddressType($practiceState : state ) from $provider.practiceInformation.contactInformation.address
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation
        LicenseType(issuingState == $practiceState, attachmentObjectId != null, licenseType == LicenseNames.HEARING_AID_DISPENSER.value()) from $licenseInformation.license; 
    then

end

rule 'IA Independent Social Worker License Is Acceptable'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "clinical-social-worker-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "IA", licenseType == LicenseNames.CLINICAL_SOCIAL_WORKER.value()) from $licenseInformation.license; 
    then

end

rule 'If Practice is in WI, Audiologist Certificate from WI Is Acceptable'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "hearing-instrument-dispenser-certificate-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.HEARING_AID_DISPENSER.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation;
        AddressType($practiceState : state, state == "WI") from $provider.practiceInformation.contactInformation.address
        LicenseType(issuingState == $practiceState, attachmentObjectId != null, licenseType == LicenseNames.AUDIOLOGIST.value()) from $licenseInformation.license; 
    then


end

rule 'LICSW With Dual License To Offer MFT Service Must Also Present An MFT License'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
        $licenseInformation: LicenseInformationType(additionalServiceCategoryRequest contains ServiceCategoryNames.MARRIAGE_AND_FAMILY_THERAPY.value()) from $provider.licenseInformation; 
        not LicenseType(issuingState == "MN", attachmentObjectId != null, licenseType == LicenseNames.MARRIAGE_AND_FAMILY_THERAPIST.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Marriage And Family Therapy license must also be provided."
        );

end

rule 'MN Acupuncturist License is Accepted'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
activation-group "acupuncturist-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.ACUPUNCTURIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "MN", licenseType == LicenseNames.ACUPUNCTURIST.value()) from $licenseInformation.license; 
    then

end

rule 'MN Dental Hygienist License is Accepted'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
activation-group "dental-hygienist-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.ALLIED_DENTAL_PROFESSIONAL.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "MN", licenseType == LicenseNames.DENTAL_HYGIENIST.value()) from $licenseInformation.license; 
    then

end

rule 'MN Department of Health Certification As Speech Pathologist Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.SPEECH_LANGUAGE_PATHOLOGIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(issuingState == "MN", licenseType == LicenseNames.SPEECH_LANGUAGE_PATHOLOGIST.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Registration with Minnesota Department Of Health as a Speech Pathologist Is Required."
        );

end

rule 'MN Independent Clinical Social Worker License Is Acceptable'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "clinical-social-worker-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "MN", licenseType == LicenseNames.CLINICAL_SOCIAL_WORKER.value()) from $licenseInformation.license; 
    then

end

rule 'MN Physical Therapist License is Accepted'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
activation-group "physical-therapist-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.PHYSICAL_THERAPIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "MN", licenseType == LicenseNames.PHYSICAL_THERAPIST.value()) from $licenseInformation.license; 
    then

end

rule 'MN Physician Assistant License is Accepted'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
activation-group "physician-assistant-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.PHYSICIAN_ASSISTANT.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "MN", licenseType == LicenseNames.PHYSICIAN_ASSISTANT.value()) from $licenseInformation.license; 
    then

end

rule 'ND Independent Clinical Social Worker License Is Acceptable'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "clinical-social-worker-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "ND", licenseType == LicenseNames.CLINICAL_SOCIAL_WORKER.value()) from $licenseInformation.license; 
    then

end

rule 'Nurse Midwife Specialty Certification Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.NURSE_MIDWIFE.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(issuingState == "XX", licenseType == LicenseNames.PROFESSIONAL_MIDWIFE_CERTIFICATION.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Nurse Midwife Certificate Is Required."
        );

end

rule 'Nurse Practitioner Certificate Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.NURSE_PRACTITIONER.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(issuingState == "XX", licenseType == LicenseNames.NURSE_PRACTITIONER.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Nurse Practitioner Certificate Is Required."
        );

end

rule 'Occupational Therapist License Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $provider: ProviderInformationType(providerType == ProviderType.OCCUPATIONAL_THERAPIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(issuingState == "MN", licenseType == LicenseNames.OCCUPATIONAL_THERAPY.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Occupational Therapist License Is Required."
        );

end

rule 'Only OT in private practice are eligible for MHCP enrollment'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $provider: ProviderInformationType(maintainsOwnPrivatePractice != "Y", providerType == ProviderType.OCCUPATIONAL_THERAPIST.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Only OT's in private practice are eligible for MHCP enrollment."
        );

end

rule 'Only PT in private practice are eligible for MHCP enrollment'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $provider: ProviderInformationType(maintainsOwnPrivatePractice != "Y", providerType == ProviderType.PHYSICAL_THERAPIST.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Only PT's in private practice are eligible for MHCP enrollment."
        );

end

rule 'Optometrist License From the State Of Practice Is Accepted'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "optometrist-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.OPTOMETRIST.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation;
        AddressType($practiceState : state) from $provider.practiceInformation.contactInformation.address
        LicenseType(issuingState == $practiceState, licenseType == LicenseNames.OPTOMETRIST.value()) from $licenseInformation.license; 
    then

end

rule 'Optometrist License Or Equivalent Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "optometrist-or-equivalent-is-required"
salience -10
    when
        $provider: ProviderInformationType(providerType == ProviderType.OPTOMETRIST.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Optometrist License from the state of practice is required."
        );

end

rule 'Oral Surgeon Certificate Is Required If Selected Specialty Includes Oral Surgery'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
    when
        $provider: ProviderInformationType(  providerType == ProviderType.DENTIST.value())
        SpecialtiesType(specialtyName contains SpecialtyNames.ORAL_SURGERY.value()) from $provider.specialties
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        not LicenseType(specialtyType == SpecialtyNames.ORAL_SURGERY.value()) from $licenseInformation.license; 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Oral Surgeon certificate is required for the selected specialty."
        );

end

rule 'Out Of State  Optometrist License Is Acceptable If Working On A Reserveration'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "optometrist-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.OPTOMETRIST.value())
        $licenseInformation: LicenseInformationType(tribalCode != null, worksOnReservation == "Y") from $provider.licenseInformation; 
        AddressType($practiceState : state) from $provider.practiceInformation.contactInformation.address
        LicenseType(issuingState != $practiceState, licenseType == LicenseNames.OPTOMETRIST.value()) from $licenseInformation.license; 
    then

end

rule 'Out of State Acupuncturist License Is Accepted If Working On A Reservation'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
activation-group "acupuncturist-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.ACUPUNCTURIST.value())
        $licenseInformation: LicenseInformationType(tribalCode != null, worksOnReservation == "Y") from $provider.licenseInformation; 
        LicenseType(issuingState != "MN", licenseType == LicenseNames.ACUPUNCTURIST.value()) from $licenseInformation.license; 
    then

end

rule 'Out of State Dental Hygienist License Is Accepted If Working On A Reservation'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
activation-group "dental-hygienist-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.ALLIED_DENTAL_PROFESSIONAL.value())
        $licenseInformation: LicenseInformationType(tribalCode != null, worksOnReservation == "Y") from $provider.licenseInformation; 
        LicenseType(issuingState != "MN", licenseType == LicenseNames.DENTAL_HYGIENIST.value()) from $licenseInformation.license; 
    then

end

rule 'Out of State Dental License is Accepted If Working On A Reservation'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "dental-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.DENTIST.value())
        $licenseInformation: LicenseInformationType(worksOnReservation == "Y", tribalCode != null) from $provider.licenseInformation; 
        LicenseType(issuingState != "MN", attachmentObjectId != null, licenseType == LicenseNames.DENTAL.value()) from $licenseInformation.license; 
    then

end

rule 'Out Of State Dietician, Nutritionist License Is Acceptable If Working On A Reserveration'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "dietician-or-nutritionist-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_DIETICIAN_OR_LICENSED_NUTRITIONIST.value())
        $licenseInformation: LicenseInformationType(tribalCode != null, worksOnReservation == "Y") from $provider.licenseInformation; 
        AddressType($practiceState : state) from $provider.practiceInformation.contactInformation.address
        LicenseType(issuingState != $practiceState, licenseType == LicenseNames.DIETICIAN_OR_NUTRITIONIST.value()) from $licenseInformation.license; 
    then

end

rule 'Out of State HAD License Is Acceptable If Working On A Reservation'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "hearing-instrument-dispenser-certificate-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.HEARING_AID_DISPENSER.value())
        $licenseInformation: LicenseInformationType(worksOnReservation == "Y", tribalCode != null) from $provider.licenseInformation; 
        LicenseType(issuingState != "MN", attachmentObjectId != null, licenseType == LicenseNames.HEARING_AID_DISPENSER.value()) from $licenseInformation.license; 
    then

end

rule 'Out Of State ICSW License Is Acceptable If Working On A Reserveration'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "clinical-social-worker-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
        $licenseInformation: LicenseInformationType(tribalCode != null, worksOnReservation == "Y") from $provider.licenseInformation; 
        LicenseType(issuingState != "MN", licenseType == LicenseNames.CLINICAL_SOCIAL_WORKER.value()) from $licenseInformation.license; 
    then

end

rule 'Out of State Physical Therapist License Is Accepted If Working On A Reservation'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "physical-therapist-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.PHYSICAL_THERAPIST.value())
        $licenseInformation: LicenseInformationType(tribalCode != null, worksOnReservation == "Y") from $provider.licenseInformation; 
        LicenseType(issuingState != "MN", licenseType == LicenseNames.PHYSICAL_THERAPIST.value()) from $licenseInformation.license; 
    then

end

rule 'Out of State Physician License Is Accepted If Working On A Reservation'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
activation-group "physician-assistant-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.PHYSICIAN_ASSISTANT.value())
        $licenseInformation: LicenseInformationType(tribalCode != null, worksOnReservation == "Y") from $provider.licenseInformation; 
        LicenseType(issuingState != "MN", licenseType == LicenseNames.PHYSICIAN_ASSISTANT.value()) from $licenseInformation.license; 
    then

end

rule 'Physical Therapist Applicant Risk Level Is Moderate'
dialect 'mvel'
salience 20
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $enrollment: EnrollmentInformationType(riskLevel == null)
        ProviderInformationType(providerType == ProviderType.PHYSICAL_THERAPIST.value())
    then
        modify($enrollment) {
            setRiskLevel(RiskLevelType.MODERATE) 
        };

end

rule 'Physical Therapist License or Equivalent is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
activation-group "physical-therapist-license-or-equivalent-is-required"
salience -10
    when
        $provider: ProviderInformationType(providerType == ProviderType.PHYSICAL_THERAPIST.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Physical Therapist License Is Required."
        );

end

rule 'Physician Assistant License or Equivalent is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
activation-group "physician-assistant-license-or-equivalent-is-required"
salience -10
    when
        $provider: ProviderInformationType(providerType == ProviderType.PHYSICIAN_ASSISTANT.value())
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation",
            "00002",
            "Physician Assistant License Is Required."
        );

end

rule 'Psychosocial Rehabilitation Practitioner Certificate Is Accepted'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "national-certification-is-required-for-cprp"
    when
        $provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_MENTAL_HEALTH_REHAB_PROF_CPRP.value())
        $licenseInformation: LicenseInformationType() from $provider.licenseInformation; 
        LicenseType(issuingState == "XX", attachmentObjectId != null, licenseType == LicenseNames.PSYCHOSOCIAL_REHABILITATION_PRACTITIONER.value()) from $licenseInformation.license; 
    then

end

rule 'Rehabilitation Counselor Certificate Is Accepted'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "national-certification-is-required-for-cprp"
    when
        $provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_MENTAL_HEALTH_REHAB_PROF_CPRP.value())
        $licenseInformation: LicenseInformationType() from $provider.licenseInformation; 
        LicenseType(issuingState == "XX", attachmentObjectId != null, licenseType == LicenseNames.REHABILITATION_COUNSELOR.value()) from $licenseInformation.license; 
    then

end

rule 'SD Clinical Social Worker License Is Acceptable'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "clinical-social-worker-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "SD", licenseType == LicenseNames.CLINICAL_SOCIAL_WORKER.value()) from $licenseInformation.license; 
    then

end

rule 'WI Clinical Social Worker License Is Acceptable'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
activation-group "clinical-social-worker-license-or-equivalent-is-required"
    when
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
        $licenseInformation: LicenseInformationType( ) from $provider.licenseInformation; 
        LicenseType(issuingState == "WI", licenseType == LicenseNames.CLINICAL_SOCIAL_WORKER.value()) from $licenseInformation.license; 
    then

end

/**
 * Added by cyberjag - PESP-309
 */
rule 'Organizational Providers Risk Level Is Limited With Some Exceptions'
dialect 'mvel'
salience 20
    when
        $enrollment: EnrollmentInformationType(riskLevel == null)
        ProviderInformationType(applicantType == ApplicantType.ORGANIZATION, providerType 
        not in (
        	ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value(),
        	ProviderType.REHABILITATION_AGENCY.value(),
        	ProviderType.INDEPENDENT_DIAGNOSTIC_TESTING_FACILITY.value(),
        	ProviderType.HOME_HEALTH_AGENCY.value(),
        	ProviderType.DURABLE_MEDICAL_EQUIPMENT.value(),
        	ProviderType.INDEPENDENT_LABORATORY.value(),
        	ProviderType.X_RAY_SERVICES.value(),
        	ProviderType.MEDICAL_TRANSPORTATION.value()
        ))
    then
        modify($enrollment) {
            setRiskLevel(RiskLevelType.LIMITED) 
        };
end

rule 'Community Mental Health Center,Independent Diagnostic Testing Facility, Independent Laboratory, X-Ray Services and Medical Transportation Applicant Risk Level Is Moderate'
dialect 'mvel'
salience 20
    when
        $enrollment: EnrollmentInformationType(riskLevel == null)
        ProviderInformationType(providerType 
        in (
        	ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value(),
        	ProviderType.INDEPENDENT_DIAGNOSTIC_TESTING_FACILITY.value(),
        	ProviderType.INDEPENDENT_LABORATORY.value(),
        	ProviderType.X_RAY_SERVICES.value(),
        	ProviderType.MEDICAL_TRANSPORTATION.value()
        ))
    then
        modify($enrollment) {
            setRiskLevel(RiskLevelType.MODERATE) 
        };
end

rule 'Revalidating Home Health Agency or Durable Medical Equipment is Moderate Risk Level'
dialect 'mvel'
salience 20
    when
        $enrollment: EnrollmentInformationType(riskLevel == null || riskLevel == RiskLevelType.HIGH, requestType == RequestType.RENEWAL)
        ProviderInformationType(providerType in (ProviderType.HOME_HEALTH_AGENCY.value(),ProviderType.DURABLE_MEDICAL_EQUIPMENT.value()))
    then
        modify($enrollment) {
            setRiskLevel(RiskLevelType.MODERATE) 
        };
end

rule 'New Home Health Agency or Durable Medical Equipment is High Risk Level'
dialect 'mvel'
salience 20
    when
        $enrollment: EnrollmentInformationType(riskLevel == null, requestType == RequestType.ENROLLMENT)
        ProviderInformationType(providerType in (ProviderType.HOME_HEALTH_AGENCY.value(),ProviderType.DURABLE_MEDICAL_EQUIPMENT.value()))
    then
        modify($enrollment) {
            setRiskLevel(RiskLevelType.HIGH) 
        };
end

rule 'Rehabilitation Agency with CORF is Moderate Level'
dialect 'mvel'
salience 20
    when
        $enrollment: EnrollmentInformationType(riskLevel == null, requestType == RequestType.ENROLLMENT)
        $provider: ProviderInformationType(providerType  == ProviderType.REHABILITATION_AGENCY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        LicenseType( licenseType == LicenseNames.CORF_CERTIFICATION.value() )  from $licenseList
    then
        modify($enrollment) {
            setRiskLevel(RiskLevelType.MODERATE) 
        };
end

rule 'Rehabilitation Agency without CORF is Limited Level'
dialect 'mvel'
salience 20
    when
        $enrollment: EnrollmentInformationType(riskLevel == null, requestType == RequestType.ENROLLMENT)
        $provider: ProviderInformationType(providerType  == ProviderType.REHABILITATION_AGENCY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.CORF_CERTIFICATION.value() )  from $licenseList
    then
        modify($enrollment) {
            setRiskLevel(RiskLevelType.LIMITED) 
        };
end