package cms.validation

import java.util.Calendar
import java.util.List
import gov.medicaid.domain.model.*
import gov.medicaid.domain.rules.inference.*

function Calendar getNow() {
	Calendar cal = Calendar.getInstance();
	// reset time part
	cal.set(Calendar.HOUR_OF_DAY, cal.getActualMinimum(Calendar.HOUR_OF_DAY));
  	cal.set(Calendar.MINUTE, cal.getActualMinimum(Calendar.MINUTE));
  	cal.set(Calendar.SECOND, cal.getActualMinimum(Calendar.SECOND));
  	cal.set(Calendar.MILLISECOND, cal.getActualMinimum(Calendar.MILLISECOND));
	return cal;
}

function Calendar get1YearFromNow() {
	Calendar cal = Calendar.getInstance();
	// reset time part
	cal.set(Calendar.HOUR_OF_DAY, cal.getActualMinimum(Calendar.HOUR_OF_DAY));
  	cal.set(Calendar.MINUTE, cal.getActualMinimum(Calendar.MINUTE));
  	cal.set(Calendar.SECOND, cal.getActualMinimum(Calendar.SECOND));
  	cal.set(Calendar.MILLISECOND, cal.getActualMinimum(Calendar.MILLISECOND));
  	// subtract 1 year
	cal.add(Calendar.YEAR, -1);
	return cal;
}

function Calendar getEarliestAcceptableDate() {
    Calendar cal = Calendar.getInstance();
    cal.clear();
    cal.set(1900, 01, 01);
    return cal;
}

function Calendar get18YearsFromNow() {
	Calendar cal = Calendar.getInstance();
	// reset time part
	cal.set(Calendar.HOUR_OF_DAY, cal.getActualMinimum(Calendar.HOUR_OF_DAY));
  	cal.set(Calendar.MINUTE, cal.getActualMinimum(Calendar.MINUTE));
  	cal.set(Calendar.SECOND, cal.getActualMinimum(Calendar.SECOND));
  	cal.set(Calendar.MILLISECOND, cal.getActualMinimum(Calendar.MILLISECOND));
  	// subtract 18 years
	cal.add(Calendar.YEAR, -18);
	return cal;
} 

rule '1099 Address Index Must Reference An Existing Address'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        AlternateAddressesType($alternateAddressSize : address.size()) from $provider.alternateAddresses
        OrganizationApplicantType( ten99AddressIndex < 0 || ten99AddressIndex > ($alternateAddressSize + 1))
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/Ten99AddressIndex",
            "00001",
            "1099 address must reference an existing address."
        );

end

rule 'Actual Street Address Is Required For Education Plans'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
     when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "EducationPlan", providerType == $provider.providerType)
        OrganizationApplicantType($contactInformation: contactInformation, contactInformation != null )
        not AddressType(  ) from $contactInformation.address
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/ContactInformation/Address",
            "00001",
            "Actual Street Address is required."
        );

end

rule 'Additional Location Address Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        $practice: PracticeInformationType(  ) from $provider.practiceInformation
        AdditionalPracticeLocationsType($locations :practiceLocation) from $practice.additionalPracticeLocations
        $location: PracticeLocationType(address == null) from $locations
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        $report.addError(
            "/ProviderInformation/PracticeInformation/AdditionalPracticeLocations/PracticeLocation[" + index + "]/Address",
            "00001",
            "Additional practice location address is required."
        );

end

rule 'Additional Location Address Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        $practice: PracticeInformationType(  ) from $provider.practiceInformation
        AdditionalPracticeLocationsType($locations :practiceLocation) from $practice.additionalPracticeLocations
        $location: PracticeLocationType() from $locations
        $address: AddressType() from $location.address
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        insertLogical(new AddressEntry(
            "Additional practice location address",
            "/ProviderInformation/PracticeInformation/AdditionalPracticeLocations/PracticeLocation[" + index + "]/Address",
            $address
        ));

end

rule 'Additional Location Disclosure Indicator Must Be Answered In Y,N'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        IsOrganization( )
        ProviderInformationType(agreeToDiscloseLocations != null, agreeToDiscloseLocations != "Y", agreeToDiscloseLocations != "N" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgreeToDiscloseLocations",
            "00001",
            "Agree to disclose additional locations must be answered in Y/N."
        );

end

rule 'Additional Location Effective Date Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        $practice: PracticeInformationType(  ) from $provider.practiceInformation
        AdditionalPracticeLocationsType($locations :practiceLocation) from $practice.additionalPracticeLocations
        $location: PracticeLocationType(effectiveDate == null) from $locations
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        $report.addError(
            "/ProviderInformation/PracticeInformation/AdditionalPracticeLocations/PracticeLocation[" + index + "]/EffectiveDate",
            "00001",
            "Additional practice location effective date is required."
        );

end

rule 'Additional Location Effective Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        $practice: PracticeInformationType(  ) from $provider.practiceInformation
        AdditionalPracticeLocationsType($locations :practiceLocation) from $practice.additionalPracticeLocations
        $location: PracticeLocationType($effectiveDate : effectiveDate, effectiveDate != null) from $locations
        eval($effectiveDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        $report.addError(
            "/ProviderInformation/PracticeInformation/AdditionalPracticeLocations/PracticeLocation[" + index + "]/EffectiveDate",
            "00001",
            "Additional practice location effective date cannot be before 01/01/1900."
        );
end


rule 'Additional Location Group Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        $practice: PracticeInformationType(  ) from $provider.practiceInformation
        AdditionalPracticeLocationsType($locations :practiceLocation) from $practice.additionalPracticeLocations
        $location: PracticeLocationType(groupName == null || groupName matches "^[\\s]*$") from $locations
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        $report.addError(
            "/ProviderInformation/PracticeInformation/AdditionalPracticeLocations/PracticeLocation[" + index + "]/GroupName",
            "00001",
            "Additional practice location group name is required."
        );

end

rule 'Additional Location Group Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        $practice: PracticeInformationType(  ) from $provider.practiceInformation
        AdditionalPracticeLocationsType($locations :practiceLocation) from $practice.additionalPracticeLocations
        $location: PracticeLocationType(groupName != null, groupName not matches "^.{0,100}$") from $locations
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        $report.addError(
            "/ProviderInformation/PracticeInformation/AdditionalPracticeLocations/PracticeLocation[" + index + "]/GroupName",
            "00001",
            "Additional practice location group name length cannot exceed 100 characters."
        );

end

rule 'Additional Location Group NPI Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        $practice: PracticeInformationType(  ) from $provider.practiceInformation
        AdditionalPracticeLocationsType($locations :practiceLocation) from $practice.additionalPracticeLocations
        $location: PracticeLocationType(groupNPI == null || groupNPI matches "^[\\s]*$") from $locations
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        $report.addError(
            "/ProviderInformation/PracticeInformation/AdditionalPracticeLocations/PracticeLocation[" + index + "]/GroupNPI",
            "00001",
            "Additional practice location group NPI is required."
        );

end

rule 'Additional Location Group NPI Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        $practice: PracticeInformationType(  ) from $provider.practiceInformation
        AdditionalPracticeLocationsType($locations :practiceLocation) from $practice.additionalPracticeLocations
        $location: PracticeLocationType(groupNPI != null, groupNPI not matches "^.{0,100}$") from $locations
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        $report.addError(
            "/ProviderInformation/PracticeInformation/AdditionalPracticeLocations/PracticeLocation[" + index + "]/GroupNPI",
            "00001",
            "Additional practice location group NPI length cannot exceed 100 characters."
        );

end

rule 'Additional Location Group NPI Validity Check'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        $practice: PracticeInformationType(  ) from $provider.practiceInformation
        AdditionalPracticeLocationsType($locations :practiceLocation) from $practice.additionalPracticeLocations
        $location: PracticeLocationType($npi: groupNPI, groupNPI != null, groupNPI not matches "^[\\s]*$") from $locations
    then
        int index = $locations.indexOf($location);
        insertLogical(new NPIEntry(
            "Additional practice location group NPI",
            "/ProviderInformation/PracticeInformation/AdditionalPracticeLocations/PracticeLocation[" + index + "]/GroupNPI",
            $npi
        ));
end

rule 'Additional Location Indicator Must Be Answered In Y,N'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        IsOrganization( )
        $provider: ProviderInformationType(additionalLocationIndicator != null, additionalLocationIndicator != "Y", additionalLocationIndicator != "N" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AdditionalLocationIndicator",
            "00001",
            "Additional location indicator must be answered in Y/N."
        );

end

rule 'Additional Location Indicator Should Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        IsOrganization( )
        $provider: ProviderInformationType( additionalLocationIndicator != null )
        not ProviderTypeException(type == "AskForAdditionalLocations", providerType == $provider.providerType )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AdditionalLocationIndicator",
            "00001",
            "Additional locations are not allowed for this provider type."
        );

end

rule 'Additional Location Provider Number Cannot Be Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        IsOrganization( )
        $provider: ProviderInformationType($additionalLocations : additionalLocations.providerNumber, additionalLocations != null)
        $number: String() from $additionalLocations
        eval($number == null || $number.trim().length() == 0)
        $report: ErrorReporter()
    then
        int index = $additionalLocations.indexOf($number);
        $report.addError(
            "/ProviderInformation/AdditionalLocations/ProviderNumber["+ index +"]",
            "00001",
            "Provider number cannot be empty."
        );

end

rule 'Additional Location Provider Number Is Required I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( )
        $provider: ProviderInformationType(additionalLocations == null, additionalLocationIndicator == "Y" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AdditionalLocations",
            "00001",
            "At least one provider number must be specified if additional location indicator is Y."
        );

end

rule 'Additional Location Provider Number Is Required II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( )
        $provider: ProviderInformationType($additionalLocations : additionalLocations, additionalLocations != null, additionalLocationIndicator == "Y" )
        not String() from $additionalLocations
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AdditionalLocations",
            "00001",
            "At least one provider number must be specified if additional location indicator is Y."
        );

end

rule 'Additional Location Provider Number Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        IsOrganization( )
        $provider: ProviderInformationType($additionalLocations : additionalLocations.providerNumber, additionalLocations != null)
        $number: String(length > 20) from $additionalLocations
        $report: ErrorReporter()
    then
        int index = $additionalLocations.indexOf($number);
        $report.addError(
            "/ProviderInformation/AdditionalLocations/ProviderNumber["+ index +"]",
            "00001",
            "Provider number length cannot exceed 20 characters."
        );

end

rule 'Additional Location Provider Number Should Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( )
        $provider: ProviderInformationType($additionalLocations : additionalLocations, additionalLocations != null, additionalLocationIndicator != "Y" )
        String() from $additionalLocations
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AdditionalLocations",
            "00001",
            "Additional location indicator should be Y if applicant has other provider numbers."
        );

end

rule 'Additional Locations Are Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskForAdditionalLocations", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value()));

end

rule 'Address Line 1 Is Required If Address Line 2 Is A PO BOX'
dialect 'mvel'
    when
        $entry: AddressEntry(errorOnLine2 != "Y", type != "Billing Address")
        LookupEntry($value : value, type == "POBoxWordRegex")
        AddressType($addressLine2: addressLine2, addressLine2 != null, addressLine1 == null || addressLine1 matches "^[\\s]*$") from $entry.address
        eval($addressLine2.matches($value))
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnLine1("Y"),
            setErrorOnLine2("Y")
        }
        $report.addError(
            $entry.getPath() + "/AddressLine2",
            "00001",
            $entry.getType() + " line 1 must contain the street address when entering a PO Box."
        );
        $report.addError(
            $entry.getPath() + "/AddressLine1",
            "00001",
            $entry.getType() + " PO Box must be on line 2."
        );

end

rule 'Address Line 1 Should be left empty if Address Line 2 Is Not Provided'
dialect 'mvel'
    when
        $entry: AddressEntry(errorOnLine1 != "Y")
        AddressType(addressLine2 == null || addressLine2 matches "^[\\s]*$", addressLine1 != null, addressLine1 != "") from $entry.address
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnLine1("Y")
        }
        $report.addError(
            $entry.getPath() + "/AddressLine1",
            "00001",
            $entry.getType() + " line 1 should be left empty if line 2 is not provided."
        );

end

rule 'Address Line 1 Should Not Be A PO BOX'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $entry: AddressEntry(errorOnLine1 != "Y")
        LookupEntry($value : value, type == "POBoxWordRegex")
        AddressType($addressLine1: addressLine1, addressLine1 != null) from $entry.address
        eval($addressLine1.matches($value))
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnLine1("Y")
        }
        $report.addError(
            $entry.getPath() + "/AddressLine1",
            "00001",
            $entry.getType() + " PO Box must be on line 2."
        );

end

rule 'Adult Day Treatment Application Is Required For Day Treatment'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.DAY_TREATMENT.value())
        FacilityCredentialsType(adultDayTreatmentApplication == null) from $provider.facilityCredentials
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/AdultDayTreatmentApplication",
            "00001",
            "Adult day treatment application is required for this provider."
        );

end

rule 'Affiliated Agency Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType($groupList : affiliation) from $provider.agencyInformation
        $group: GroupAffiliationType(name  == null || name matches "^[\\s]*$") from $groupList
        $report: ErrorReporter()
    then
        int index = $groupList.indexOf($group);
        $report.addError(
            "/ProviderInformation/AgencyInformation/Affiliation[" + index+ "]/Name",
            "00001",
            "Affiliated Agency Name is required."
        );

end

rule 'Affiliated Agency Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType($groupList : affiliation) from $provider.agencyInformation
        $group: GroupAffiliationType(name != null, name not matches "^[\\s]*$", name not matches "^.{0,100}$" ) from $groupList
        $report: ErrorReporter()
    then
        int index = $groupList.indexOf($group);
        $report.addError(
            "/ProviderInformation/AgencyInformation/Affiliation[" + index+ "]/Name",
            "00001",
            "Affiliated Agency Name length cannot exceed 100 characters."
        );

end

rule 'Affiliated Agency NPI Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType($groupList : affiliation) from $provider.agencyInformation
        $group: GroupAffiliationType(NPI  == null || NPI matches "^[\\s]*$") from $groupList
        $report: ErrorReporter()
    then
        int index = $groupList.indexOf($group);
        $report.addError(
            "/ProviderInformation/AgencyInformation/Affiliation[" + index+ "]/NPI",
            "00001",
            "Affiliated Agency NPI is required."
        );

end

rule 'Affiliated Agency NPI Maximum Length Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType($groupList : affiliation) from $provider.agencyInformation
        $group: GroupAffiliationType(NPI != null, NPI not matches "^[\\s]*$", NPI not matches "^.{0,10}$" ) from $groupList
        $report: ErrorReporter()
    then
        int index = $groupList.indexOf($group);
        $report.addError(
            "/ProviderInformation/AgencyInformation/Affiliation[" + index+ "]/NPI",
            "00001",
            "Affiliated Agency NPI length cannot exceed 10 characters."
        );

end

rule 'Affiliated Agency NPI Validity Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType($groupList : affiliation) from $provider.agencyInformation
        $group: GroupAffiliationType($npi: NPI, NPI != null, NPI not matches "^[\\s]*$", NPI not matches "^[\\s]*$" ) from $groupList
    then
        int index = $groupList.indexOf($group);
        insertLogical(new NPIEntry(
            "Affiliated Agency NPI",
            "/ProviderInformation/AgencyInformation/Affiliation[" + index+ "]/NPI",
            $npi
        ));

end



rule 'Affiliated Agency StudyId Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType($groupList : affiliation) from $provider.agencyInformation
        $group: GroupAffiliationType(studyId  == null || studyId matches "^[\\s]*$") from $groupList
        $report: ErrorReporter()
    then
        int index = $groupList.indexOf($group);
        $report.addError(
            "/ProviderInformation/AgencyInformation/Affiliation[" + index+ "]/StudyId",
            "00001",
            "Affiliated Agency Study Id is required."
        );

end

rule 'Affiliated Agency StudyId Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType($groupList : affiliation) from $provider.agencyInformation
        $group: GroupAffiliationType(studyId != null, studyId not matches "^[\\s]*$", StudyId not matches "^.{0,100}$" ) from $groupList
        $report: ErrorReporter()
    then
        int index = $groupList.indexOf($group);
        $report.addError(
            "/ProviderInformation/AgencyInformation/Affiliation[" + index+ "]/StudyId",
            "00001",
            "Affiliated Agency Study Id length cannot exceed 100 characters."
        );

end

rule 'Agency Address Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        OrganizationApplicantType($contactInformation: contactInformation, contactInformation != null )
        not AddressType(  ) from $contactInformation.address
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/ContactInformation/Address",
            "00001",
            "Agency Address is required."
        );

end

rule 'Agency Address Must Be Valid'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        OrganizationApplicantType($contactInformation: contactInformation, contactInformation != null )
        $address: AddressType(  ) from $contactInformation.address
    then
        insertLogical(new AddressEntry(
            "Agency Address",
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/ContactInformation/Address",
            $address
        ));

end

rule 'Agency Clearance Date Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType(clearanceDate  == null) from $provider.agencyInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/ClearanceDate",
            "00001",
            "Agency Clearance Date is required."
        );

end

rule 'Agency Clearance Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType($clearanceDate: clearanceDate, clearanceDate != null) from $provider.agencyInformation
        eval($clearanceDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/ClearanceDate",
            "00001",
            "Agency Clearance Date cannot be earlier than 01/01/1900."
        );

end

rule 'Agency Clearance Date Cannot Be A Future Date'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType($clearanceDate: clearanceDate, clearanceDate != null) from $provider.agencyInformation
        eval($clearanceDate.after(Calendar.getInstance()))
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/ClearanceDate",
            "00001",
            "Agency Clearance Date cannot be a future date."
        );

end

rule 'Agency ContactName Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType(contactName == null || contactName matches "^[\\s]*$" ) from $provider.agencyInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/ContactName",
            "00001",
            "Agency Contact Name is required."
        );

end

rule 'Agency ContactName Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType(contactName != null, contactName not matches "^[\\s]*$", contactName not matches "^.{0,100}$" ) from $provider.agencyInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/ContactName",
            "00001",
            "Agency Contact Name length cannot exceed 100 characters."
        );

end

rule 'Agency Eligibility Is Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskForAgencyEligibility", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value()));

end

rule 'Agency Eligibility Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_ELIGIBILITY.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskForAgencyEligibility", providerType == $provider.providerType)
        not AgencyEligibilityType( ) from $provider.agencyEligibility
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AgencyEligibility",
            "00001",
            "Agency eligibility is required."
        );

end

rule 'Agency Eligibility Should Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_ELIGIBILITY.value())
        IsOrganization($provider : provider)
        not ProviderTypeException(type == "AskForAgencyEligibility", providerType == $provider.providerType)
        AgencyEligibilityType( ) from $provider.agencyEligibility
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AgencyEligibility",
            "00001",
            "Agency eligibility should be left empty for this provider."
        );

end

rule 'Agency Fax Number Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType(faxNumber == null || faxNumber matches "^[\\s]*$" ) from $provider.agencyInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/FaxNumber",
            "00001",
            "Agency Fax Number is required."
        );

end

rule 'Agency Fax Number Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType($faxNumber: faxNumber, faxNumber != null, faxNumber not matches "^[\\s]*$" ) from $provider.agencyInformation
        $report: ErrorReporter()
    then
        insertLogical(new PhoneNumberEntry(
            "Agency Fax Number", 
            "/ProviderInformation/AgencyInformation/FaxNumber",
            $faxNumber
        ));

end

rule 'Agency Id Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType(agencyId == null || agencyId matches "^[\\s]*$" ) from $provider.agencyInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/AgencyId",
            "00001",
            "Agency Id is required."
        );

end

rule 'Agency Id Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType(agencyId  != null, agencyId not matches "^[\\s]*$", agencyId not matches "^.{0,100}$" ) from $provider.agencyInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/AgencyId",
            "00001",
            "Agency Id length cannot exceed 100 characters."
        );

end

rule 'Agency Information Is Required For PCA'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        ProviderInformationType(agencyInformation == null, providerType == ProviderType.PERSONAL_CARE_ASSISTANT.value())
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation",
            "00001",
            "Agency Information is required for PCA."
        );

end

rule 'Agency Name Is Required For Agency Applications'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        OrganizationApplicantType( name == null || name matches "^[\\s]*$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/Name",
            "00001",
            "Agency Name is required."
        );

end

rule 'Agency Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType(name == null || name matches "^[\\s]*$" ) from $provider.agencyInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/Name",
            "00001",
            "Agency Name is required."
        );

end

rule 'Agency Name Maximum Length Check'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
dialect 'mvel'
    when
        IsOrganization($provider: provider)
        ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        OrganizationApplicantType( name != null, name not matches "^.{0,100}$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/Name",
            "00001",
            "Agency Name length cannot exceed 100 characters."
        );

end

rule 'Agency NPI Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType(NPI == null || NPI matches "^[\\s]*$" ) from $provider.agencyInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/NPI",
            "00001",
            "Agency NPI is required."
        );

end

rule 'Agency NPI Maximum Length Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType(NPI != null, NPI not matches "^[\\s]*$", NPI not matches "^.{0,10}$" ) from $provider.agencyInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/NPI",
            "00001",
            "Agency NPI length cannot exceed 10 characters."
        );

end

rule 'Agency NPI Validity Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType($npi: NPI, NPI != null, NPI not matches "^[\\s]*$", NPI not matches "^[\\s]*$" ) from $provider.agencyInformation
    then
        insertLogical(new NPIEntry(
            "Agency NPI",
            "/ProviderInformation/AgencyInformation/NPI",
            $npi
        ));
end

rule 'Agency Study Id Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType(backgroundStudyId  == null || backgroundStudyId matches "^[\\s]*$" ) from $provider.agencyInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/BackgroundStudyId",
            "00001",
            "Agency Study Id is required."
        );

end

rule 'Agency Study Id Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        IsIndividual($provider : provider)
        AgencyInformationType(backgroundStudyId != null, backgroundStudyId not matches "^[\\s]*$", backgroundStudyId not matches "^.{0,100}$" ) from $provider.agencyInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation/BackgroundStudyId",
            "00001",
            "Agency Study Id length cannot exceed 100 characters."
        );

end

rule 'All Addresses City Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $entry: AddressEntry(errorOnCity != "Y")
        AddressType(city == null || city matches "^[\\s]*$") from $entry.address
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnCity("Y")
        }
        $report.addError(
            $entry.getPath() + "/City",
            "00001",
            $entry.getType() + " city is required."
        );

end

rule 'All Addresses City Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        $entry: AddressEntry(errorOnCity != "Y")
        AddressType(city != null, city not matches "^[\\s]*$", city not matches "^.{0,100}$") from $entry.address
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnCity("Y")
        }
        $report.addError(
            $entry.getPath() + "/City",
            "00001",
            $entry.getType() + " city length cannot exceed 100 characters."
        );

end

rule 'All Addresses County Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        $entry: AddressEntry(errorOnCounty != "Y")
        AddressType(county != null, county not matches "^[\\s]*$", county not matches "^.{0,100}$") from $entry.address
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnCounty("Y")
        }
        $report.addError(
            $entry.getPath() + "/County",
            "00001",
            $entry.getType() + " county length cannot exceed 100 characters."
        );

end

rule 'All Addresses Line 1 Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        $entry: AddressEntry(errorOnLine1 != "Y")
        AddressType(addressLine1 != null, addressLine1 not matches "^[\\s]*$",  addressLine1 not matches "^.{0,28}$") from $entry.address
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnLine1("Y")
        }
        $report.addError(
            $entry.getPath() + "/AddressLine1",
            "00001",
            $entry.getType() + " line 1 length cannot exceed 28 characters."
        );

end

rule 'All Addresses Line 2 Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $entry: AddressEntry(errorOnLine2 != "Y")
        AddressType(addressLine2 == null || addressLine2 matches "^[\\s]*$", addressLine1 == null || addressLine1 matches "^[\\s]*$") from $entry.address
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnLine2("Y")
        }
        $report.addError(
            $entry.getPath() + "/AddressLine2",
            "00001",
            $entry.getType() + " street address is required."
        );

end

rule 'All Addresses Line 2 Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        $entry: AddressEntry(errorOnLine2 != "Y")
        AddressType(addressLine2 != null, addressLine2 not matches "^[\\s]*$",  addressLine2 not matches "^.{0,28}$") from $entry.address
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnLine2("Y")
        }
        $report.addError(
            $entry.getPath() + "/AddressLine2",
            "00001",
            $entry.getType() + " line 2 length cannot exceed 28 characters."
        );

end

rule 'All Addresses State Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $entry: AddressEntry(errorOnState != "Y")
        AddressType(state == null || state matches "^[\\s]*$") from $entry.address
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnState("Y")
        }
        $report.addError(
            $entry.getPath() + "/State",
            "00001",
            $entry.getType() + " state is required."
        );

end

rule 'All Addresses State Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        $entry: AddressEntry(errorOnState != "Y")
        AddressType(state != null, state not matches "^[\\s]*$", state not matches "^.{0,2}$") from $entry.address
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnState("Y")
        }
        $report.addError(
            $entry.getPath() + "/State",
            "00001",
            $entry.getType() + " state length cannot exceed 2 characters."
        );

end

rule 'All Addresses Zip Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        $entry: AddressEntry(errorOnZip != "Y")
        AddressType(zipCode == null || zipCode matches "^[\\s]*$") from $entry.address
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnZip("Y")
        }
        $report.addError(
            $entry.getPath() + "/ZipCode",
            "00001",
            $entry.getType() + " zip code is required."
        );

end

rule 'All Addresses Zip Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        $entry: AddressEntry(errorOnZip != "Y")
        AddressType(zipCode != null, zipCode not matches "^[\\s]*$", zipCode not matches "^.{0,10}$") from $entry.address
        $report: ErrorReporter() 
    then
        modify($entry) {
            setErrorOnZip("Y")
        }
        $report.addError(
            $entry.getPath() + "/ZipCode",
            "00001",
            $entry.getType() + " zip code length cannot exceed 10 characters."
        );

end

rule 'All Alternate Addresses Attention To Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        $provider: ProviderInformationType( )
        AlternateAddressesType($addresses: address) from $provider.alternateAddresses
        $address: AddressType(attentionTo == null || attentionTo matches "^[\\s]*$") from $addresses
        $report: ErrorReporter() 
    then
        int index = $addresses.indexOf($address);
        $report.addError(
            "/ProviderInformation/AlternateAddresses/Address[" + index + "]/AttentionTo",
            "00001",
            "Alternate Address " + (index + 1) + " attention to is required."
        );      

end

rule 'All Alternate Addresses Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.1
 * @since Provider Enrollment Drools Front End Validation Part 3
 * v1.1 - should be applied on all cases
 */
    when
        $provider: ProviderInformationType( )
        AlternateAddressesType($addresses: address) from $provider.alternateAddresses
        $address: AddressType( ) from $addresses
    then
        int index = $addresses.indexOf($address);
        insertLogical(new AddressEntry(
            "Alternate Address " + (index + 1),
            "/ProviderInformation/AlternateAddresses/Address[" + index + "]", 
            $address
        ));

end

rule 'All Phone Number Entries Must Be In A Valid Format'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        $entry: PhoneNumberEntry(phoneNumber not matches "([0-9]{3}) ([0-9]{3})-([0-9]{4})( ext [0-9]{1,3})?", validated != "Y")
        $report: ErrorReporter() 
    then
        modify($entry) {
            setValidated("Y")
        }
        $report.addError(
            $entry.getPath(),
            "00001",
            $entry.getType() + " must be in the format '000 000-0000 ext 000'."
        );
end

rule 'Applicant Type should be INDIVIDUAL or ORGANIZATION'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        ProviderInformationType(applicantType == null)
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantType",
            "00001",
            "Applicant Type should be INDIVIDUAL or ORGANIZATION."
        );

end

rule 'Articles Of Incorporation Showing Non-Profit Status Is Required For The Specified Provider Typers II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType in (ProviderType.COMMUNITY_HEALTH_CLINIC.value(), ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value()))
        AttachedDocumentsType($attachments : attachment) from $provider.attachedDocuments
        not DocumentType(name == DocumentNames.ARTICLES_OF_INCORPORATION.value()) from $attachments
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments/Document[name=\"Articles of Incorporation\"]",
            "00001",
            "Articles Of Incorporation showing non-profit status from the OAG is required for this provider."
        );

end

rule 'Articles Of Incorporation Showing Non-Profit Status Is Required For The Specified Provider Typers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType in (ProviderType.COMMUNITY_HEALTH_CLINIC.value(), ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value()))
        not AttachedDocumentsType(  ) from $provider.attachedDocuments
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments/Document[name=\"Articles of Incorporation\"]",
            "00001",
            "Articles Of Incorporation showing non-profit status from the OAG is required for this provider."
        );

end

rule 'Assert alternate addresses'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
salience 10
     when
        $provider: ProviderInformationType(alternateAddresses == null)
    then
        $provider.setAlternateAddresses(new AlternateAddressesType());
        update($provider);

end

rule 'Assert empty profile for individual applicants if personal data is not provided'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        IsIndividual($provider : provider)
        $applicantInformation: ApplicantInformationType(personalInformation  == null) from $provider.applicantInformation
    then
        $applicantInformation.setPersonalInformation(new IndividualApplicantType());
        update($provider);

end

rule 'Assert empty profile for organizations if data is not provided'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
salience 10
dialect 'mvel'
    when
        IsOrganization($provider : provider)
        $applicantInformation: ApplicantInformationType(organizationInformation == null) from $provider.applicantInformation
    then
        $applicantInformation.setOrganizationInformation(new OrganizationApplicantType());
        update($provider);

end

rule 'Assert enrollment contact information'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        $enrollment: EnrollmentType(contactInformation == null)
    then
        $enrollment.setContactInformation(new ContactInformationType());
        update($enrollment);

end

rule 'Assert Full Validation Mode For Individuals'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        not LookupEntry( type == "UISection" )
        IsIndividual()
    then
        insertLogical(new LookupEntry("FieldGroup", "Personal Information", "Personal Information"));
        insertLogical(new LookupEntry("FieldGroup", "License Information", "License Information"));
        insertLogical(new LookupEntry("FieldGroup", "Practice Information", "Practice Information"));
        insertLogical(new LookupEntry("FieldGroup", "Mailing Information", "Mailing Information"));
        insertLogical(new LookupEntry("FieldGroup", "Provider Statement", "Provider Statement"));
        insertLogical(new LookupEntry("FieldGroup", "Agency Information", "Agency Information"));

end

rule 'Assert Full Validation Mode For Organizations'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        not LookupEntry( type == "UISection" )
        IsOrganization()
    then
        insertLogical(new LookupEntry("FieldGroup", "Organization Information", "Organization Information"));
        insertLogical(new LookupEntry("FieldGroup", "Individual Member Information", "Individual Member Information"));
        insertLogical(new LookupEntry("FieldGroup", "Provider Setup", "Provider Setup"));
        insertLogical(new LookupEntry("FieldGroup", "Ownership Information", "Ownership Information"));
        insertLogical(new LookupEntry("FieldGroup", "Organization Disclosure", "Organization Disclosure"));
        insertLogical(new LookupEntry("FieldGroup", "Facility Credentials", "Facility Credentials"));
        insertLogical(new LookupEntry("FieldGroup", "Organization Provider Statement", "Organization Provider Statement"));        
        insertLogical(new LookupEntry("FieldGroup", "Agency Eligibility", "Agency Eligibility"));        
        insertLogical(new LookupEntry("FieldGroup", "Qualified Professionals", "Qualified Professionals"));        

end

rule 'Assert Partial Validation For Only Requested UI sections'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        $section : LookupEntry( type == "UISection" )
    then
        insertLogical(new LookupEntry("FieldGroup", $section.getValue(), $section.getValue()));

end

rule 'Assert provider applicant information'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
salience 10
    when
        $provider: ProviderInformationType(applicantInformation == null)
    then
        $provider.setApplicantInformation(new ApplicantInformationType());
        update($provider);

end

rule 'Assigned Agency Id Is Asked Only For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskAgencyId", ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value()));

end

rule 'Assigned Agency Id Must Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        ProviderInformationType(assignedAgencyId != null, assignedAgencyId not matches "^[\\s]*$")
        IsOrganization($provider : provider)
        not ProviderTypeException(type == "AskAgencyId", providerType == $provider.providerType)
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AssignedAgencyId",
            "00001",
            "Assigned agency ID is not expected for this provider type."
        );

end

rule 'At Least 1 Qualified Professional Must Be Provided'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskForQualifiedProfessionals", providerType == $provider.providerType)
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        not QualifiedProfessionalType(  ) from $qpList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals",
            "00001",
            "At least one qualified professional must be provided."
        );

end

rule 'At Least One Beneficial Owner Is Required I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskOwnershipInfo", providerType == $provider.providerType)
        not OwnershipInformationType( ) from $provider.ownershipInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/OwnershipInformation",
            "00001",
            "At least one beneficial owner must be specified."
        );

end

rule 'At Least One Beneficial Owner Is Required II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskOwnershipInfo", providerType == $provider.providerType)
        $ownershipInformation: OwnershipInformationType(  ) from $provider.ownershipInformation
        not BeneficialOwnerType( ) from $ownershipInformation.beneficialOwner
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/OwnershipInformation",
            "00001",
            "At least one beneficial owner must be specified."
        );

end

rule 'At Least One Contract,Certification Must Be Provided For County Contracted Mental Health Rehab I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType in 
            (
              ProviderType.COUNTY_CONTRACTED_MENTAL_HEALTH_REHAB.value()
            ) 
        )
        FacilityCredentialsType(signedContract == null) from $provider.facilityCredentials
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/SignedContract",
            "00001",
            "At least one contract/certification must be entered for this provider."
        );

end

rule 'At Least One Contract,Certification Must Be Provided For County Contracted Mental Health Rehab II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType in 
            (
              ProviderType.COUNTY_CONTRACTED_MENTAL_HEALTH_REHAB.value()
            ) 
        )
        FacilityCredentialsType($contractList : signedContract, signedContract != null) from $provider.facilityCredentials
        not SignedContractType(  ) from $contractList
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/SignedContract",
            "00001",
            "At least one contract/certification must be entered for this provider."
        );

end

rule 'At least one licensed physician member is required for Family Planning Agency'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.FAMILY_PLANNING_AGENCY.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        not GroupMemberType(providerType == ProviderType.PHYSICIAN.value()) from $memberList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MemberInformation",
            "00001",
            "At least one licensed physician must be entered."
        );

end

rule 'At least One Member Info Is Required I'
dialect 'mvel'
activation-group "member-info-license-required"
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskIndividualMemberInfo", providerType == $provider.providerType)
        not MemberInformationType( ) from $provider.memberInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MemberInformation",
            "00001",
            "At least one individual member information must be provided."
        );

end

rule 'At least One Member Info Is Required II'
dialect 'mvel'
activation-group "member-info-license-required"
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskIndividualMemberInfo", providerType == $provider.providerType)
        $memberInformation: MemberInformationType( ) from $provider.memberInformation
        not GroupMemberType(  ) from $memberInformation.groupMember
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MemberInformation",
            "00001",
            "At least one individual member information must be provided."
        );

end

rule 'At Least One Pay-To Provider Is Required I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskProviderSetupInfo", providerType == $provider.providerType)
        not ProviderSetupInformationType( ) from $provider.providerSetupInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation",
            "00001",
            "At least one pay-to provider must be specified."
        );

end

rule 'At Least One Pay-To Provider Is Required II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskProviderSetupInfo", providerType == $provider.providerType)
        $setupInformation: ProviderSetupInformationType( ) from $provider.providerSetupInformation
        not PayToProviderType( ) from $setupInformation.payToProvider
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation",
            "00001",
            "At least one pay-to provider must be specified."
        );

end

rule 'Authorized Representative Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_PROVIDER_STATEMENT.value())
        IsOrganization($provider : provider)
        ProviderStatementType(name == null || name matches "^[\\s]*$") from $provider.providerStatement
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/Name",
            "00001",
            "Authorized representative name is required."
        );

end

rule 'Authorized Representative Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_PROVIDER_STATEMENT.value())
        IsOrganization($provider : provider)
        ProviderStatementType(name != null, name not matches "^.{0,100}$") from $provider.providerStatement
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/Name",
            "00001",
            "Authorized representative name length cannot exceed 100 characters."
        );

end

rule 'Authorized Representative Signature Date Cannot Be In The Future'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_PROVIDER_STATEMENT.value())
        IsOrganization($provider : provider)
        ProviderStatementType($signDate: signDate, signDate != null) from $provider.providerStatement
        eval($signDate.after(Calendar.getInstance()))
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/SignDate",
            "00001",
            "Authorized representative signature date cannot be a future date."
        );

end

rule 'Authorized Representative Signature Date Cannot be past date'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_PROVIDER_STATEMENT.value())
        IsOrganization($provider : provider)
        ProviderStatementType($signDate: signDate, signDate != null) from $provider.providerStatement
        eval($signDate.before(getNow()))
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/SignDate",
            "00001",
            "Authorized representative signature date cannot be a past date."
        );
end


rule 'Authorized Representative Signature Date Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_PROVIDER_STATEMENT.value())
        IsOrganization($provider : provider)
        ProviderStatementType(signDate == null) from $provider.providerStatement
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/SignDate",
            "00001",
            "Authorized representative signature date is required."
        );

end

rule 'Authorized Representative Title Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_PROVIDER_STATEMENT.value())
        IsOrganization($provider : provider)
        ProviderStatementType(title == null || title matches "^[\\s]*$") from $provider.providerStatement
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/Title",
            "00001",
            "Authorized representative title is required."
        );

end

rule 'Authorized Representative Title Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_PROVIDER_STATEMENT.value())
        IsOrganization($provider : provider)
        ProviderStatementType(title != null, title not matches "^.{0,100}$") from $provider.providerStatement
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/Title",
            "00001",
            "Authorized representative title length cannot exceed 100 characters."
        );

end

rule 'Background Study Is Required For Personal Care Provider Organizations'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.BACKGROUND_STUDY.value() )  from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Copy of background study report is required for this provider."
        );

end

rule 'Begin Providing Services Date Is Required For Agency Applications'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        EnrollmentType(effectiveDate == null) 
        $report: ErrorReporter()
    then
        $report.addError(
            "/EffectiveDate",
            "00001",
            "Begin Providing Services Date is required."
        );

end

rule 'Begin Providing Services Date Is Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        EnrollmentType($effectiveDate: effectiveDate, effectiveDate != null)
        eval($effectiveDate.before(getEarliestAcceptableDate())) 
        $report: ErrorReporter()
    then
        $report.addError(
            "/EffectiveDate",
            "00001",
            "Begin Providing Services Date cannot be before 01/01/1900."
        );

end

rule 'Beneficial Owner Business Address is Required for Entity Owners'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "N") from $ownerList
        OrganizationType( contactInformation == null || contactInformation.address == null) from $owner.entityInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/EntityInformation/ContactInformation/Address",
            "00001",
            "Beneficial owner business address is required."
        );

end

rule 'Beneficial Owner Business Address Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "N") from $ownerList
        OrganizationType($contactInformation: contactInformation, contactInformation != null) from $owner.entityInformation
        $address: AddressType( ) from $contactInformation.address
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        insertLogical(new AddressEntry(
            "Beneficial Owner Business Address",
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/EntityInformation/ContactInformation/Address",
            $address
        ));

end

rule 'Beneficial Owner Date Of Birth Cannot Be A Future Date'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "Y") from $ownerList
        PersonType($dateOfBirth: dateOfBirth, dateOfBirth != null ) from $owner.personInformation
        eval($dateOfBirth.after(java.util.Calendar.getInstance()))
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation/DateOfBirth",
            "00001",
            "Beneficial owner date of birth cannot be a future date."
        );

end

rule 'Beneficial Owner Date Of Birth Cannot before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "Y") from $ownerList
        PersonType($dateOfBirth: dateOfBirth, dateOfBirth != null ) from $owner.personInformation
        eval($dateOfBirth.before(getEarliestAcceptableDate())) 
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation/DateOfBirth",
            "00001",
            "Beneficial owner date of birth cannot be earlier than 01/01/1900."
        );

end

rule 'Beneficial Owner Date Of Birth is Required for Person Owners'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "Y") from $ownerList
        PersonType( dateOfBirth == null ) from $owner.personInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation/DateOfBirth",
            "00001",
            "Beneficial owner date of birth is required."
        );

end

rule 'Beneficial Owner Entity Info Is Required For Entity Owners'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(entityInformation == null, personInd == "N") from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/EntityInformation",
            "00001",
            "Beneficial owner entity information is required."
        );

end

rule 'Beneficial Owner FEIN Is Required For Entity Owners'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "N") from $ownerList
        OrganizationType( FEIN == null || FEIN matches "^[\\s]*$") from $owner.entityInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/EntityInformation/FEIN",
            "00001",
            "Beneficial owner FEIN is required."
        );

end

rule 'Beneficial Owner First Name is Required for Person Owners'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "Y") from $ownerList
        PersonType( firstName == null || firstName matches "^[\\s]*$") from $owner.personInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation/FirstName",
            "00001",
            "Beneficial owner first name is required."
        );

end

rule 'Beneficial Owner First Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType() from $ownerList
        PersonType(firstName != null, firstName not matches "^.{0,50}$") from $owner.personInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation/FirstName",
            "00001",
            "Beneficial owner first name cannot exceed 50 characters."
        );

end

rule 'Beneficial Owner Full Legal Name Is Required For Entity Owners'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "N") from $ownerList
        OrganizationType( legalName == null || legalName matches "^[\\s]*$") from $owner.entityInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/EntityInformation/LegalName",
            "00001",
            "Beneficial owner legal name is required."
        );

end

rule 'Beneficial Owner Full Legal Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType() from $ownerList
        OrganizationType(legalName != null, legalName not matches "^.{0,100}$") from $owner.entityInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/EntityInformation/LegalName",
            "00001",
            "Beneficial owner legal name cannot exceed 100 characters."
        );

end

rule 'Beneficial Owner Hire Date Is Required for Person Owners If Type Is Subcontractor, Employee Or Officer'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(hireDate == null, personInd == "Y", beneficialOwnerType in ("Subcontractor", "Managing Employee", "Board Member or Officer")) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/HireDate",
            "00001",
            "Beneficial owner hire date is required."
        );
end

rule 'Beneficial Owner Hire Date cannot be before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType($hireDate: hireDate, hireDate != null) from $ownerList
        eval($hireDate.before(getEarliestAcceptableDate())) 
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/HireDate",
            "00001",
            "Beneficial owner hire date cannot be before 01/01/1900."
        );
end

rule 'Beneficial Owner Last Name is Required for Person Owners'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "Y") from $ownerList
        PersonType( lastName == null || lastName matches "^[\\s]*$") from $owner.personInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation/LastName",
            "00001",
            "Beneficial owner last name is required."
        );

end

rule 'Beneficial Owner Last Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType() from $ownerList
        PersonType(lastName != null, lastName not matches "^.{0,50}$") from $owner.personInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation/LastName",
            "00001",
            "Beneficial owner last name cannot exceed 50 characters."
        );

end

rule 'Beneficial Owner Middle Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType() from $ownerList
        PersonType(middleName != null, middleName not matches "^.{0,50}$") from $owner.personInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation/MiddleName",
            "00001",
            "Beneficial owner middle name cannot exceed 50 characters."
        );

end

rule 'Beneficial Owner Other Interest  Provider Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(otherInterestName != null, otherInterestName not matches "^.{0,100}$") from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/OtherInterestName",
            "00001",
            "Provider name of other provider with ownership interest in cannot exceed 100 characters."
        );

end

rule 'Beneficial Owner Other Interest Ownership Interest Percent Is Required If Other Interest Indicator Is Y'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(otherInterestInd == "Y", otherInterestPercentOwnership == null) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/OtherInterestPercentOwnership",
            "00001",
            "Ownership percentage on other provider with ownership interest in is required."
        );

end

rule 'Beneficial Owner Other Interest Provider Address Is Required If Other Interest Indicator Is Y'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(otherInterestInd == "Y", otherInterestAddress == null) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/OtherInterestAddress",
            "00001",
            "Address of other provider with ownership interest in is required."
        );

end

rule 'Beneficial Owner Other Interest Provider Address Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(otherInterestInd == "Y", otherInterestAddress != null) from $ownerList
        $address : AddressType( ) from $owner.otherInterestAddress
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        insertLogical(new AddressEntry(
            "Beneficial Owner Other Interest Address",
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/OtherInterestAddress",
            $address
        ));

end

rule 'Beneficial Owner Other Interest Provider Name Is Required If Other Interest Indicator Is Y'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(otherInterestInd == "Y", otherInterestName == null || otherInterestName matches "^[\\s]*$") from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/OtherInterestName",
            "00001",
            "Provider name of other provider with ownership interest in is required."
        );

end

rule 'Beneficial Owner Person Indicator Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd != "Y", personInd != "N") from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInd",
            "00001",
            "Please indicate if the beneficial owner is a person or entity."
        );

end

rule 'Beneficial Owner Personal Information is Required for Person Owners'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "Y") from $ownerList
        not PersonType( ) from $owner.personInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation",
            "00001",
            "Beneficial owner personal information is required."
        );

end

rule 'Beneficial Owner Relationship Type Must Be One Of the Following Values'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(relationship != null, relationship not in ("Spouse", "Child", "Parent", "Sibling")) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/Relationship",
            "00001",
            "Beneficial owner relationship specified is not recognized."
        );

end

rule 'Beneficial Owner Residential Address is Required for Person Owners'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "Y") from $ownerList
        PersonType(contactInformation == null || contactInformation.address == null) from $owner.personInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation/ContactInformation/Address",
            "00001",
            "Beneficial owner residential address is required."
        );

end

rule 'Beneficial Owner Residential Address Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "Y") from $ownerList
        PersonType($contactInformation: contactInformation, contactInformation != null) from $owner.personInformation
        $address: AddressType( ) from $contactInformation.address
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        insertLogical(new AddressEntry(
            "Beneficial Owner Residential Address",
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation/ContactInformation/Address",
            $address
        ));

end

rule 'Beneficial Owner SSN is Required for Person Owners'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "Y") from $ownerList
        PersonType( socialSecurityNumber == null || socialSecurityNumber matches "^[\\s]*$") from $owner.personInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation/SocialSecurityNumber",
            "00001",
            "Beneficial owner SSN is required."
        );

end

rule 'Beneficial Owner SSN Maximum Length Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType() from $ownerList
        PersonType(socialSecurityNumber != null, socialSecurityNumber not matches "^[\\s]*$", socialSecurityNumber not matches "\\d{9}") from $owner.personInformation
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PersonInformation/SocialSecurityNumber",
            "00001",
            "Beneficial owner SSN must have 9 digits."
        );

end

rule 'Beneficial Owner Type Description Is Required If Owner Type is Other'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType( beneficialOwnerType == "Other", otherBeneficialOwnerDescription == null || otherBeneficialOwnerDescription matches "^[\\s]*$") from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/OtherBeneficialOwnerDescription",
            "00001",
            "Beneficial owner description is required."
        );

end

rule 'Beneficial Owner Type Description Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(otherBeneficialOwnerDescription != null, otherBeneficialOwnerDescription not matches "^.{0,100}$") from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/OtherBeneficialOwnerDescription",
            "00001",
            "Beneficial owner description length cannot exceed 100 characters."
        );

end

rule 'Beneficial Owner Type Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(beneficialOwnerType == null || beneficialOwnerType matches "^[\\s]*$") from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/BeneficialOwnerType",
            "00001",
            "Beneficial owner type is required."
        );

end

rule 'Billing Address Index Must Reference An Existing Address'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        AlternateAddressesType($alternateAddressSize : address.size()) from $provider.alternateAddresses
        OrganizationApplicantType( billingAddressIndex < 0 || billingAddressIndex > ($alternateAddressSize + 1))
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/BillingAddressIndex",
            "00001",
            "Billing address must reference an existing address."
        );

end

rule 'Billing Address Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice == "Y" )
        PracticeInformationType(billingAddress == null) from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/BillingAddress",
            "00001",
            "Billing address is required."
        );

end

rule 'Billing Address Must Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice != "Y" )
        PracticeInformationType(billingAddress != null) from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/BillingAddress",
            "00001",
            "Billing address must be left empty if applicant is not in private practice."
        );

end

rule 'Billing Address Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        IsIndividual($provider : provider)
        $practice: PracticeInformationType() from $provider.practiceInformation
        $address: AddressType() from $practice.billingAddress
    then
        insertLogical(new AddressEntry(
            "Billing Address",
            "/ProviderInformation/PracticeInformation/BillingAddress", 
            $address
        ));

end

rule 'CCMHR Members Must All Be Enrolled'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.COUNTY_CONTRACTED_MENTAL_HEALTH_REHAB.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        GroupMemberType(enrolled != "Y") from $memberList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MemberInformation",
            "00001",
            "All members are expected to be enrolled."
        );

end

rule 'Certificate of compliance Is Required For CMHR treatment facility'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.CHILDRENS_MENTAL_HEALTH_RESIDENTIAL_TREATMENT_FACILITY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.CERTIFICATE_OF_COMPLIANCE_FROM_MN_DEPARTMENT_OF_HUMAN_RIGHTS.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Certificate of Compliance from MN Department of Human Rights is required for this provider."
        );

end

rule 'Class A License For Private Duty Nursing Services Is Required For PDN Agency'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.PRIVATE_DUTY_NURSING_AGENCY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.CLASS_A_LICENSE_FOR_PRIVATE_DUTY_NURSING_SERVICES.value() )  from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Class A license for private duty nursing services is required for this provider."
        );

end

rule 'Class A License For Private Duty Nursing Services Is Required For PHN Org'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.PUBLIC_HEALTH_NURSING_ORGANIZATION.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.CLASS_A_LICENSE_FOR_PRIVATE_DUTY_NURSING_SERVICES.value() )  from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Class A license for private duty nursing services is required for this provider."
        );

end

rule 'Class A Professional Home Care License Is Required For Home Health Agency'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.HOME_HEALTH_AGENCY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.CLASS_A_PROFESSIONAL_HOME_CARE_LICENSE.value() )  from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Class A Professional Home Care License is required for this provider."
        );

end

rule 'CLIA Attachment Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : CLIACertificate) from $provider.facilityCredentials
        $license: CLIACertificateType( attachmentObjectId == null || certificateNumber matches "^[\\s]*$" ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/CLIACertificate[" + index+ "]/AttachmentObjectId",
            "00001",
            "Copy of CLIA certificate is required."
        );

end

rule 'Ambulance Service Attachment Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : ambulanceServices) from $provider.facilityCredentials
        $license: AmbulanceServicesType( attachmentObjectId == null || attachmentObjectId matches "^[\\s]*$" ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/AmbulanceServices[" + index+ "]/AttachmentObjectId",
            "00001",
            "Copy of ambulance service state license is required."
        );
end


rule 'CLIA Certifications Are Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskCLIACertificationsInfo", ProviderType.INDEPENDENT_LABORATORY.value()));
        // insertLogical(new ProviderTypeException("AskCLIACertificationsInfo", ProviderType.INDIAN_HEALTH_SERVICE_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskCLIACertificationsInfo", ProviderType.PUBLIC_HEALTH_NURSING_ORGANIZATION.value()));
        // insertLogical(new ProviderTypeException("AskCLIACertificationsInfo", ProviderType.NURSING_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskCLIACertificationsInfo", ProviderType.RENAL_DIALYSIS_FACILITY.value()));
		insertLogical(new ProviderTypeException("AskCLIACertificationsInfo", ProviderType.PHYSICIAN_CLINIC.value()));
		insertLogical(new ProviderTypeException("AskCLIACertificationsInfo", ProviderType.RURAL_HEALTH_CLINIC.value()));
		insertLogical(new ProviderTypeException("AskCLIACertificationsInfo", ProviderType.AMBULATORY_SURGICAL_CENTER.value()));
end

/**
 * Added by cyberjag - PESP-306
 */
rule 'CLIA Certification is required'
dialect 'mvel'
	when
		LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskCLIACertificationsInfo", providerType == $provider.providerType)
        FacilityCredentialsType(cLIACertificate.size() == 0) from $provider.facilityCredentials
        $report: ErrorReporter()
	then
		$report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "CLIA Certification is required for this provider."
        );
end  

rule 'CLIA Certifications Must Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider : provider)
        not ProviderTypeException(type == "AskCLIACertificationsInfo", providerType == $provider.providerType)
        ProviderInformationType($facilityCredentials: facilityCredentials, facilityCredentials != null)
        CLIACertificateType(  ) from $facilityCredentials.CLIACertificate
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "CLIA Certifications must be left empty for this provider."
        );

end

rule 'CLIA Copy Attachment Id Must Reference A Valid Attachment I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : CLIACertificate) from $provider.facilityCredentials
        $license: CLIACertificateType( attachmentObjectId != null) from $licenseList
        not AttachedDocumentsType(  ) from $provider.attachedDocuments
        $report: ErrorReporter()
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/AttachmentObjectId",
            "00001",
            "Copy of CLIA certificate must be provided as an attachment."
        );

end

rule 'CLIA Copy Attachment Id Must Reference A Valid Attachment II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : CLIACertificate) from $provider.facilityCredentials
        $license: CLIACertificateType( attachmentObjectId != null) from $licenseList
        $attachedDocuments: AttachedDocumentsType(  ) from $provider.attachedDocuments
        not DocumentType( objectId == $license.attachmentObjectId ) from $attachedDocuments.attachment
        $report: ErrorReporter()
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/AttachmentObjectId",
            "00001",
            "Copy of CLIA certificate must be provided as an attachment."
        );

end

rule 'CLIA Number Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : CLIACertificate) from $provider.facilityCredentials
        $license: CLIACertificateType( certificateNumber == null || certificateNumber matches "^[\\s]*$" ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/CLIACertificate[" + index+ "]/CertificateNumber",
            "00001",
            "CLIA certificate number is required."
        );

end


rule 'CLIA Number Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : CLIACertificate) from $provider.facilityCredentials
        $license: CLIACertificateType( certificateNumber != null, certificateNumber not matches "^.{0,100}$" ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/CLIACertificate[" + index+ "]/CertificateNumber",
            "00001",
            "CLIA certificate number length cannot exceed 100 characters."
        );

end

rule 'CMHC Members Must Be A Certified Mental Health Professional Or A Licensed Psychiatrist'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        GroupMemberType($specialties: specialties, providerType != ProviderType.CERTIFIED_MENTAL_HEALTH_REHAB_PROF_CPRP.value(), highestDegreeEarned != "DOCTORATE") from $memberList
        not SpecialtiesType(specialtyName contains "Psychiatry") from $specialties 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MemberInformation",
            "00001",
            "Members must be certified mental health professionals or licensed psychiatrists."
        );

end

rule 'Community Health Board Indicator Must Be Answered In Y,N'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider )
        FacilityCredentialsType(communityHealthBoard != null, communityHealthBoard != "Y", communityHealthBoard != "N") from $provider.facilityCredentials
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/CommunityHealthBoard",
            "00001",
            "Community health board indicator must be answered in Y/N."
        );

end

rule 'Complete Provider Name Is Required For Education Plans'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "EducationPlan", providerType == $provider.providerType)
        OrganizationApplicantType( name == null || name matches "^[\\s]*$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/Name",
            "00001",
            "Complete Provider Name is required."
        );

end

rule 'Complete Provider Name Maximum Length Check'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
dialect 'mvel'
    when
        IsOrganization($provider: provider)
        ProviderTypeException(type == "EducationPlan", providerType == $provider.providerType)
        OrganizationApplicantType( name != null, name not matches "^.{0,100}$" )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/Name",
            "00001",
            "Complete Provider Name length cannot exceed 100 characters."
        );

end

rule 'Contact Fax Number Must Be In A Valid Format'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        $enrollment: EnrollmentType() 
        ContactInformationType($faxNumber: faxNumber, faxNumber != null) from $enrollment.contactInformation
    then
        insertLogical(new PhoneNumberEntry(
            "Contact Fax Number", 
            "/ContactInformation/FaxNumber",
            $faxNumber
        ));

end

rule 'Contact Phone Number Must Be In A Valid Format'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        $enrollment: EnrollmentType() 
        ContactInformationType($phoneNumber: phoneNumber, phoneNumber != null) from $enrollment.contactInformation
    then
        insertLogical(new PhoneNumberEntry(
            "Contact Phone Number", 
            "/ContactInformation/PhoneNumber",
            $phoneNumber
        ));

end

rule 'Contract with county is required for CMHR treatment facility'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider, provider.providerType == ProviderType.CHILDRENS_MENTAL_HEALTH_RESIDENTIAL_TREATMENT_FACILITY.value())
        $credentials: FacilityCredentialsType() from $provider.facilityCredentials
        not CountyContractType() from $credentials.contractWithCounty 
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/contractAttachmentObjectId",
            "00001",
            "Contract with county is required for CMHR treatment facilities."
        );

end

rule 'Contract With County Is Required II'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 8
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskTCMForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType( ) from $provider.facilityCredentials
        not CountyContractType( ) from $credentials.contractWithCounty
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty",
            "00001",
            "Contract with county is required."
        );

end

rule 'Contract With County Is Required'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskPHNForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType( ) from $provider.facilityCredentials
        not CountyContractType( ) from $credentials.contractWithCounty
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty",
            "00001",
            "Contract with county is required."
        );

end

rule 'Contract With County Must be left empty'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        not ProviderTypeException(type == "AskPHNForm", providerType == $provider.providerType)
        not ProviderTypeException(type == "AskTCMForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType(  ) from $provider.facilityCredentials
        CountyContractType( ) from $credentials.contractWithCounty
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty",
            "00001",
            "Contract with county must be left empty for this provider type."
        );

end

rule 'Contract,Certificate Begin Date Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider)
        FacilityCredentialsType($contractList : signedContract, signedContract != null) from $provider.facilityCredentials
        $contract: SignedContractType(beginDate == null) from $contractList
        $report: ErrorReporter()
    then
        int index = $contractList.indexOf($contract);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/SignedContract[" + index +"]/BeginDate",
            "00001",
            "Certificate/contract begin date is required."
        );

end

rule 'Contract,Certificate Begin Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider)
        FacilityCredentialsType($contractList : signedContract, signedContract != null) from $provider.facilityCredentials
        $contract: SignedContractType($beginDate: beginDate, beginDate != null) from $contractList
        eval($beginDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter()
    then
        int index = $contractList.indexOf($contract);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/SignedContract[" + index +"]/BeginDate",
            "00001",
            "Certificate/contract begin date cannot be earlier than 01/01/1900."
        );

end

rule 'Contract,Certificate Copy Attachment Id Must Reference A Valid Attachment I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider)
        FacilityCredentialsType($contractList : signedContract, signedContract != null) from $provider.facilityCredentials
        $contract: SignedContractType(copyAttachmentId != null) from $contractList
        not AttachedDocumentsType(  ) from $provider.attachedDocuments
        $report: ErrorReporter()
    then
        int index = $contractList.indexOf($contract);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/SignedContract[" + index +"]/CopyAttachmentId",
            "00001",
            "Copy of certificate/contract must be provided as an attachment."
        );

end

rule 'Contract,Certificate Copy Attachment Id Must Reference A Valid Attachment II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider)
        FacilityCredentialsType($contractList : signedContract, signedContract != null) from $provider.facilityCredentials
        $contract: SignedContractType(copyAttachmentId != null) from $contractList
        $attachedDocuments: AttachedDocumentsType(  ) from $provider.attachedDocuments
        not DocumentType( objectId == $contract.copyAttachmentId ) from $attachedDocuments.attachment
        $report: ErrorReporter()
    then
        int index = $contractList.indexOf($contract);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/SignedContract[" + index +"]/CopyAttachmentId",
            "00001",
            "Copy of certificate/contract must be provided as an attachment."
        );

end

rule 'Contract,Certificate End Date Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider)
        FacilityCredentialsType($contractList : signedContract, signedContract != null) from $provider.facilityCredentials
        $contract: SignedContractType(endDate == null) from $contractList
        $report: ErrorReporter()
    then
        int index = $contractList.indexOf($contract);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/SignedContract[" + index +"]/EndDate",
            "00001",
            "Certificate/contract end date is required."
        );

end

rule 'Contract,Certificate End Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider)
        FacilityCredentialsType($contractList : signedContract, signedContract != null) from $provider.facilityCredentials
        $contract: SignedContractType($endDate: endDate, endDate != null) from $contractList
        eval($endDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter()
    then
        int index = $contractList.indexOf($contract);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/SignedContract[" + index +"]/EndDate",
            "00001",
            "Certificate/contract end date cannot be earlier than 01/01/1900."
        );

end


rule 'Contract,Certificate Name Must Be One Of Accepted Values'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider)
        FacilityCredentialsType($contractList : signedContract, signedContract != null) from $provider.facilityCredentials
        $contract: SignedContractType(name not in 
            (
                DocumentNames.ADULT_REHABILITATIVE_MENTAL_HEALTH_SERVICES.value(),
                DocumentNames.CHILDREN_S_THERAPEUTIC_SERVICES_AND_SUPPORTS_CTSS.value(),
                DocumentNames.ADULT_CRISIS_RESPONSE_SERVICES_CRISIS_ASSESSMENT_CRISIS_INTERVENTION.value(),
                DocumentNames.ADULT_CRISIS_RESPONSE_SERVICES_CRISIS_STABILIZATION.value(),
                DocumentNames.ADULT_CRISIS_RESPONSE_SERVICES_SHORT_TERM_RESIDENTIAL.value()
            )
        ) from $contractList
        $report: ErrorReporter()
    then
        int index = $contractList.indexOf($contract);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/SignedContract[" + index +"]/Name",
            "00001",
            "Contract/certificate name specified is not recognized."
        );

end

rule 'Contracts And Certificates Should Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType not in 
            (
              ProviderType.COUNTY_CONTRACTED_MENTAL_HEALTH_REHAB.value()
            ) 
        )
        FacilityCredentialsType(signedContract.size() > 0) from $provider.facilityCredentials
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/SignedContract",
            "00001",
            "Contract details must be left empty for this provider."
        );

end

rule 'Copy Of Childrens Mental Health Residential Treatment county contract Is Required For CMHR Treatment Facility'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider, provider.providerType == ProviderType.CHILDRENS_MENTAL_HEALTH_RESIDENTIAL_TREATMENT_FACILITY.value())
        $credentials: FacilityCredentialsType() from $provider.facilityCredentials
        CountyContractType(contractAttachmentObjectId == null) from $credentials.contractWithCounty 
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/contractAttachmentObjectId",
            "00001",
            "Copy Of county contract is required for this provider."
        );

end

rule 'Copy Of Contract Must Reference A Valid Attachment I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType(  ) from $provider.facilityCredentials
        CountyContractType(contractAttachmentObjectId != null) from $credentials.contractWithCounty
        not AttachedDocumentsType(  ) from $provider.attachedDocuments
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/ContractAttachmentObjectId",
            "00001",
            "Copy of contract with county must be provided as an attachment."
        );

end

rule 'Copy Of Contract Must Reference A Valid Attachment II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType(  ) from $provider.facilityCredentials
        $contract: CountyContractType(contractAttachmentObjectId != null) from $credentials.contractWithCounty
        $attachedDocuments: AttachedDocumentsType(  ) from $provider.attachedDocuments
        not DocumentType( objectId == $contract.contractAttachmentObjectId ) from $attachedDocuments.attachment
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/ContractAttachmentObjectId",
            "00001",
            "Copy of contract with county must be provided as an attachment."
        );

end

rule 'Copy Of Contract With County Is Required If Eligible Program Type Is A County Contracted Provider'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_ELIGIBILITY.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskForAgencyEligibility", providerType == $provider.providerType)
        $eligibility: AgencyEligibilityType(programType == "A county contracted provider") from $provider.agencyEligibility
        not CountyContractType(contractAttachmentObjectId != null) from $eligibility.contractWithCounty 
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyEligibility/ContractWithCounty",
            "00001",
            "Copy of contract with county is required."
        );

end

rule 'Copy Of Contract With County Is Required If Facility Type Is A County Contracted Provider'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider : provider, provider.providerType == ProviderType.DAY_TREATMENT.value())
        $credentials: FacilityCredentialsType(facilityType == "A county contracted provider") from $provider.facilityCredentials
        not CountyContractType(contractAttachmentObjectId != null) from $credentials.contractWithCounty 
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty",
            "00001",
            "Copy of contract with county is required."
        );

end

rule 'Copy Of Contract,Certificate Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider)
        FacilityCredentialsType($contractList : signedContract, signedContract != null) from $provider.facilityCredentials
        $contract: SignedContractType(copyAttachmentId == null || copyAttachmentId matches "^[\\s]*$") from $contractList
        $report: ErrorReporter()
    then
        int index = $contractList.indexOf($contract);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/SignedContract[" + index +"]/CopyAttachmentId",
            "00001",
            "Copy of certificate/contract is required."
        );

end

rule 'Copy Of DHS Contract Is Required If Community Health Board Is Y'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider )
        FacilityCredentialsType(communityHealthBoard == "Y") from $provider.facilityCredentials
        $attachedDocuments: AttachedDocumentsType(  ) from $provider.attachedDocuments
        not DocumentType( name == DocumentNames.COMMUNITY_HEALTH_BOARD_DHS_CONTRACT.value() ) from $attachedDocuments.attachment
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments/Document[name=\"Community Health Board DHS Contract\"]",
            "00001",
            "Copy of DHS Contract is required for community health boards."
        );

end

rule 'Copy Of Program Contract Must Reference A Valid Attachment I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_ELIGIBILITY.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $eligibility: AgencyEligibilityType(programType == "A county contracted provider") from $provider.agencyEligibility
        CountyContractType(contractAttachmentObjectId != null) from $eligibility.contractWithCounty 
        not AttachedDocumentsType(  ) from $provider.attachedDocuments
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyEligibility/ContractWithCounty/ContractAttachmentObjectId",
            "00001",
            "Copy of contract with county must be provided as an attachment."
        );

end

rule 'Copy Of Program Contract Must Reference A Valid Attachment II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $eligibility: AgencyEligibilityType(programType == "A county contracted provider") from $provider.agencyEligibility
        $contract: CountyContractType(contractAttachmentObjectId != null) from $eligibility.contractWithCounty 
        $attachedDocuments: AttachedDocumentsType(  ) from $provider.attachedDocuments
        not DocumentType( objectId == $contract.contractAttachmentObjectId ) from $attachedDocuments.attachment
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyEligibility/ContractWithCounty/ContractAttachmentObjectId",
            "00001",
            "Copy of contract with county must be provided as an attachment."
        );

end

rule 'Copy Of Selected Contract Cover Sheet Must Be Provided'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskTCMForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType(  ) from $provider.facilityCredentials
        CountyContractType(coverSheetAttachmentObjectId == null) from $credentials.contractWithCounty
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/CoverSheetAttachmentObjectId",
            "00001",
            "Copy of cover sheet type of contract with county is required."
        );

end

rule 'Copy Of Selected Contract Cover Sheet Must Reference A Valid Attachment I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskTCMForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType(  ) from $provider.facilityCredentials
        CountyContractType(coverSheetAttachmentObjectId != null) from $credentials.contractWithCounty
        not AttachedDocumentsType(  ) from $provider.attachedDocuments
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/CoverSheetAttachmentObjectId",
            "00001",
            "Copy of cover sheet type of contract with county must be provided as an attachment."
        );

end

rule 'Copy Of Selected Contract Cover Sheet Must Reference A Valid Attachment II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskTCMForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType(  ) from $provider.facilityCredentials
        $contract: CountyContractType(coverSheetAttachmentObjectId != null) from $credentials.contractWithCounty
        $attachedDocuments: AttachedDocumentsType(  ) from $provider.attachedDocuments
        not DocumentType( objectId == $contract.coverSheetAttachmentObjectId ) from $attachedDocuments.attachment
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/CoverSheetAttachmentObjectId",
            "00001",
            "Copy of cover sheet type of contract with county must be provided as an attachment."
        );

end

rule 'Copy Of Selected Qualification Type Must Be Provided I'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.FEDERALLY_QUALIFIED_HEALTH_CENTER.value())
        FacilityCredentialsType(federalQualificationType != null) from $provider.facilityCredentials
        not AttachedDocumentsType(  ) from $provider.attachedDocuments
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments",
            "00001",
            "Copy of selected qualification type must be provided."
        );

end

rule 'Copy Of Selected Qualification Type Must Be Provided II'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.FEDERALLY_QUALIFIED_HEALTH_CENTER.value())
        $credentials:  FacilityCredentialsType(federalQualificationType != null) from $provider.facilityCredentials
        $attachedDocuments: AttachedDocumentsType(  ) from $provider.attachedDocuments
        not DocumentType( name == $credentials.federalQualificationType ) from $attachedDocuments.attachment
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments[name=\"Federal Qualification Type\"]",
            "00001",
            "Copy of selected qualification type must be provided."
        );

end

rule 'Date of Birth cannot be in the future'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value())
        IsIndividual($provider : provider)
        IndividualApplicantType($dateOfBirth: dateOfBirth, dateOfBirth != null)
        eval($dateOfBirth.after(java.util.Calendar.getInstance())) 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/DateOfBirth",
            "00001",
            "Date of Birth cannot be a future date."
        );

end

rule 'Date of Birth cannot be before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value())
        IsIndividual($provider : provider)
        IndividualApplicantType($dateOfBirth: dateOfBirth, dateOfBirth != null)
        eval($dateOfBirth.before(getEarliestAcceptableDate())) 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/DateOfBirth",
            "00001",
            "Date of Birth cannot be earlier than 01/01/1900."
        );

end

rule 'Date of Birth is Required for Individual Applicant'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value())
        IsIndividual($provider : provider)
        IndividualApplicantType(dateOfBirth == null) 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/DateOfBirth",
            "00001",
            "Date of Birth is required for individual applicants."
        );

end

rule 'Day Training And Habilitation License Is required for Day Training And Habilitation,Day Activity Center'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.DAY_TRAINING_AND_HABILITATION_DAY_ACTIVITY_CENTER.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.DAY_TRAINING_HABILITATION_LICENSE.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Day training and habilitation license is required for this provider."
        );

end

rule 'DBA Name Is Required For PCPO'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider, provider.providerType == ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value())
        OrganizationApplicantType( name == null || name matches "^[\\s]*$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/Name",
            "00001",
            "DBA Name is required."
        );

end

rule 'Facility Name Is Required For Nursing Facility'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider, provider.providerType == ProviderType.NURSING_FACILITY.value())
        OrganizationApplicantType( name == null || name matches "^[\\s]*$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/Name",
            "00001",
            "Facility Name is required."
        );

end

rule 'Facility Name Is Required For PWDD Intermediate Care Facility'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization(provider.providerType == ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value())
        OrganizationApplicantType( name == null || name matches "^[\\s]*$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/Name",
            "00001",
            "Facility Name is required."
        );

end


rule 'DBA Name Maximum Length Check'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        IsOrganization($provider: provider, provider.providerType == ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value())
        OrganizationApplicantType( name != null, name not matches "^.{0,100}$" )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/Name",
            "00001",
            "DBA Name length cannot exceed 100 characters."
        );

end

rule 'Define Agency Applications'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
dialect 'mvel'
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AgencyApplication", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value()));

end

rule 'Define Categories Of Service For Home And Community Based Services'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
salience 10
    when
    then
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "AC Transportation"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Home Delivered Meals"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Adult Day Services"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Homemaker Services"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Behavioral Program Services"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "In-home Family Support"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Caregiver Training"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Independent Living Skills"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Case Management Waiver/Alternative Care"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Modification and Adaptations"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Chore"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Nutritional Services"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Cognitive Therapy"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "PERS and AC Supplies"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Companion Services"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Respite Care"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Consumer Directed Community Support (CDCS)"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Specialized Supplies & Equipment (Waiver)"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Spenddown Collection"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Customized Living, 24 CL, Residential Care Services, Assisted Living Services"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Structured Day Program Services"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Supported Employment Services"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Family Counseling and Training"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Supported Living Services"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Foster Care Services"));
        insertLogical(new LookupEntry("ServiceOption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value(), "Waiver Transportation"));

end

rule 'Define Clinical Services Options For Adult Day Treatment Application'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
salience 10
    when
    then
        insertLogical(new LookupEntry("ClinicalServices", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), ClinicalServices.CS1.value()));
        insertLogical(new LookupEntry("ClinicalServices", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), ClinicalServices.CS2.value()));
        insertLogical(new LookupEntry("ClinicalServices", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), ClinicalServices.CS3.value()));
        insertLogical(new LookupEntry("ClinicalServices", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), ClinicalServices.CS4.value()));
        insertLogical(new LookupEntry("ClinicalServices", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), ClinicalServices.CS5.value()));
        insertLogical(new LookupEntry("ClinicalServices", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), ClinicalServices.CS6.value()));
        insertLogical(new LookupEntry("ClinicalServices", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), ClinicalServices.CS7.value()));

end

rule 'Define Dual License Additional Category For Clinical Social Worker'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
salience 10
    when
        ProviderInformationType($providerType: providerType, providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
    then
        insertLogical(new AdditionalCategory($providerType, ProviderType.LICENSED_MARRIAGE_AND_FAMILY_THERAPIST.value()));

end

rule 'Define Dual License Additional Category For Psychologist'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
salience 10
    when
        ProviderInformationType($providerType: providerType, providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
    then
        insertLogical(new AdditionalCategory($providerType, ProviderType.LICENSED_MARRIAGE_AND_FAMILY_THERAPIST.value()));
        insertLogical(new AdditionalCategory($providerType, ProviderType.LICENSED_PROFESSIONAL_CLINICAL_COUNSELOR.value()));

end

rule 'Define Education Plan Organizations'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("EducationPlan", ProviderType.INDIVIDUAL_EDUCATION_PLAN.value()));

end

rule 'Define Eligible Recipients For Adult Day Treatment Application'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
salience 10
    when
    then
        insertLogical(new LookupEntry("TargetPopulation", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), "Adults with Acute or Chronic Mental Illness, including Serious and Persistent Mental Illness"));

end

rule 'Define Exceptions For Certification Certificate of Clinical Competence (CCC)'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
salience 10
    when
    then
        insertLogical(new CertificateException("RenewalEndDate", "Certificate of Clinical Competence (CCC)", "*"));

end

rule 'Define Exceptions For Certification MnSCU Certification'
dialect 'mvel'
salience 10
    when
    then
        insertLogical(new CertificateException("RenewalEndDate", "MnSCU Certification", "*"));
        insertLogical(new CertificateException("LicenseNumber", "MnSCU Certification", "*"));

end

rule 'Define Non-Practice Organizations'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
dialect 'mvel'
salience 10
    when
    then
        insertLogical(new ProviderTypeException("NonPracticeOrganization", ProviderType.CLEARING_HOUSE.value()));
        insertLogical(new ProviderTypeException("NonPracticeOrganization", ProviderType.EDI_TRADING_PARTNER.value()));
        insertLogical(new ProviderTypeException("NonPracticeOrganization", ProviderType.BILLING_INTERMEDIARY.value()));

end

rule 'Define NPI Requirement Exception for Community Health Worker'
dialect 'mvel'
salience 10
    when
    then
        insertLogical(new ProviderTypeException("NPIExemption", ProviderType.COMMUNITY_HEALTH_CARE_WORKER.value()));
        insertLogical(new ProviderTypeException("NPIExemption", ProviderType.CLEARING_HOUSE.value()));
        insertLogical(new ProviderTypeException("NPIExemption", ProviderType.EDI_TRADING_PARTNER.value()));
        insertLogical(new ProviderTypeException("NPIExemption", ProviderType.WIC_PROGRAM.value()));
        insertLogical(new ProviderTypeException("NPIExemption", ProviderType.BILLING_INTERMEDIARY.value()));
        insertLogical(new ProviderTypeException("NPIExemption", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value()));
        insertLogical(new ProviderTypeException("NPIExemption", ProviderType.DAY_TREATMENT.value()));
        insertLogical(new ProviderTypeException("NPIExemption", ProviderType.PERSONAL_CARE_ASSISTANT.value()));
        insertLogical(new ProviderTypeException("NPIExemption", ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value()));
        insertLogical(new ProviderTypeException("NPIExemption", ProviderType.DAY_TRAINING_AND_HABILITATION_DAY_ACTIVITY_CENTER.value()));
        insertLogical(new ProviderTypeException("NPIExemption", ProviderType.HEAD_START.value()));
        insertLogical(new ProviderTypeException("NPIExemption", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value()));
end

rule 'Define UMPI Flag for selected providers'
dialect 'mvel'
salience 10
    when
    then
    	insertLogical(new ProviderTypeException("CanBeUMPI", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value()));
end
    
rule 'Define Possible Specialties For Clinical Nurse Specialist'
dialect 'mvel'
salience 10
    when
        ProviderInformationType($providerType: providerType, providerType == ProviderType.CLINICAL_NURSE_SPECIALIST.value())
    then
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PSYCHIATRIC_MENTAL_HEALTH.value()));

end

rule 'Define Possible Specialties For Clinical Social Worker'
dialect 'mvel'
salience 10
    when
        ProviderInformationType($providerType: providerType, providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
    then
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.DIALECTICAL_BEHAVIORAL_THERAPIST.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.QUALIFIED_MENTAL_HEALTH_SUPERVISION.value()));

end

rule 'Define Possible Specialties For Dentist'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
salience 10
    when
        ProviderInformationType($providerType: providerType, providerType == ProviderType.DENTIST.value())
    then
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.GENERAL_DENTISTRY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.ENDODONTIST.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.ORAL_SURGERY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.ORTHODONTICS.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PEDODONTICS.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PERIODONTICS.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PROSTHODONTICS.value()));

end

rule 'Define Possible Specialties For Licensed Psychologists'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
salience 10
    when
        ProviderInformationType($providerType: providerType, providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
    then
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.NEUROPSYCHOLOGY.value()));

end

rule 'Define Possible Specialties For Nurse Midwife'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
salience 10
    when
        ProviderInformationType($providerType: providerType, providerType == ProviderType.NURSE_MIDWIFE.value())
    then
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PROFESSIONAL_MIDWIFE.value()));

end

rule 'Define Possible Specialties For Nurse Practitioner'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
salience 10
    when
        ProviderInformationType($providerType: providerType, providerType == ProviderType.NURSE_PRACTITIONER.value())
    then
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PSYCHIATRIC_MENTAL_HEALTH.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.GERONTOLOGICAL.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PEDIATRIC.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.FAMILY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.ADULT.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.NEONATAL.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.WOMEN_S_HEALTH_CARE.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.ACUTE_CARE.value()));

end

rule 'Define Possible Specialties For Occupational Therapist'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
salience 10
    when
        ProviderInformationType($providerType: providerType, providerType == ProviderType.OCCUPATIONAL_THERAPIST.value())
    then
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.OCCUPATIONAL_THERAPY.value()));

end

rule 'Define Possible Specialties For Physician'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
salience 10
    when
        ProviderInformationType($providerType: providerType, providerType == ProviderType.PHYSICIAN.value())
    then
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.ALLERGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.ANESTHESIOLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.CARDIOVASCULAR_DISEASE.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.CARDIOVASCULAR_SURGERY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.CHILD_PSYCHIATRY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.COLON_AND_RECTAL_SURGERY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.DERMATOLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.DIABETES.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.EMERGENCY_SERVICES.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.ENDOCRINOLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.FAMILY_PRACTICE.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.GASTROENTEROLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.GENERAL_PRACTICE.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.GENERAL_SURGERY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.GERONTOLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.GYNECOLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.IMMUNOLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.INFECTIOUS_DISEASE.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.INTERNAL_MEDICINE.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.NEPHROLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.NEUROLOGICAL_SURGERY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.NEUROLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.NUCLEAR_MEDICINE.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.OBSTETRICS.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.OBSTETRICS_AND_GYNECOLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.ONCOLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.OPHTHALMOLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PATHOLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PEDIATRICS.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PERIPHERAL_VASCULAR_DISEASES_OR_SURGERY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PHYSICAL_MEDICINE_AND_REHABILITATION.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PLASTIC_SURGERY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PREVENTIVE_MEDICINE.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PSYCHIATRY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.PULMONARY_DISEASE.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.RADIOLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.RADIOLOGY_AND_RADIATION_THERAPY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.RHEUMATOLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.THORACIC_SURGERY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.UROLOGY.value()));
        insertLogical(new ProviderSpecialty($providerType, SpecialtyNames.OTHER.value()));
end

rule 'Define Private Practice Indicator Exception For Allied Dental Professionals'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("PrivatePracticeExemption", ProviderType.ALLIED_DENTAL_PROFESSIONAL.value()));    

end

rule 'Define Private Practice Indicator Exception For Community Health Care Workers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("PrivatePracticeExemption", ProviderType.COMMUNITY_HEALTH_CARE_WORKER.value()));    

end

rule 'Define Private Practice Indicator Exception For Physician Assistant'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("PrivatePracticeExemption", ProviderType.PHYSICIAN_ASSISTANT.value()));    

end

rule 'Define Provider Types That Can Enter Specialty Certifications'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
salience 10
    when
        ProviderInformationType($providerType: providerType, 
            providerType in (
                ProviderType.CERTIFIED_PROFESSIONAL_MIDWIFE.value(),
                ProviderType.CLINICAL_NURSE_SPECIALIST.value(),
                ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST.value(),
                ProviderType.LICENSED_PSYCHOLOGIST.value(),
                ProviderType.PHYSICIAN.value(),
                ProviderType.NURSE_PRACTITIONER.value(),
                ProviderType.OCCUPATIONAL_THERAPIST.value(),
                ProviderType.DENTIST.value(),
                ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value(),
                ProviderType.NURSE_MIDWIFE.value()
            )
        )
    then
        insertLogical(new LookupEntry("SpecialtyTypeBehavior", "XOR", $providerType));

end

rule 'Define Service Unit Options For Adult Day Treatment Application'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
salience 10
    when
    then
        insertLogical(new LookupEntry("ServiceUnits", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), ServiceUnits.SU1.value()));
        insertLogical(new LookupEntry("ServiceUnits", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), ServiceUnits.SU2.value()));
        insertLogical(new LookupEntry("ServiceUnits", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), ServiceUnits.SU3.value()));

end

rule 'Define Supervision Options For Adult Day Treatment Application'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
salience 10
    when
    then
        insertLogical(new LookupEntry("SupervisionAndQualification", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), SupervisionAndQualification.SQ1.value()));
        insertLogical(new LookupEntry("SupervisionAndQualification", ProviderType.ADULT_DAY_TREATMENT_APPLICATION.value(), SupervisionAndQualification.SQ2.value()));

end

rule 'Required Agreements Must Be Accepted For These Provider Types I'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        $provider: ProviderInformationType()
        $agreementType : LookupEntry(type == "RequiredAgreement", code == $provider.providerType)
        $agreements: AcceptedAgreementsType( ) from $provider.acceptedAgreements
        not ProviderAgreementType( agreementDocumentTitle == $agreementType.value) from $agreements.providerAgreement
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AcceptedAgreements",
            "00001",
            "You must accept the " + $agreementType.getValue() + "."
        );

end

rule 'Required Agreements Must Be Accepted For These Provider Types II'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        $provider: ProviderInformationType()
        $agreementType : LookupEntry(type == "RequiredAgreement", code == $provider.providerType)
        not AcceptedAgreementsType( ) from $provider.acceptedAgreements
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AcceptedAgreements",
            "00001",
            "You must accept the " + $agreementType.getValue() + "."
        );
end

rule 'DHS-4646 Is Required For These Provider Types I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_PROVIDER_STATEMENT.value())
        $provider: ProviderInformationType(providerType == ProviderType.CHILD_AND_TEEN_CHECKUP_CLINIC.value())
        $agreements: AcceptedAgreementsType( ) from $provider.acceptedAgreements
        not ProviderAgreementType( agreementDocumentTitle == DocumentNames.CHILD_AND_TEEN_CHECKUP_AGREEMENT_DHS_4646.value()) from $agreements.providerAgreement
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AcceptedAgreements",
            "00001",
            "You must accept the Child And Teen Checkup Agreement."
        );

end

rule 'DHS-4646 Is Required For These Provider Types II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_PROVIDER_STATEMENT.value())
        $provider: ProviderInformationType(providerType == ProviderType.CHILD_AND_TEEN_CHECKUP_CLINIC.value())
        not AcceptedAgreementsType( ) from $provider.acceptedAgreements
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AcceptedAgreements",
            "00001",
            "You must accept the Child And Teen Checkup Agreement."
        );

end

rule 'DHS-5748 Must Be Signed For These Provider Types I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_PROVIDER_STATEMENT.value())
        $provider: ProviderInformationType(providerType == ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value())
        not AcceptedAgreementsType( ) from $provider.acceptedAgreements
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AcceptedAgreements",
            "00001",
            "You must accept the Community Mental Health Center Assurance Statement."
        );

end

rule 'DHS-5748 Must Be Signed For These Provider Types II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_PROVIDER_STATEMENT.value())
        $provider: ProviderInformationType(providerType == ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value())
        $agreements: AcceptedAgreementsType( ) from $provider.acceptedAgreements
        not ProviderAgreementType( agreementDocumentTitle == DocumentNames.APPLICANT_ASSURANCE_STATEMENT_COMMUNITY_MENTAL_HEALTH_CENTER_DHS_5748.value()) from $agreements.providerAgreement
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AcceptedAgreements",
            "00001",
            "You must accept the Community Mental Health Center Assurance Statement."
        );

end

rule 'Disclosure Question 1 Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual()
        ProviderInformationType(hasCriminalConviction == null || hasCriminalConviction matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/HasCriminalConviction",
            "00001",
            "Please indicate an answer to the criminal conviction history disclosure question."
        );

end

rule 'Disclosure Question 1 Must Be Answered In Y,N'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual()
        ProviderInformationType(hasCriminalConviction != null, hasCriminalConviction not matches "^[\\s]*$", hasCriminalConviction not matches "^[YN]$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/HasCriminalConviction",
            "00001",
            "Criminal conviction history disclosure question answer must be in Y/N."
        );

end

rule 'Disclosure Question 2 Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual()
        ProviderInformationType(hasCivilPenalty == null || hasCivilPenalty matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/HasCivilPenalty",
            "00001",
            "Please indicate an answer to the civil penalty history disclosure question."
        );

end

rule 'Disclosure Question 2 Must Be Answered In Y,N'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual()
        ProviderInformationType(hasCivilPenalty != null, hasCivilPenalty not matches "^[\\s]*$", hasCivilPenalty not matches "^[YN]$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/HasCivilPenalty",
            "00001",
            "Civil penalty history disclosure question answer must be in Y/N."
        );

end

rule 'Disclosure Question 3 Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual()
        ProviderInformationType(hasPreviousExclusion == null || hasPreviousExclusion matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/HasPreviousExclusion",
            "00001",
            "Please indicate an answer to the exclusion history disclosure question."
        );

end

rule 'Disclosure Question 3 Must Be Answered In Y,N'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual()
        ProviderInformationType(hasPreviousExclusion != null, hasPreviousExclusion not matches "^[\\s]*$", hasPreviousExclusion not matches "^[YN]$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/HasPreviousExclusion",
            "00001",
            "Exclusion history disclosure question answer must be in Y/N."
        );

end

rule 'Doing Business As Is Required For Organizations'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider, provider.providerType not in (
                ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value(), 
                ProviderType.NURSING_FACILITY.value(),
                ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value()
            )
        )
        not ProviderTypeException(type == "NonPracticeOrganization", providerType == $provider.providerType)
        not ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        not ProviderTypeException(type == "EducationPlan", providerType == $provider.providerType)
        OrganizationApplicantType( name == null || name matches "^[\\s]*$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/Name",
            "00001",
            "Doing Business As is required."
        );

end

rule 'Doing Business As Maximum Length Check'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
dialect 'mvel'
    when
        IsOrganization($provider: provider, provider.providerType not in (
                ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value(), 
                ProviderType.NURSING_FACILITY.value(),
                ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value()
            )
        )
        not ProviderTypeException(type == "NonPracticeOrganization", providerType == $provider.providerType)
        not ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        not ProviderTypeException(type == "EducationPlan", providerType == $provider.providerType)
        OrganizationApplicantType( name != null, name not matches "^.{0,100}$" )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/Name",
            "00001",
            "Doing Business As length cannot exceed 100 characters."
        );

end

rule 'EFT Vendor Number Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 * Updated character length check - PEPS-254
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        PracticeInformationType(EFTVendorNumber != null, EFTVendorNumber not matches "^.{0,14}$") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/EFTVendorNumber",
            "00001",
            "EFT vendor number length cannot exceed 14 characters."
        );

end

rule 'EFT Vendor Number Should Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice != "Y" )
        PracticeInformationType(EFTVendorNumber != null, EFTVendorNumber != "") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/EFTVendorNumber",
            "00001",
            "EFT vendor number must be left empty if not in private practice."
        );

end

rule 'Eighteen Years Old And Above Must Be Answered For Specified Provider Types'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value())
        IsIndividual($provider : provider, provider.providerType == ProviderType.PERSONAL_CARE_ASSISTANT.value())
        ProviderInformationType( eighteenAndAbove == null )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/EighteenAndAbove",
            "00001",
            "Please indicate if applicant is eighteen years old and above."
        );

end

rule 'Eighteen Years Old And Above Must Be Answered In Y,N'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value())
        IsIndividual()
        ProviderInformationType( eighteenAndAbove != null, eighteenAndAbove != "Y", eighteenAndAbove != "N"  )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/EighteenAndAbove",
            "00001",
            "Eighteen and above question must be answered in Y/N."
        );

end

rule 'Eligible Program Type Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_ELIGIBILITY.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskForAgencyEligibility", providerType == $provider.providerType)
        AgencyEligibilityType(programType == null || programType matches "^[\\s]*$" ) from $provider.agencyEligibility
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AgencyEligibility/ProgramType",
            "00001",
            "Program type is required."
        );

end

rule 'Eligible Program Type Must Be One Of The Following Values'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_ELIGIBILITY.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskForAgencyEligibility", providerType == $provider.providerType)
        AgencyEligibilityType(programType != null, programType not matches "^[\\s]*$", 
            programType not in ("A Community Mental Health Center", "An outpatient Hospital", "A county contracted provider" ) ) from $provider.agencyEligibility
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AgencyEligibility/ProgramType",
            "00001",
            "Program type is expected to be one of 'A Community Mental Health Center', 'An outpatient Hospital' or 'A county contracted provider'."
        );

end

rule 'Email Address Format Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        IsIndividual($provider : provider)
        $individual: IndividualApplicantType()
        ContactInformationType(emailAddress != null, emailAddress not matches "^[\\s]*$", 
            emailAddress matches "^.{0,100}$",
            emailAddress not matches "(?i)[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}") from $individual.contactInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/ContactInformation/EmailAddress",
            "00001",
            "Email Address must match the pattern \"USER@DOMAIN.EXT\"."
        );

end

rule 'Email Address Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        IsIndividual($provider : provider)
        $individual: IndividualApplicantType()
        ContactInformationType(emailAddress != null, emailAddress not matches "^.{0,100}$") from $individual.contactInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/ContactInformation/EmailAddress",
            "00001",
            "Email Address length cannot exceed 100 characters."
        );

end

rule 'Employed Or Contracted By A Group Is Required With Exceptions'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType(employedOrContractedByGroup  == null || employedOrContractedByGroup matches "^[\\s]*$" )
        not ProviderTypeException(type == "PrivatePracticeExemption", providerType == $provider.providerType )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/EmployedOrContractedByGroup",
            "00001",
            "You must indicate if the applicant is employed or contracted by a group."
        );

end

rule 'Employed Or Contracted By A Group should be answered in Y,N'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType(employedOrContractedByGroup != null, employedOrContractedByGroup not matches "^[YN]$" )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/EmployedOrContractedByGroup",
            "00001",
            "Employed Or Contracted By A Group indicator can only be answered by Y or N."
        );

end


rule 'Private Practice Indicator and Employed Or Contracted By A Group both cannot be No at the same time'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType(maintainsOwnPrivatePractice == "N",  employedOrContractedByGroup == "N")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MaintainsOwnPrivatePractice",
            "00001",
            "Either Private practice indicator Or Employed/Contracted by a group indicator must be answered as Yes."
        );
end

rule 'Enrollment Contact Email Address Format Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        $enrollment: EnrollmentType() 
        ContactInformationType(emailAddress != null, emailAddress not matches "^[\\s]*$",  
            emailAddress matches "^.{0,100}$",
            emailAddress not matches "(?i)[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}") from $enrollment.contactInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ContactInformation/EmailAddress",
            "00001",
            "Enrollment Contact Email Address must match the pattern \"USER@DOMAIN.EXT\"."
        );

end

rule 'Enrollment Contact Email Address Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        $enrollment: EnrollmentType() 
        ContactInformationType(emailAddress not matches "^.{0,100}$") from $enrollment.contactInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ContactInformation/EmailAddress",
            "00001",
            "Enrollment Contact Email Address length cannot exceed 100 characters."
        );

end

rule 'Enrollment Contact Name  Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        $enrollment: EnrollmentType() 
        ContactInformationType(name != null, name not matches "^.{0,100}$") from $enrollment.contactInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ContactInformation/Name",
            "00001",
            "Enrollment Contact Name length cannot exceed 100 characters."
        );

end

rule 'Enrollment Contact Name is required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.1
 * @since Provider Enrollment Drools Front End Validation Part 1
 * v1.1 added organization support
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value() || value == UISection.ORGANIZATION_INFORMATION.value())
        $enrollment: EnrollmentType() 
        ContactInformationType(name == null || name matches "^[\\s]*$") from $enrollment.contactInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ContactInformation/Name",
            "00001",
            "Enrollment Contact Name is required for all requests."
        );

end

rule 'Enrollment Contact Phone Number Is Required For Organizations'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization()
        $enrollment: EnrollmentType() 
        ContactInformationType(phoneNumber == null || phoneNumber matches "^[\\s]*$") from $enrollment.contactInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ContactInformation/PhoneNumber",
            "00001",
            "Contact Phone Number is required."
        );

end


rule 'Atleast one specialty is required for Physician'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.PHYSICIAN.value())
        SpecialtiesType($specialties: specialtyName) from $provider.specialties
        List (size  == 0) from collect (String( ) from $specialties)
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "At least one specialty is required for Physician."
        );
end

rule 'Entered Specialty Must Be Valid for the provider type'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        SpecialtiesType($specialties: specialtyName) from $provider.specialties
        $specialtyName: String( ) from $specialties
        not ProviderSpecialty(specialty == $specialtyName, providerType == $providerType)
        $report: ErrorReporter()
    then
        int index = $specialties.indexOf($specialtyName);
        $report.addError(
            "/ProviderInformation/Specialties/SpecialtyName[" + index + "]",
            "00001",
            "Specialty specified is not applicable to this provider type."
        );

end

rule 'Entity Description Is Required If Entity Type is Other'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType(entityType == "Other", otherEntityDescription == null || otherEntityDescription matches "^[\\s]*$") from $provider.ownershipInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/OwnershipInformation/OtherEntityDescription",
            "00001",
            "Other entity type description is required."
        );

end

rule 'Entity Description Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType(otherEntityDescription != null, otherEntityDescription not matches "^.{0,100}$") from $provider.ownershipInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/OwnershipInformation/OtherEntityDescription",
            "00001",
            "Other entity type description length cannot exceed 100 characters."
        );

end

rule 'Entity Sub Type Must Be One Of the Following Values For A Professional Association'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskOwnershipInfo", providerType == $provider.providerType)
        OwnershipInformationType(entityType == EntityType.PROFESSIONAL_ASSOCIATION.value(), entitySubType != null, 
            entitySubType not matches "^[\\s]*$", entitySubType not in ("Non-Profit", "For-Profit")) from $provider.ownershipInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/OwnershipInformation/EntitySubType",
            "00001",
            "Entity sub type must be one of Non-Profit, For-Profit."
        );

end

rule 'Entity Type Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskOwnershipInfo", providerType == $provider.providerType)
        OwnershipInformationType(entityType == null || entityType matches "^[\\s]*$") from $provider.ownershipInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/OwnershipInformation/EntityType",
            "00001",
            "Entity type is required."
        );

end

rule 'Entity Type Must Be One Of the Following Values'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($entityType: entityType, entityType != null, entityType not matches "^[\\s]*$") from $provider.ownershipInformation
        not LookupEntry( type == "EntityType", value == $entityType )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/OwnershipInformation/EntityType",
            "00001",
            "Entity type specified is not recognized."
        );

end

rule 'Facility Capacity Is Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskFacilityCapacity", ProviderType.REGIONAL_TREATMENT_CENTER.value()));

end

rule 'Facility Credentials Are Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.HEAD_START.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.HOME_HEALTH_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.INDEPENDENT_DIAGNOSTIC_TESTING_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.INDEPENDENT_LABORATORY.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.INDIAN_HEALTH_SERVICE_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.INTENSIVE_RESIDENTIAL_TREATMENT_FACILITY.value()));
        
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.PHARMACY.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.PRIVATE_DUTY_NURSING_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.PUBLIC_HEALTH_NURSING_ORGANIZATION.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.REGIONAL_TREATMENT_CENTER.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.REHABILITATION_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.RURAL_HEALTH_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.TARGETED_CASE_MANAGEMENT.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.X_RAY_SERVICES.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.FEDERALLY_QUALIFIED_HEALTH_CENTER.value()));
        
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.AMBULATORY_SURGICAL_CENTER.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.CHILD_AND_TEEN_CHECKUP_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.CHILDRENS_MENTAL_HEALTH_RESIDENTIAL_TREATMENT_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.COUNTY_CONTRACTED_MENTAL_HEALTH_REHAB.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.DAY_TRAINING_AND_HABILITATION_DAY_ACTIVITY_CENTER.value()));
        
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.DAY_TREATMENT.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.NURSING_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.HOSPITAL.value()));
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.HOSPICE.value()));
        
        // Added for PESP-301 
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value()));
        // Added for PESP-297
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.RENAL_DIALYSIS_FACILITY.value()));
        // Added for PESP-308
        insertLogical(new ProviderTypeException("AskFacilityCredentialsInfo", ProviderType.BIRTHING_CENTER.value()));

end

rule 'Facility Credentials Are Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskFacilityCredentialsInfo", providerType == $provider.providerType)
        ProviderInformationType(facilityCredentials == null)
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Facility credentials are required."
        );

end

rule 'Facility License Copy Attachment Id Must Reference A Valid Attachment I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType(attachmentObjectId != null) from $licenseList
        not AttachedDocumentsType(  ) from $provider.attachedDocuments
        $report: ErrorReporter()
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/AttachmentObjectId",
            "00001",
            "Copy of facility license must be provided as an attachment."
        );

end

rule 'Facility License Copy Attachment Id Must Reference A Valid Attachment II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType(attachmentObjectId != null) from $licenseList
        $attachedDocuments: AttachedDocumentsType(  ) from $provider.attachedDocuments
        not DocumentType( objectId == $license.attachmentObjectId ) from $attachedDocuments.attachment
        $report: ErrorReporter()
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/AttachmentObjectId",
            "00001",
            "Copy of facility license must be provided as an attachment."
        );

end

rule 'Facility License Copy Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType( attachmentObjectId == null ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/AttachmentObjectId",
            "00001",
            "Copy of facility license is required."
        );

end

rule 'Facility License Issuing State Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType( issuingState == null || issuingState matches "^[\\s]*$" ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/IssuingState",
            "00001",
            "Facility license issuing state is required."
        );

end

rule 'Facility License Issuing State Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType( issuingState != null, issuingState not matches "^.{0,20}$" ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/IssuingState",
            "00001",
            "Facility license issuing state length cannot exceed 20 characters."
        );

end

rule 'Facility License Number Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType( licenseNumber == null || licenseNumber matches "^[\\s]*$" ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/LicenseNumber",
            "00001",
            "Facility license number is required."
        );

end

rule 'Facility License Number Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType( licenseNumber != null, licenseNumber not matches "^.{0,100}$" ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/LicenseNumber",
            "00001",
            "Facility license number length cannot exceed 100 characters."
        );

end

rule 'Facility License Original Issue Date Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType( originalIssueDate == null) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/OriginalIssueDate",
            "00001",
            "Facility license original issue date is required."
        );
end

rule 'Facility License Original Issue Date Cannot Be A Future Date'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType($originalIssueDate: originalIssueDate, originalIssueDate != null) from $licenseList
        eval($originalIssueDate.after(Calendar.getInstance()))
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/OriginalIssueDate",
            "00001",
            "Facility license original issue date cannot be a future date."
        );
end

rule 'Facility License Original Issue Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType($originalIssueDate: originalIssueDate, originalIssueDate != null) from $licenseList
        eval($originalIssueDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/OriginalIssueDate",
            "00001",
            "Facility license original issue date cannot be earlier than 01/01/1900."
        );
end

rule 'Facility License Original Issue Date Cannot Be After Effective Date'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        EnrollmentType($effectiveDate: effectiveDate, effectiveDate != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType($originalIssueDate: originalIssueDate, originalIssueDate != null) from $licenseList
        eval($originalIssueDate.after($effectiveDate))
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/OriginalIssueDate",
            "00001",
            "Facility license original issue date cannot be earlier than Effective Date."
        );
end


rule 'Facility License Renewal Date Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType( renewalDate == null, licenseType not in 
        					 ( LicenseNames.BACKGROUND_STUDY.value(),
        					   LicenseNames.LICENSE_AND_TRANSMITTAL_CMS_1539_FORM_FROM_MN_DEPARTMENT_OF_HEALTH.value(),
        					   LicenseNames.HCFA_MEDICARE_CERTIFICATION.value()
        					 ))
        					  from $licenseList
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/RenewalDate",
            "00001",
            "Facility license renewal date is required."
        );

end

rule 'Facility License Renewal Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType($renewalDate: renewalDate, renewalDate != null) from $licenseList
        eval($renewalDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/RenewalDate",
            "00001",
            "Facility license renewal date cannot be earlier than 01/01/1900."
        );

end

rule 'Facility License Type Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        $license: LicenseType( licenseType == null || licenseType matches "^[\\s]*$" ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/FacilityCredentials/License[" + index+ "]/LicenseType",
            "00001",
            "Facility license type is required."
        );

end

rule 'Facility Licenses Must Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider : provider)
        not ProviderTypeException(type == "AskFacilityCredentialsInfo", providerType == $provider.providerType)
        ProviderInformationType(facilityCredentials != null)
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Facility credentials must be left empty for this provider."
        );

end

rule 'Facility Type Is Required For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider : provider, provider.providerType == ProviderType.DAY_TREATMENT.value())
        FacilityCredentialsType( facilityType == null || facilityType matches "^[\\s]*$") from $provider.facilityCredentials
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/FacilityType",
            "00001",
            "Facility type is required."
        );

end

rule 'Facility Type Must Be One Of The Following Values'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider : provider, provider.providerType == ProviderType.DAY_TREATMENT.value())
        FacilityCredentialsType(facilityType != null, facilityType not matches "^[\\s]*$", 
            facilityType not in ("A Community Mental Health Center", "An outpatient Hospital", "A county contracted provider" ) ) from $provider.facilityCredentials
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/FacilityType",
            "00001",
            "Facility type is expected to be one of 'A Community Mental Health Center', 'An outpatient Hospital' or 'A county contracted provider'."
        );

end

rule 'Fax Number Must Be In A Valid Format'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        IsIndividual($provider : provider)
        $individual: IndividualApplicantType()
        ContactInformationType($faxNumber: faxNumber, faxNumber != null) from $individual.contactInformation
    then
        insertLogical(new PhoneNumberEntry(
            "Fax Number", 
            "/ProviderInformation/ApplicantInformation/PersonalInformation/ContactInformation/FaxNumber",
            $faxNumber
        ));

end


rule 'First Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        IsIndividual($provider : provider)
        IndividualApplicantType(firstName != null, firstName not matches "^.{0,50}$") 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/FirstName",
            "00001",
            "First Name length cannot exceed 50 characters."
        );

end

rule 'Fiscal Year End Is Required For Education Plans'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "EducationPlan", providerType == $provider.providerType)
        ProviderInformationType( fiscalYearEnd == null )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FiscalYearEnd",
            "00001",
            "Fiscal Year End is required."
        );

end

rule 'Fiscal Year End Is Required For Nursing Facility'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderInformationType( fiscalYearEnd == null, providerType == ProviderType.NURSING_FACILITY.value())
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FiscalYearEnd",
            "00001",
            "Fiscal Year End is required."
        );

end

rule 'Fiscal Year End Is Required For PWDD Intermediate Care Facility'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderInformationType( fiscalYearEnd == null, providerType == ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value())
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FiscalYearEnd",
            "00001",
            "Fiscal Year End is required."
        );

end

rule 'Fiscal Year End Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice == "Y" )
        PracticeInformationType(fiscalYearEnd == null || fiscalYearEnd matches "^[\\s]*$") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/FiscalYearEnd",
            "00001",
            "Fiscal year end is required."
        );

end

rule 'Fiscal Year End Must Be In A Valid Format'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        PracticeInformationType(fiscalYearEnd != null, fiscalYearEnd not matches "^[\\d]{2}/[\\d]{2}$") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/FiscalYearEnd",
            "00001",
            "Fiscal year end must be in the pattern MM/DD."
        );

end

rule 'Fiscal Year End Must Be In The Patter MM,DD'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "EducationPlan", providerType == $provider.providerType)
        ProviderInformationType( fiscalYearEnd != null, fiscalYearEnd not matches "^[\\d]{2}/[\\d]{2}$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FiscalYearEnd",
            "00001",
            "Fiscal year end must be in the pattern MM/DD."
        );

end

rule 'Fiscal Year End Should Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice != "Y" )
        PracticeInformationType(fiscalYearEnd != null, fiscalYearEnd != "") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/FiscalYearEnd",
            "00001",
            "Fiscal year end must be left empty if not in private practice."
        );

end

rule 'For Corporation, LLC, Limit The Beneficial Owner Types To The Following'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType(entityType == EntityType.CORPORATION_LLC.value(), $ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(beneficialOwnerType != null, beneficialOwnerType not matches "^[\\s]*$", 
            beneficialOwnerType not in ("Subcontractor", "Managing Employee", "Owner - 5% or more of Ownership Interest", "Other")
        ) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/BeneficialOwnerType",
            "00001",
            "Beneficial owner type specified is not allowed for corporations, LLC."
        );

end

rule 'For Entity Owners, Beneficial Owner Type Must Be One Of the Following Values'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "N", beneficialOwnerType != null, beneficialOwnerType not matches "^[\\s]*$", 
            beneficialOwnerType not in ("Subcontractor", "Owner - 5% or more of Ownership Interest", "Other")
        ) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/BeneficialOwnerType",
            "00001",
            "Beneficial owner type specified is not allowed for entity owners."
        );

end

rule 'For Hospital Based, Limit The Beneficial Owner Types To The Following'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType(entityType == EntityType.HOSPITAL_BASED.value(), $ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(beneficialOwnerType != null, beneficialOwnerType not matches "^[\\s]*$", 
            beneficialOwnerType not in ("Subcontractor", "Managing Employee", "Owner - 5% or more of Ownership Interest", "Board Member or Officer", "Other")
        ) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/BeneficialOwnerType",
            "00001",
            "Beneficial owner type specified is not allowed for Hospital based entities."
        );

end

rule 'For Non-Profit Organizations, Limit The Beneficial Owner Types To The Following'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType(entityType == EntityType.NON_PROFIT.value(), $ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "Y", beneficialOwnerType != null, beneficialOwnerType not matches "^[\\s]*$", 
            beneficialOwnerType not in ("Subcontractor", "Managing Employee", "Board Member or Officer", "Other")
        ) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/BeneficialOwnerType",
            "00001",
            "Beneficial owner type specified is not allowed for Non-Profit Organizations."
        );

end

rule 'For Partnership, Limit The Beneficial Owner Types To The Following'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType(entityType == EntityType.PARTNERSHIP.value(), $ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(beneficialOwnerType != null, beneficialOwnerType not matches "^[\\s]*$", 
            beneficialOwnerType not in ("Subcontractor", "Managing Employee", "Owner - 5% or more of Ownership Interest", "Other")
        ) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/BeneficialOwnerType",
            "00001",
            "Beneficial owner type specified is not allowed for partnerships."
        );

end

rule 'For Person Owners, Beneficial Owner Type Must Be One Of the Following Values'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(personInd == "Y", beneficialOwnerType != null, beneficialOwnerType not matches "^[\\s]*$", 
            beneficialOwnerType not in ("Managing Director", "Program Manager", "Subcontractor", "Managing Employee", "Owner - 5% or more of Ownership Interest", "Board Member or Officer", "Other")
        ) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/BeneficialOwnerType",
            "00001",
            "Beneficial owner type specified is not allowed for person owners."
        );

end

rule 'For Public, Limit The Beneficial Owner Types To The Following'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType(entityType == EntityType.PUBLIC.value(), $ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(beneficialOwnerType != null, beneficialOwnerType not matches "^[\\s]*$", 
            beneficialOwnerType not in ("Subcontractor", "Managing Director", "Program Manager")
        ) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/BeneficialOwnerType",
            "00001",
            "Beneficial owner type specified is not allowed for public entities."
        );

end

rule 'For Sole Proprietorship, Limit The Beneficial Owner Types To The Following'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType(entityType == EntityType.SOLE_PROPRIETORSHIP.value(), $ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(beneficialOwnerType != null, beneficialOwnerType not matches "^[\\s]*$", 
            beneficialOwnerType not in ("Subcontractor", "Managing Employee", "Owner - 5% or more of Ownership Interest", "Other")
        ) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/BeneficialOwnerType",
            "00001",
            "Beneficial owner type specified is not allowed for Sole Proprietorship."
        );

end

rule 'For State Owned, Limit The Beneficial Owner Types To The Following'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType(entityType == EntityType.PARTNERSHIP.value(), $ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(beneficialOwnerType != null, beneficialOwnerType not matches "^[\\s]*$", 
            beneficialOwnerType not in ("Subcontractor", "Managing Employee")
        ) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/BeneficialOwnerType",
            "00001",
            "Beneficial owner type specified is not allowed for state owned entities."
        );

end

rule 'Group Affiliation Address Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.MAILING_INFORMATION.value())
        $provider: ProviderInformationType( )
        GroupAffiliationsType($locations :groupInformation) from $provider.groupAffiliations
        $location: PracticeLocationType(address == null) from $locations
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        $report.addError(
            "/ProviderInformation/GroupAffiliations/GroupInformation[" + index + "]/Address",
            "00001",
            "Group affiliation address is required."
        );

end

rule 'Group Affiliation Address Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.MAILING_INFORMATION.value())
        $provider: ProviderInformationType( )
        GroupAffiliationsType($locations :groupInformation) from $provider.groupAffiliations
        $location: PracticeLocationType() from $locations
        $address: AddressType() from $location.address
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        insertLogical(new AddressEntry(
            "Group affiliation address",
            "/ProviderInformation/GroupAffiliations/GroupInformation[" + index + "]/Address",
            $address
        ));

end

rule 'Group Affiliation Group Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.MAILING_INFORMATION.value())
        $provider: ProviderInformationType( )
        GroupAffiliationsType($locations :groupInformation) from $provider.groupAffiliations
        $location: PracticeLocationType(groupName == null || groupName matches "^[\\s]*$") from $locations
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        $report.addError(
            "/ProviderInformation/GroupAffiliations/GroupInformation[" + index + "]/GroupName",
            "00001",
            "Group affiliation group name is required."
        );

end

rule 'Group Affiliation Group Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.MAILING_INFORMATION.value())
        $provider: ProviderInformationType( )
        GroupAffiliationsType($locations :groupInformation) from $provider.groupAffiliations
        $location: PracticeLocationType(groupName != null, groupName not matches "^.{0,100}$") from $locations
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        $report.addError(
            "/ProviderInformation/GroupAffiliations/GroupInformation[" + index + "]/GroupName",
            "00001",
            "Group affiliation group name length cannot exceed 100 characters."
        );

end

rule 'Group Affiliation Group NPI Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.MAILING_INFORMATION.value())
        $provider: ProviderInformationType( )
        GroupAffiliationsType($locations :groupInformation) from $provider.groupAffiliations
        $location: PracticeLocationType(groupNPI == null || groupNPI matches "^[\\s]*$") from $locations
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        $report.addError(
            "/ProviderInformation/GroupAffiliations/GroupInformation[" + index + "]/GroupNPI",
            "00001",
            "Group affiliation group NPI is required."
        );

end

rule 'Group Affiliation Group NPI Maximum Length Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.MAILING_INFORMATION.value())
        $provider: ProviderInformationType( )
        GroupAffiliationsType($locations :groupInformation) from $provider.groupAffiliations
        $location: PracticeLocationType(groupNPI != null, groupNPI not matches "^.{0,100}$") from $locations
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        $report.addError(
            "/ProviderInformation/GroupAffiliations/GroupInformation[" + index + "]/GroupNPI",
            "00001",
            "Group affiliation group NPI length cannot exceed 100 characters."
        );

end

rule 'Group Affiliation Group NPI Validity Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.MAILING_INFORMATION.value())
        $provider: ProviderInformationType( )
        GroupAffiliationsType($locations :groupInformation) from $provider.groupAffiliations
        $location: PracticeLocationType($npi: groupNPI, groupNPI != null, groupNPI not matches "^[\\s]*$") from $locations
        $report: ErrorReporter() 
    then
        int index = $locations.indexOf($location);
        insertLogical(new NPIEntry(
            "Group affiliation group NPI",
            "/ProviderInformation/GroupAffiliations/GroupInformation[" + index + "]/GroupNPI",
            $npi
        ));
end

rule 'HCFA Medicare Certification Is Required For Home Health Agency'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.HOME_HEALTH_AGENCY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.HCFA_MEDICARE_CERTIFICATION.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "HCFA Medicare Certification is required for this provider."
        );

end

rule 'Head Start Agency Certification Is Required For Head Start'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.HEAD_START.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.HEAD_START_AGENCY_CERTIFICATION.value() ) from $licenseList 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Head Start Agency Certification is required for this provider."
        );

end

rule 'Highest Degree Award Date Is Required If Highest Degree Earned Is Entered'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        LookupEntry(type == "AskForHighestDegreeEarned", code == "Y")
        IndividualApplicantType(degreeAwardDate == null, highestDegreeEarned != null, highestDegreeEarned not matches "^[\\s]*$")
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/DegreeAwardDate",
            "00001",
            "Please indicate the date when the degree entered was awarded."
        );

end

rule 'Highest Degree Award Date Cannot Be A Future Date'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        LookupEntry(type == "AskForHighestDegreeEarned", code == "Y")
        IndividualApplicantType($degreeAwardDate: degreeAwardDate, degreeAwardDate != null)
        eval($degreeAwardDate.after(Calendar.getInstance()))
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/DegreeAwardDate",
            "00001",
            "Highest Degree Award Date cannot be a future date."
        );
end

rule 'Highest Degree Award Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        LookupEntry(type == "AskForHighestDegreeEarned", code == "Y")
        IndividualApplicantType($degreeAwardDate: degreeAwardDate, degreeAwardDate != null)
        eval($degreeAwardDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/DegreeAwardDate",
            "00001",
            "Highest Degree Award Date cannot be earlier than 01/01/1900."
        );
end

rule 'Highest Degree Earned Is Required For Certified Mental Health Rehab Professional'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_MENTAL_HEALTH_REHAB_PROF_CPRP.value())
        $report: ErrorReporter()
    then
        insertLogical(new LookupEntry(
            "AskForHighestDegreeEarned", 
            "Y", 
            "Highest degree earned is required for certified mental health rehab professional."
        ));

end

// added by cyberjag - https://github.com/nasa/coeci-cms-mpsp/issues/81
rule 'Highest Degree Earned Is Required For Licensed Independent Clinical Social Worker'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
        $report: ErrorReporter()
    then
        insertLogical(new LookupEntry(
            "AskForHighestDegreeEarned", 
            "Y", 
            "Highest degree earned is required for licensed independent clinical social worker."
        ));

end

rule 'Highest Degree Earned Is Required For Clinical Nurse Specialist With Specialty On Mental Health'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.CLINICAL_NURSE_SPECIALIST.value())
        SpecialtiesType(specialtyName contains SpecialtyNames.PSYCHIATRIC_MENTAL_HEALTH.value()) from $provider.specialties
        $report: ErrorReporter()
    then
        insertLogical(new LookupEntry(
            "AskForHighestDegreeEarned", 
            "Y", 
            "Highest degree earned is required for clinical nurse specialist with specialty on mental health."
        ));

end

rule 'Highest Degree Earned Is Required For Licensed Marriage and Family Therapist'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        ProviderInformationType(providerType == ProviderType.LICENSED_MARRIAGE_AND_FAMILY_THERAPIST.value())
    then
        insertLogical(new LookupEntry(
            "AskForHighestDegreeEarned", 
            "Y", 
            "Highest degree earned is required for licensed marriage and family therapist."
        ));

end

rule 'Highest Degree Earned Is Required For Licensed Professional Clinical Counselor'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        ProviderInformationType(providerType == ProviderType.LICENSED_PROFESSIONAL_CLINICAL_COUNSELOR.value())
    then
        insertLogical(new LookupEntry(
            "AskForHighestDegreeEarned", 
            "Y", 
            "Highest degree earned is required for licensed professional clinical counselor."
        ));

end

rule 'Highest Degree Earned Is Required For Licensed Psychologist'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
    then
        insertLogical(new LookupEntry(
            "AskForHighestDegreeEarned", 
            "Y", 
            "Highest degree earned is required for licensed psychologist."
        ));

end

rule 'Highest Degree Earned Is Required For Nurse Practitioner With Specialty On Mental Health'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.NURSE_PRACTITIONER.value())
        SpecialtiesType(specialtyName contains SpecialtyNames.PSYCHIATRIC_MENTAL_HEALTH.value()) from $provider.specialties
        $report: ErrorReporter()
    then
        insertLogical(new LookupEntry(
            "AskForHighestDegreeEarned", 
            "Y", 
            "Highest degree earned is required for nurse practitioner with specialty on mental health."
        ));

end

rule 'Highest Degree Earned Maximum Length Check'
dialect 'mvel'
    when
        IsIndividual($provider : provider)
        IndividualApplicantType(highestDegreeEarned != null, highestDegreeEarned not matches "^.{0,50}$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/HighestDegreeEarned",
            "00001",
            "Highest Degree Earned length cannot exceed 100 characters."
        );

end

rule 'Highest Degree Earned Should Only Be Asked For Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
salience -10
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        IndividualApplicantType(highestDegreeEarned != null, highestDegreeEarned != "")
        not LookupEntry(type == "AskForHighestDegreeEarned", code == "Y")
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/HighestDegreeEarned",
            "00001",
            "Highest degree earned should be left empty for this enrollment."
        );

end

rule 'Independent or Portable X-ray Certificationfrom CMS Is Required For X-Ray Services'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.X_RAY_SERVICES.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.INDEPENDENT_OR_PORTABLE_X_RAY_CERTIFICATION_FROM_CMS.value() )  from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Independent or portable X-ray certification from CMS is required for this provider."
        );

end

rule 'Individual Member Info Is Asked For Rehabilitation Agency If CORF Certificate Is Provided'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
salience 10
    when
        IsOrganization()
        $provider: ProviderInformationType(providerType == ProviderType.REHABILITATION_AGENCY.value())
        FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        LicenseType(licenseType == LicenseNames.CORF_CERTIFICATION.value()) from $licenseList
    then
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.REHABILITATION_AGENCY.value()));

end

rule 'Individual Member Info Is Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.BILLING_ENTITY_FOR_PHYSICAL_REHABILITATIVE_PROVIDERS.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.FAMILY_PLANNING_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.HEAD_START.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.HOME_HEALTH_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.INDIAN_HEALTH_SERVICE_FACILITY.value()));
        
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.PUBLIC_HEALTH_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.REGIONAL_TREATMENT_CENTER.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.FEDERALLY_QUALIFIED_HEALTH_CENTER.value()));
        
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.AMBULATORY_SURGICAL_CENTER.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST_GROUP.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.COMMUNITY_HEALTH_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.COUNTY_CONTRACTED_MENTAL_HEALTH_REHAB.value()));
        
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.DAY_TREATMENT.value()));
        
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.PHYSICIAN_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.DENTAL_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.DENTAL_HYGIENIST_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.BILLING_ENTITY_FOR_MENTAL_HEALTH.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.PODIATRY_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.CHIROPRACTIC_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.BILLING_ENTITY_FOR_PHYSICIAN_SERVICES.value()));
        // Fix for PESP-364
        insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.BIRTHING_CENTER.value()));
	// Fix for issue #60
	insertLogical(new ProviderTypeException("AskIndividualMemberInfo", ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value()));
end

rule 'Infer individual'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
salience 20
    when
        $provider: ProviderInformationType(applicantType == ApplicantType.INDIVIDUAL)
    then
        insertLogical(new IsIndividual($provider));

end

rule 'Infer IndividualApplicantType for individuals'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        IsIndividual($provider : provider)
        $applicantInformation: ApplicantInformationType( ) from $provider.applicantInformation
        $individual: IndividualApplicantType( ) from $applicantInformation.personalInformation
    then
        insertLogical($individual);

end

rule 'Infer Organization'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
salience 20
dialect 'mvel'
    when
        $provider: ProviderInformationType(applicantType == ApplicantType.ORGANIZATION)
    then
        insertLogical(new IsOrganization($provider));

end

rule 'Infer OrganizationApplicantType for organizations'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        IsOrganization($provider : provider)
        $applicantInformation: ApplicantInformationType( ) from $provider.applicantInformation
        $organization: OrganizationApplicantType( ) from $applicantInformation.organizationInformation
    then
        insertLogical($organization);

end

rule 'Issuing Board Is Required For Specialty Certification'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(issuingBoard == null || issuingBoard matches "^[\\s]*$", specialtyType != null, specialtyType not matches "^[\\s]*$") from $licenses
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/IssuingBoard",
            "00001",
            "Issuing Board is required for specialty certification."
        );

end

rule 'Issuing State Is Required If There Is No Exeption Defined For License'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "L", $licenseType : licenseType, issuingState == null || issuingState matches "^[\\s]*$") from $licenses
        not CertificateException( type == "IssuingState", licenseType == $licenseType)
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/IssuingState",
            "00001",
            "Issuing State is required."
        );

end

rule 'Issuing State Is Required If There Is No Exeption Defined For Tribal License'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "T", $specialtyType : specialtyType, issuingState == null || issuingState matches "^[\\s]*$") from $licenses
        not CertificateException( type == "IssuingState", specialtyType == $specialtyType)
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/IssuingState",
            "00001",
            "Issuing State is required."
        );

end


rule 'Last Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        IsIndividual($provider : provider)
        IndividualApplicantType(lastName != null, lastName not matches "^.{0,50}$") 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/LastName",
            "00001",
            "Last Name length cannot exceed 50 characters."
        );

end

rule 'Leave Agency Information Empty If Not PCA'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_INFORMATION.value())
        ProviderInformationType(agencyInformation != null, providerType != ProviderType.PERSONAL_CARE_ASSISTANT.value())
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/AgencyInformation",
            "00001",
            "Agency Information must be left empty for this provider type."
        );

end

rule 'Legal Name Is Required For Organizations'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider, provider.providerType not in (
                ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value(), 
                ProviderType.NURSING_FACILITY.value(),
                ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value()
            )
        )
        OrganizationApplicantType( legalName == null || legalName matches "^[\\s]*$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/LegalName",
            "00001",
            "Legal Name is required."
        );

end

rule 'Legal Name Maximum Length Check'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
dialect 'mvel'
    when
        IsOrganization($provider: provider, provider.providerType not in (
                ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value(), 
                ProviderType.NURSING_FACILITY.value(),
                ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value()
            )
        )
        OrganizationApplicantType( legalName != null, legalName not matches "^.{0,35}$" )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/LegalName",
            "00001",
            "Legal Name length cannot exceed 35 characters."
        );

end

rule 'License Copy Attachment Id Must Reference A Valid Attachment I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(attachmentObjectId != null) from $licenses
        not AttachedDocumentsType(  ) from $provider.attachedDocuments
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/AttachmentObjectId",
            "00001",
            "License Copy must be provided as an attachment."
        );

end

rule 'License Copy Attachment Id Must Reference A Valid Attachment II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType( )
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(attachmentObjectId != null) from $licenses
        $attachedDocuments: AttachedDocumentsType(  ) from $provider.attachedDocuments
        not DocumentType( objectId == $license.attachmentObjectId ) from $attachedDocuments.attachment
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/AttachmentObjectId",
            "00001",
            "License Copy must be provided as an attachment."
        );

end

rule 'License Copy Is Required If There Is No Exeption Defined For License'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "L", $licenseType : licenseType, attachmentObjectId == null || attachmentObjectId matches "^[\\s]*$") from $licenses
        not CertificateException( type == "AttachmentObjectId", licenseType  == $licenseType)
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/AttachmentObjectId",
            "00001",
            "License Copy is required."
        );

end

rule 'License Copy Is Required If There Is No Exeption Defined For Certificate Type'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "S", $specialtyType : specialtyType, attachmentObjectId == null || attachmentObjectId matches "^[\\s]*$") from $licenses
        not CertificateException( type == "AttachmentObjectId", specialtyType == $specialtyType )
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/AttachmentObjectId",
            "00001",
            "License Copy is required."
        );

end

rule 'License Issuing State Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(issuingState != null, issuingState not matches "^.{0,20}$") from $licenses
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/IssuingState",
            "00001",
            "Issuing State length cannot exceed 20 characters."
        );

end

rule 'License Number Is Required If There Is No Exeption Defined For License Type'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "L", $licenseType : licenseType, licenseNumber == null || licenseNumber matches "^[\\s]*$") from $licenses
        not CertificateException( type == "LicenseNumber", licenseType != null, licenseType == $licenseType)
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/LicenseNumber",
            "00001",
            "License Number is required."
        );

end

rule 'License Number Is Required If There Is No Exeption Defined For Certificate Type'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "S" || objectType == "T", $specialtyType : specialtyType, licenseNumber == null || licenseNumber matches "^[\\s]*$") from $licenses
        not CertificateException( type == "LicenseNumber", specialtyType == $specialtyType)
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/LicenseNumber",
            "00001",
            "License Number is required."
        );
end


rule 'License Number Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(licenseNumber != null, licenseNumber not matches "^.{0,100}$") from $licenses
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/LicenseNumber",
            "00001",
            "License Number length cannot exceed 100 characters."
        );

end

rule 'License Original Issue Date Cannot Be A Future Date'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType($originalIssueDate : originalIssueDate, originalIssueDate != null) from $licenses
        eval($originalIssueDate.after(Calendar.getInstance()))
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/OriginalIssueDate",
            "00001",
            "Original Issue Date cannot be a future date."
        );

end

rule 'License Original Issue Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType($originalIssueDate : originalIssueDate, originalIssueDate != null) from $licenses
        eval($originalIssueDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/OriginalIssueDate",
            "00001",
            "Original Issue Date cannot be earlier than 01/01/1900."
        );

end

rule 'License Renewal Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType($renewalDate : renewalDate, renewalDate != null) from $licenses
        eval($renewalDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/RenewalDate",
            "00001",
            "Renewal End Date cannot be earlier than 01/01/1900."
        );
end


rule 'License Original Issue Date Is Required If There Is No Exeption Defined For License'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "L", $licenseType : licenseType, originalIssueDate == null) from $licenses
        not CertificateException( type == "OriginalIssueDate", licenseType  == $licenseType)
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/OriginalIssueDate",
            "00001",
            "Original Issue Date is required."
        );

end

rule 'License Original Issue Date Is Required If There Is No Exeption Defined For Certificate Type'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "S" || objectType == "T", $specialtyType : specialtyType, originalIssueDate == null) from $licenses
        not CertificateException( type == "OriginalIssueDate", specialtyType == $specialtyType )
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/OriginalIssueDate",
            "00001",
            "Original Issue Date is required."
        );

end

rule 'License Renewal Date Is Required If There Is No Exeption Defined For License'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "L", $licenseType : licenseType, renewalDate == null) from $licenses
        not CertificateException( type == "RenewalEndDate", licenseType  == $licenseType )
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/RenewalDate",
            "00001",
            "Renewal End Date is required."
        );

end

rule 'License Renewal Date Is Required If There Is No Exeption Defined For Certificate Type'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "S" || objectType == "T", $specialtyType : specialtyType, renewalDate == null) from $licenses
        not CertificateException( type == "RenewalEndDate", specialtyType == $specialtyType )
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/RenewalDate",
            "00001",
            "Renewal End Date is required."
        );

end


rule 'License Specialty Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(specialtyType != null, specialtyType not matches "^.{0,100}$") from $licenses
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/SpecialtyType",
            "00001",
            "Specialty Type length cannot exceed 100 characters."
        );

end

rule 'License Specialty Should Be Left Empty For Provider Types That do not allow Specialty Certificates'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        not LookupEntry(value == $providerType, type == "SpecialtyTypeBehavior")
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "S", specialtyType != null, specialtyType != "") from $licenses
        $report: ErrorReporter() 
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/SpecialtyType",
            "00001",
            "Specialty Type is not allowed for this request."
        );

end

rule 'License Type Is Required For Provider Types That do not allow Specialty Certificates'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        not LookupEntry(value == $providerType, type == "SpecialtyTypeBehavior")
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "L", licenseType == null || licenseType matches "^[\\s]*$") from $licenses
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/LicenseType",
            "00001",
            "License Type is required."
        );

end

rule 'License Type Is Required If Defined Specialty Certificate Behavior Is AND'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        LookupEntry(value == $providerType, type == "SpecialtyTypeBehavior", code=="AND")
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(objectType == "L", licenseType == null || licenseType matches "^[\\s]*$") from $licenses
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/LicenseType",
            "00001",
            "License Type is required."
        );

end

rule 'License Type Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(licenseType != null, licenseType not matches "^.{0,100}$") from $licenses
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/LicenseType",
            "00001",
            "License Type length cannot exceed 100 characters."
        );

end

rule 'Limit Additional Categories Requested To Defined Provider Types'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        LicenseInformationType($categories: additionalServiceCategoryRequest) from $provider.licenseInformation
        $category: String() from $categories
        not AdditionalCategory( providerType == $providerType, category == $category )
        $report: ErrorReporter()
    then
        int index = $categories.indexOf($category);
        $report.addError(
            "/ProviderInformation/LicenseInformation/AdditionalServiceCategoryRequest["+ index+ "]",
            "00001",
            "Dual license combination with the specified category is currently not supported."
        );

end

rule 'Limit Issuing Boards To The Defined Options For the Provider'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType()
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType($issuingBoard : issuingBoard, issuingBoard != null, issuingBoard not matches "^[\\s]*$") from $licenses
        not LookupEntry(type == "IssuingBoardOption", code == $provider.providerType, value == $issuingBoard)
        $report: ErrorReporter()
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/IssuingBoard",
            "00001",
            "Issuing Board specified is not allowed for this provider type."
        );
end

rule 'Maximum of 2 Alternate Mailing Addresses are allowed'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.1
 * @since Provider Enrollment Drools Front End Validation Part 3
 * v1.1 - should be applied on all cases
 */
    when
        $provider: ProviderInformationType( )
        AlternateAddressesType( address.size() > 2 ) from $provider.alternateAddresses
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AlternateAddresses",
            "00001",
            "A maximum of 2 alternate addresses are allowed."
        );

end

rule 'Medicare Approval Letter Is Required For Rehabilitation Agencies'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.REHABILITATION_AGENCY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.MEDICARE_APPROVAL_LETTER.value() )  from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Medicare approval letter is required for this provider."
        );

end

rule 'Medicare Approval Letter Is Required For Rural Health Clinics'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.RURAL_HEALTH_CLINIC.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.MEDICARE_APPROVAL_LETTER.value() )  from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Medicare approval letter is required for this provider."
        );

end

rule 'Medicare Certification For Home Health Aide And Skilled Nursing Services Is Required For PHN Org'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.PUBLIC_HEALTH_NURSING_ORGANIZATION.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.MEDICARE_CERTIFICATION_FOR_HOME_HEALTH_AIDE_AND_SKILLED_NURSING_SERVICES.value() )  from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Medicare certification for home health aide and skilled nursing services is required for this provider."
        );

end

rule 'Medicare Certification Is Required For Ambulatory Surgical Center'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.AMBULATORY_SURGICAL_CENTER.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.MEDICARE_CERTIFICATION.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Medicare Certification is required for this provider."
        );

end

rule 'Member Date Of Birth Cannot Be A Future Date'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType($dateOfBirth: dateOfBirth, dateOfBirth != null) from $memberList
        eval($dateOfBirth.after(java.util.Calendar.getInstance())) 
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/DateOfBirth",
            "00001",
            "Member date of birth cannot be a future date."
        );

end

rule 'Member Date Of Birth Cannot Be before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType($dateOfBirth: dateOfBirth, dateOfBirth != null) from $memberList
        eval($dateOfBirth.before(getEarliestAcceptableDate())) 
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/DateOfBirth",
            "00001",
            "Member date of birth cannot be earlier than 01/01/1900."
        );

end


rule 'Member Date Of Birth Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType(dateOfBirth  == null) from $memberList
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/DateOfBirth",
            "00001",
            "Member date of birth is required."
        );

end

rule 'Member Info Should Be Left Empty'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider, provider.providerType not in (
                ProviderType.PHARMACY.value()
            ))
        not ProviderTypeException(type == "AskIndividualMemberInfo", providerType == $provider.providerType)
        $memberInformation: MemberInformationType( ) from $provider.memberInformation
        GroupMemberType(  ) from $memberInformation.groupMember
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MemberInformation",
            "00001",
            "Individual member information should be left empty for this provider."
        );

end

rule 'Member Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType(fullName == null || fullName matches "^[\\s]*$") from $memberList
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/FullName",
            "00001",
            "Member Name is required."
        );

end

rule 'Member Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType(fullName != null, fullName not matches "^.{0,100}$") from $memberList
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/FullName",
            "00001",
            "Member Name length cannot exceed 100 characters."
        );

end

rule 'Member NPI Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType(NPI == null || NPI matches "^[\\s]*$") from $memberList
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/NPI",
            "00001",
            "Member NPI is required."
        );

end

rule 'Member NPI Maximum Length Check'
dialect 'mvel'
    when
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType(NPI != null, NPI not matches "^.{0,10}$") from $memberList
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/NPI",
            "00001",
            "Member NPI length cannot exceed 10 characters."
        );
end

rule 'Member NPI Validity Check except for PCA'
dialect 'mvel'
    when
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        not GroupMemberType(providerType == ProviderType.PERSONAL_CARE_ASSISTANT.value()) from $memberList
        $member: GroupMemberType($npi: NPI, NPI != null, NPI not matches "^[\\s]*$") from $memberList
    then
        int index = $memberList.indexOf($member);
        insertLogical(new NPIEntry(
            "Member NPI",
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/NPI",
            $npi
        ));
end


rule 'Member Provider Type Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null) from $provider.memberInformation
        $member: GroupMemberType($providerType: providerType, providerType != null, providerType not matches "^[\\s]*$") from $memberList
        not LookupEntry(type == "ProviderType", value == $providerType)
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/ProviderType",
            "00001",
            "Specified member provider type is not recognized."
        );

end

rule 'Member Provider Type Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType(providerType == null || providerType matches "^[\\s]*$") from $memberList
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/ProviderType",
            "00001",
            "Member provider type is required."
        );

end

rule 'Member SSN Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType(socialSecurityNumber == null || socialSecurityNumber matches "^[\\s]*$") from $memberList
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/SocialSecurityNumber",
            "00001",
            "Member SSN is required."
        );

end

rule 'Member SSN Maximum Length Check'
dialect 'mvel'
    when
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType(socialSecurityNumber != null, socialSecurityNumber not matches "^[\\s]*$", socialSecurityNumber not matches "\\d{9}") from $memberList
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/SocialSecurityNumber",
            "00001",
            "Member SSN length must have 9 digits."
        );

end

rule 'Member Start Date Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType(startDate == null) from $memberList
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/StartDate",
            "00001",
            "Member start date is required."
        );

end

rule 'Member Start Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType($startDate : startDate, startDate != null) from $memberList
        eval($startDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/StartDate",
            "00001",
            "Member start date cannot be before 01/01/1900."
        );

end


rule 'Middle Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        IsIndividual($provider : provider)
        IndividualApplicantType(middleName != null, middleName not matches "^.{0,50}$") 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/MiddleName",
            "00001",
            "Middle Name length cannot exceed 50 characters."
        );

end

rule 'Minimum of 2 licensed and enrolled CRNAs working at the clinic Is Required For CRNA group'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST_GROUP.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        Number(intValue < 2) from accumulate( 
            i : GroupMemberType( enrolled == "Y", providerType == ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST.value() ) from $memberList,
            count( i ) )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MemberInformation",
            "00001",
            "A minimum of 2 licensed and enrolled CRNAs must be entered."
        );

end

rule 'Name Of Person Accomplishing Form Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "NonPracticeOrganization", providerType == $provider.providerType)
        EnrollmentType(personWhoAccomplishedForm == null || personWhoAccomplishedForm matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/PersonWhoAccomplishedForm",
            "00001",
            "Name Of Person Accomplishing Form is required."
        );

end

rule 'Name Of Person Accomplishing Form Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        EnrollmentType(personWhoAccomplishedForm != null, personWhoAccomplishedForm not matches "^.{0,100}$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/PersonWhoAccomplishedForm",
            "00001",
            "Name Of Person Accomplishing Form length cannot exceed 100 characters."
        );

end

rule 'Notification For Authorization Request And Service Agreements Must Reference An Existing Address'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.MAILING_INFORMATION.value())
        $provider: ProviderInformationType( )
        AlternateAddressesType($alternateAddressSize : address.size()) from $provider.alternateAddresses
        NotificationSettingsType( authorizationRequestAndServiceAgreements < 0 || authorizationRequestAndServiceAgreements > ($alternateAddressSize + 1)) from $provider.notificationSettings
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/NotificationSettings/AuthorizationRequestAndServiceAgreements",
            "00001",
            "Notification for authorization request and service agreements must reference an existing address."
        );

end

rule 'Notification For Credentials Enrollment Status Must Reference An Existing Address'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.MAILING_INFORMATION.value())
        $provider: ProviderInformationType( )
        AlternateAddressesType($alternateAddressSize : address.size()) from $provider.alternateAddresses
        NotificationSettingsType( credentialsEnrollmentStatus < 0 || credentialsEnrollmentStatus > ($alternateAddressSize + 1)) from $provider.notificationSettings
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/NotificationSettings/CredentialsEnrollmentStatus",
            "00001",
            "Notification for credentials enrollment status must reference an existing address."
        );

end

rule 'Notification For Provider Correspondence Must Reference An Existing Address'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.MAILING_INFORMATION.value())
        $provider: ProviderInformationType( )
        AlternateAddressesType($alternateAddressSize : address.size()) from $provider.alternateAddresses
        NotificationSettingsType( providerCorrespondence  < 0 || providerCorrespondence > ($alternateAddressSize + 1)) from $provider.notificationSettings
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/NotificationSettings/ProviderCorrespondence",
            "00001",
            "Notification for provider correspondence must reference an existing address."
        );

end

rule 'Notification For Reimbursement Check Must Reference An Existing Address'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.MAILING_INFORMATION.value())
        $provider: ProviderInformationType( )
        AlternateAddressesType($alternateAddressSize : address.size()) from $provider.alternateAddresses
        NotificationSettingsType( reimbursementCheck < 0 || reimbursementCheck > ($alternateAddressSize + 1)) from $provider.notificationSettings
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/NotificationSettings/ReimbursementCheck",
            "00001",
            "Notification for reimbursement check must reference an existing address."
        );

end

rule 'Notification For Remittance Advice Must Reference An Existing Address'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.MAILING_INFORMATION.value())
        $provider: ProviderInformationType( )
        AlternateAddressesType($alternateAddressSize : address.size()) from $provider.alternateAddresses
        NotificationSettingsType( remittanceAdvice < 0 || remittanceAdvice > ($alternateAddressSize + 1)) from $provider.notificationSettings
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/NotificationSettings/RemittanceAdvice",
            "00001",
            "Notification for remittance advice must reference an existing address."
        );

end

rule 'NPI Is Required for Unless An Exception Is Defined'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value() || value == UISection.ORGANIZATION_INFORMATION.value())
        $provider: ProviderInformationType($npi : NPI, $npi == null || $npi matches "^[\\s]*$" )
        not ProviderTypeException(type == "NPIExemption", providerType == $provider.providerType )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/NPI",
            "00001",
            "NPI is required."
        );

end

rule 'NPI Maximum Length Check'
dialect 'mvel'
    when
        ProviderInformationType(NPI != null, NPI not matches "^.{0,10}$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/NPI",
            "00001",
            "NPI length cannot exceed 10 characters."
        );

end

rule 'Verify Check Digit For NPI'
    when
        $npi: NPIEntry(validated == "N", valid == "N")
        $report: ErrorReporter() 
    then
        modify($npi) {
            setValidated("Y")
        }
        $report.addError(
            $npi.getPath(),
            "00001",
            "Specified " + $npi.getName() + " is not valid."
        );
end

rule 'NPI Validity Check'
    when
        $provider: ProviderInformationType($npi: NPI, NPI != null, NPI not matches "^[\\s]*$")
        not ProviderTypeException(type == "CanBeUMPI", providerType == $provider.providerType )
    then
        insertLogical(new NPIEntry(
            "NPI",
            "/ProviderInformation/NPI",
            $npi
        ));
end

rule 'Number Of Beds Effective Date Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskFacilityCapacity", providerType == $provider.providerType)
        FacilityCredentialsType(numberOfBedsEffectiveDate == null, numberOfBeds != null)  from $provider.facilityCredentials
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/NumberOfBedsEffectiveDate",
            "00001",
            "Please specify the effective date of the number of beds entered."
        );
end

rule 'Number Of Beds Effective Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskFacilityCapacity", providerType == $provider.providerType)
        FacilityCredentialsType($numberOfBedsEffectiveDate: numberOfBedsEffectiveDate, numberOfBedsEffectiveDate != null)  from $provider.facilityCredentials
        eval($numberOfBedsEffectiveDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/NumberOfBedsEffectiveDate",
            "00001",
            "Number of beds effective date cannot be earlier than 01/01/1900."
        );
end


rule 'Number Of Beds Effective Date Should Be Left Empty'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        FacilityCredentialsType(numberOfBedsEffectiveDate != null, numberOfBeds == null)  from $provider.facilityCredentials
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/NumberOfBedsEffectiveDate",
            "00001",
            "Number of beds effective date should be left empty if number of beds is not specified."
        );

end

rule 'Number Of Beds Is Required'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskFacilityCapacity", providerType == $provider.providerType)
        FacilityCredentialsType(numberOfBeds == null ) from $provider.facilityCredentials
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/NumberOfBeds",
            "00001",
            "Number of beds is required."
        );

end

rule 'Number Of Beds Should Be Left Empty'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        not ProviderTypeException(type == "AskFacilityCapacity", providerType == $provider.providerType)
        FacilityCredentialsType(numberOfBeds != null ) from $provider.facilityCredentials
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/NumberOfBeds",
            "00001",
            "Number of beds should be left empty."
        );

end

rule 'Off-site Approval Letter From Medicare Is Required For Independent Diagnostic Testing Facility'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.INDEPENDENT_DIAGNOSTIC_TESTING_FACILITY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.OFF_SITE_APPROVAL_LETTER_FROM_MEDICARE.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Off-site Approval Letter From Medicare is required for this provider."
        );

end

rule 'Organization Address Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "NonPracticeOrganization", providerType == $provider.providerType)
        not ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        OrganizationApplicantType($contactInformation: contactInformation, contactInformation != null )
        not AddressType(  ) from $contactInformation.address
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/ContactInformation/Address",
            "00001",
            "Organization Address is required."
        );

end

rule 'Organization Address Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "NonPracticeOrganization", providerType == $provider.providerType)
        not ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        OrganizationApplicantType($contactInformation: contactInformation, contactInformation != null )
        $address: AddressType(  ) from $contactInformation.address
    then
        insertLogical(new AddressEntry(
            "Organization Address",
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/ContactInformation/Address",
            $address
        ));

end

rule 'Organization Contact Information Is Required'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization()
        OrganizationApplicantType( contactInformation  == null )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/ContactInformation",
            "00001",
            "Organization Contact Information is required."
        );

end

rule 'Organization County Is Required For Education Plans'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "EducationPlan", providerType == $provider.providerType)
        ProviderInformationType( county  == null || county matches "^[\\s]*$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/County",
            "00001",
            "County is required."
        );

end

rule 'Facility County Is Required For Nursing Facility'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderInformationType( county  == null || county matches "^[\\s]*$", providerType == ProviderType.NURSING_FACILITY.value())
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/County",
            "00001",
            "County is required."
        );
end

rule 'Facility County Is Required For PWDD Intermediate Care Facility'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderInformationType( county  == null || county matches "^[\\s]*$", providerType == ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value())
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/County",
            "00001",
            "County is required."
        );
end

rule 'Organization County Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderInformationType( county != null, county not matches "^.{0,100}$")
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/County",
            "00001",
            "County length cannot exceed 100 characters."
        );

end

rule 'Organization Disclosure Question 1 Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_DISCLOSURE.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskDisclosureInfo", providerType == $provider.providerType)
        ProviderInformationType(hasCriminalConviction == null || hasCriminalConviction matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/HasCriminalConviction",
            "00001",
            "Please indicate an answer to the owner criminal conviction history disclosure question."
        );

end

rule 'Organization Disclosure Question 1 Must Be Answered In Y,N'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_DISCLOSURE.value())
        IsOrganization()
        ProviderInformationType(hasCriminalConviction != null, hasCriminalConviction not matches "^[\\s]*$", hasCriminalConviction not matches "^[YN]$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/HasCriminalConviction",
            "00001",
            "Owner criminal conviction history disclosure question answer must be in Y/N."
        );

end

rule 'Organization Disclosure Question 2 Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_DISCLOSURE.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskDisclosureInfo", providerType == $provider.providerType)
        ProviderInformationType(hasCivilPenalty == null || hasCivilPenalty matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/HasCivilPenalty",
            "00001",
            "Please indicate an answer to the owner civil penalty history disclosure question."
        );

end

rule 'Organization Disclosure Question 2 Must Be Answered In Y,N'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_DISCLOSURE.value())
        IsOrganization()
        ProviderInformationType(hasCivilPenalty != null, hasCivilPenalty not matches "^[\\s]*$", hasCivilPenalty not matches "^[YN]$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/HasCivilPenalty",
            "00001",
            "Owner civil penalty history disclosure question answer must be in Y/N."
        );

end

rule 'Organization Disclosure Question 3 Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_DISCLOSURE.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskDisclosureInfo", providerType == $provider.providerType)
        ProviderInformationType(hasPreviousExclusion == null || hasPreviousExclusion matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/HasPreviousExclusion",
            "00001",
            "Please indicate an answer to the owner exclusion history disclosure question."
        );

end

rule 'Organization Disclosure Question 3 Must Be Answered In Y,N'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_DISCLOSURE.value())
        IsOrganization()
        ProviderInformationType(hasPreviousExclusion != null, hasPreviousExclusion not matches "^[\\s]*$", hasPreviousExclusion not matches "^[YN]$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/HasPreviousExclusion",
            "00001",
            "Owner exclusion history disclosure question answer must be in Y/N."
        );

end

rule 'Organization Disclosure Question 4 Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_DISCLOSURE.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskDisclosureInfo", providerType == $provider.providerType)
        ProviderInformationType(employeeHasCriminalConviction == null || employeeHasCriminalConviction matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/EmployeeHasCriminalConviction",
            "00001",
            "Please indicate an answer to the employee criminal conviction history disclosure question."
        );

end

rule 'Organization Disclosure Question 4 Must Be Answered In Y,N'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_DISCLOSURE.value())
        IsOrganization()
        ProviderInformationType(employeeHasCriminalConviction != null, employeeHasCriminalConviction not matches "^[\\s]*$", employeeHasCriminalConviction not matches "^[YN]$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/EmployeeHasCriminalConviction",
            "00001",
            "Employee criminal conviction history disclosure question answer must be in Y/N."
        );

end

rule 'Organization Disclosure Question 5 Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_DISCLOSURE.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskDisclosureInfo", providerType == $provider.providerType)
        ProviderInformationType(employeeHasCivilPenalty == null || employeeHasCivilPenalty matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/EmployeeHasCivilPenalty",
            "00001",
            "Please indicate an answer to the employee civil penalty history disclosure question."
        );

end

rule 'Organization Disclosure Question 5 Must Be Answered In Y,N'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_DISCLOSURE.value())
        IsOrganization()
        ProviderInformationType(employeeHasCivilPenalty != null, employeeHasCivilPenalty not matches "^[\\s]*$", employeeHasCivilPenalty not matches "^[YN]$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/EmployeeHasCivilPenalty",
            "00001",
            "Employee civil penalty history disclosure question answer must be in Y/N."
        );

end

rule 'Organization Disclosure Question 6 Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_DISCLOSURE.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskDisclosureInfo", providerType == $provider.providerType)
        ProviderInformationType(employeeHasPreviousExclusion == null || employeeHasPreviousExclusion matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/EmployeeHasPreviousExclusion",
            "00001",
            "Please indicate an answer to the employee exclusion history disclosure question."
        );

end

rule 'Organization Disclosure Question 6 Must Be Answered In Y,N'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_DISCLOSURE.value())
        IsOrganization()
        ProviderInformationType(employeeHasPreviousExclusion != null, employeeHasPreviousExclusion not matches "^[\\s]*$", employeeHasPreviousExclusion not matches "^[YN]$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/EmployeeHasPreviousExclusion",
            "00001",
            "Employee exclusion history disclosure question answer must be in Y/N."
        );

end

rule 'Organization Fax Number Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization()
        $organization: OrganizationApplicantType(contactInformation != null )
        ContactInformationType($faxNumber: faxNumber, faxNumber != null, faxNumber not matches "^[\\s]*$") from $organization.contactInformation
    then
        insertLogical(new PhoneNumberEntry(
            "Organization Fax Number", 
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/ContactInformation/FaxNumber",
            $faxNumber
        ));

end

rule 'Organization FEIN Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization()
        OrganizationApplicantType(FEIN == null || FEIN matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/FEIN",
            "00001",
            "Organization FEIN is required."
        );

end

rule 'Organization FEIN Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization()
        OrganizationApplicantType(FEIN != null, FEIN not matches "^\\d{2}-\\d{7}$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/FEIN",
            "00001",
            "Organization FEIN length cannot exceed 9 characters."
        );
end

rule 'Organization Fiscal Year End Must Be In The Format MM DD'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        ProviderInformationType(fiscalYearEnd != null, fiscalYearEnd not matches "^[\\d]{2}/[\\d]{2}$")
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FiscalYearEnd",
            "00001",
            "Fiscal year end must be in the format MM/DD."
        );

end

rule 'Organization Name Is Required For Organizations'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "NonPracticeOrganization", providerType == $provider.providerType)
        not ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        OrganizationApplicantType( name == null || name matches "^[\\s]*$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/Name",
            "00001",
            "Organization Name is required."
        );

end

rule 'Organization Name Maximum Length Check'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
dialect 'mvel'
    when
        IsOrganization($provider: provider)
        ProviderTypeException(type == "NonPracticeOrganization", providerType == $provider.providerType)
        not ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        OrganizationApplicantType( name != null, name not matches "^.{0,100}$" )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/Name",
            "00001",
            "Organization Name length cannot exceed 100 characters."
        );

end

rule 'Organization Phone Number Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization()
        $organization: OrganizationApplicantType(contactInformation != null )
        ContactInformationType(phoneNumber == null || phoneNumber matches "^[\\s]*$") from $organization.contactInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/ContactInformation/PhoneNumber",
            "00001",
            "Organization Phone Number is required."
        );

end

rule 'Organization Phone Number Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization()
        $organization: OrganizationApplicantType(contactInformation != null )
        ContactInformationType($phoneNumber: phoneNumber, phoneNumber != null, phoneNumber not matches "^[\\s]*$") from $organization.contactInformation
    then
        insertLogical(new PhoneNumberEntry(
            "Organization Phone Number", 
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/ContactInformation/PhoneNumber",
            $phoneNumber
        ));

end

rule 'Organization Practice Address Cannot Be A PO Box'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        not ProviderTypeException(type == "NonPracticeOrganization", providerType == $provider.providerType)
        OrganizationApplicantType($contactInformation: contactInformation, contactInformation != null )
        LookupEntry($value : value, type == "POBoxWordRegex")
        AddressType($addressLine2: addressLine2, addressLine2 != null) from $contactInformation.address
        eval($addressLine2.matches($value))
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/ContactInformation/Address",
            "00001",
            "Address cannot be a PO Box."
        );

end

rule 'Organization Practice Address Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        not ProviderTypeException(type == "NonPracticeOrganization", providerType == $provider.providerType)
        not ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        not ProviderTypeException(type == "EducationPlan", providerType == $provider.providerType)
        OrganizationApplicantType($contactInformation: contactInformation, contactInformation != null )
        not AddressType(  ) from $contactInformation.address
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/ContactInformation/Address",
            "00001",
            "Organization Practice Address is required."
        );

end

rule 'Organization Practice Address Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        not ProviderTypeException(type == "NonPracticeOrganization", providerType == $provider.providerType)
        not ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        OrganizationApplicantType($contactInformation: contactInformation, contactInformation != null )
        $address: AddressType(  ) from $contactInformation.address
    then
        insertLogical(new AddressEntry(
            "Organization Practice Address",
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/ContactInformation/Address",
            $address
        ));

end

rule 'Organization Provider Statement Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_PROVIDER_STATEMENT.value())
        IsOrganization($provider : provider)
        not ProviderStatementType() from $provider.providerStatement
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement",
            "00001",
            "Provider statement is required."
        );

end

rule 'Organization State Tax ID Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization()
        OrganizationApplicantType(stateTaxID != null, stateTaxID not matches "^.{0,7}$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/StateTaxID",
            "00001",
            "Organization State Tax Id length cannot exceed 7 characters."
        );

end

rule 'Organizational Provider Disclosure Is Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.BILLING_ENTITY_FOR_PHYSICAL_REHABILITATIVE_PROVIDERS.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.DURABLE_MEDICAL_EQUIPMENT.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.FAMILY_PLANNING_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.HEAD_START.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.HOME_HEALTH_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.INDEPENDENT_DIAGNOSTIC_TESTING_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.INDEPENDENT_LABORATORY.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.INDIAN_HEALTH_SERVICE_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.INTENSIVE_RESIDENTIAL_TREATMENT_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.OPTICAL_SUPPLIER.value()));
        
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.AMBULATORY_SURGICAL_CENTER.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST_GROUP.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.CHILD_AND_TEEN_CHECKUP_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.CHILDRENS_MENTAL_HEALTH_RESIDENTIAL_TREATMENT_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.COMMUNITY_HEALTH_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.COUNTY_CONTRACTED_MENTAL_HEALTH_REHAB.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.DAY_TRAINING_AND_HABILITATION_DAY_ACTIVITY_CENTER.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.DAY_TREATMENT.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.PHARMACY.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.PRIVATE_DUTY_NURSING_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.PUBLIC_HEALTH_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.PUBLIC_HEALTH_NURSING_ORGANIZATION.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.REGIONAL_TREATMENT_CENTER.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.REHABILITATION_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.RURAL_HEALTH_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.TARGETED_CASE_MANAGEMENT.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.WIC_PROGRAM.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.X_RAY_SERVICES.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.FEDERALLY_QUALIFIED_HEALTH_CENTER.value()));
        insertLogical(new ProviderTypeException("AskDisclosureInfo", ProviderType.INDIVIDUAL_EDUCATION_PLAN.value()));

end

rule 'Owned Property Address Is Required'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($rpList: realProperty) from $provider.ownershipInformation
        $rp: RealPropertyType(address == null) from $rpList
        $report: ErrorReporter() 
    then
        int index = $rpList.indexOf($rp);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/RealProperty[" + index + "]/Address",
            "00001",
            "Owned property address is required."
        );

end

rule 'Owned Property Address Must Be Valid'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($rpList: realProperty) from $provider.ownershipInformation
        $rp: RealPropertyType(address != null) from $rpList
        $address: AddressType(  ) from $rp.address
        $report: ErrorReporter() 
    then
        int index = $rpList.indexOf($rp);
        insertLogical(new AddressEntry(
            "Owned property address",
            "/ProviderInformation/OwnershipInformation/RealProperty[" + index + "]/Address",
            $address
        ));

end

rule 'Owned Property Name Is Required'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($rpList: realProperty) from $provider.ownershipInformation
        $rp: RealPropertyType(legalName == null || legalName matches "^[\\s]*$") from $rpList
        $report: ErrorReporter() 
    then
        int index = $rpList.indexOf($rp);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/RealProperty[" + index + "]/LegalName",
            "00001",
            "Owned property legal name is required."
        );

end

rule 'Owned Property Name Maximum Length Check'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($rpList: realProperty) from $provider.ownershipInformation
        $rp: RealPropertyType(legalName != null, legalName not matches "^[\\s]*$", legalName not matches "^.{0,100}$") from $rpList
        $report: ErrorReporter() 
    then
        int index = $rpList.indexOf($rp);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/RealProperty[" + index + "]/LegalName",
            "00001",
            "Owned property legal name length cannot exceed 100 characters."
        );

end

rule 'Ownership Information Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        not ProviderTypeException(type == "AskOwnershipInfo", providerType == $provider.providerType)
        OwnershipInformationType( ) from $provider.ownershipInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/OwnershipInformation",
            "00001",
            "Provider ownership information should be left empty for this provider."
        );

end

rule 'Ownership Information Is Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.BILLING_ENTITY_FOR_PHYSICAL_REHABILITATIVE_PROVIDERS.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.DURABLE_MEDICAL_EQUIPMENT.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.FAMILY_PLANNING_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.HEAD_START.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.HOME_HEALTH_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.INDEPENDENT_DIAGNOSTIC_TESTING_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.INDEPENDENT_LABORATORY.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.INDIAN_HEALTH_SERVICE_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.INTENSIVE_RESIDENTIAL_TREATMENT_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.OPTICAL_SUPPLIER.value()));
        
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.AMBULATORY_SURGICAL_CENTER.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST_GROUP.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.CHILD_AND_TEEN_CHECKUP_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.CHILDRENS_MENTAL_HEALTH_RESIDENTIAL_TREATMENT_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.COMMUNITY_HEALTH_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.COUNTY_CONTRACTED_MENTAL_HEALTH_REHAB.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.DAY_TRAINING_AND_HABILITATION_DAY_ACTIVITY_CENTER.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.DAY_TREATMENT.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.HOME_AND_COMMUNITY_BASED_SERVICES_WAIVERED_SERVICES.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.PHARMACY.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.PRIVATE_DUTY_NURSING_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.PUBLIC_HEALTH_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.PUBLIC_HEALTH_NURSING_ORGANIZATION.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.REGIONAL_TREATMENT_CENTER.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.REHABILITATION_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.RURAL_HEALTH_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.TARGETED_CASE_MANAGEMENT.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.WIC_PROGRAM.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.X_RAY_SERVICES.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.FEDERALLY_QUALIFIED_HEALTH_CENTER.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.INDIVIDUAL_EDUCATION_PLAN.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.NURSING_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.HOSPITAL.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.HOSPICE.value()));
        
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.RENAL_DIALYSIS_FACILITY.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.PHYSICIAN_CLINIC.value()));
        
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.DENTAL_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.DENTAL_HYGIENIST_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.BILLING_ENTITY_FOR_MENTAL_HEALTH.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.PODIATRY_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.CHIROPRACTIC_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.BIRTHING_CENTER.value()));
        insertLogical(new ProviderTypeException("AskOwnershipInfo", ProviderType.BILLING_ENTITY_FOR_PHYSICIAN_SERVICES.value()));
end

rule 'Ownership Interest Percent Is Required If Beneficial Owner Type Is Owner - 5% or more'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(beneficialOwnerType == "Owner - 5% or more of Ownership Interest", percentOwnership == null) from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/PercentOwnership",
            "00001",
            "Percent ownership is required."
        );

end

rule 'Ownership Type Is Required'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($rpList: realProperty) from $provider.ownershipInformation
        $rp: RealPropertyType(ownershipType == null || ownershipType matches "^[\\s]*$") from $rpList
        $report: ErrorReporter() 
    then
        int index = $rpList.indexOf($rp);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/RealProperty[" + index + "]/OwnershipType",
            "00001",
            "Owned property ownership type is required."
        );

end

rule 'Ownership Type Must Be One Of The Supported Values'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($rpList: realProperty) from $provider.ownershipInformation
        $rp: RealPropertyType(ownershipType != null, ownershipType not matches "^[\\s]*$", ownershipType not in ("Own", "Manage", "Lease")) from $rpList
        $report: ErrorReporter() 
    then
        int index = $rpList.indexOf($rp);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/RealProperty[" + index + "]/OwnershipType",
            "00001",
            "Owned property ownership type value is expected to be one of Own, Manage or Lease."
        );

end

rule 'Pay-To Contact Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null ) from $provider.providerSetupInformation
        $payTo: PayToProviderType(contactName == null || contactName matches "^[\\s]*$") from $payToList
        $report: ErrorReporter() 
    then
        int index = $payToList.indexOf($payTo);
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/ContactName",
            "00001",
            "Pay-To Provider contact name is required."
        );

end

rule 'Pay-To Contact Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null) from $provider.providerSetupInformation
        $payTo: PayToProviderType(contactName != null, contactName not matches "^.{0,100}$") from $payToList
        $report: ErrorReporter() 
    then
        int index = $payToList.indexOf($payTo);
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/ContactName",
            "00001",
            "Pay-To Provider contact name length cannot exceed 100 characters."
        );

end

rule 'Pay-To Effective Date Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null ) from $provider.providerSetupInformation
        $payTo: PayToProviderType(effectiveDate == null) from $payToList
        $report: ErrorReporter() 
    then
        int index = $payToList.indexOf($payTo);
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/EffectiveDate",
            "00001",
            "Pay-To Provider effective date is required."
        );

end

rule 'Pay-To Effective Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null ) from $provider.providerSetupInformation
        $payTo: PayToProviderType($effectiveDate : effectiveDate, effectiveDate != null) from $payToList
        eval($effectiveDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter() 
    then
        int index = $payToList.indexOf($payTo);
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/EffectiveDate",
            "00001",
            "Pay-To Provider effective date cannot be before 01/01/1900."
        );

end


rule 'Pay-To Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null ) from $provider.providerSetupInformation
        $payTo: PayToProviderType(name == null || name matches "^[\\s]*$") from $payToList
        $report: ErrorReporter() 
    then
        int index = $payToList.indexOf($payTo);
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/Name",
            "00001",
            "Pay-To Provider Name is required."
        );

end

rule 'Pay-To Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null) from $provider.providerSetupInformation
        $payTo: PayToProviderType(name != null, name not matches "^.{0,100}$") from $payToList
        $report: ErrorReporter() 
    then
        int index = $payToList.indexOf($payTo);
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/Name",
            "00001",
            "Pay-To Provider Name length cannot exceed 100 characters."
        );

end

rule 'Pay-To NPI Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null ) from $provider.providerSetupInformation
        $payTo: PayToProviderType(NPI == null || NPI matches "^[\\s]*$") from $payToList
        $report: ErrorReporter() 
    then
        int index = $payToList.indexOf($payTo);
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/NPI",
            "00001",
            "Pay-To Provider NPI is required."
        );

end

rule 'Pay-To NPI Maximum Length Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null) from $provider.providerSetupInformation
        $payTo: PayToProviderType(NPI != null, NPI not matches "^.{0,10}$") from $payToList
        $report: ErrorReporter() 
    then
        int index = $payToList.indexOf($payTo);
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/NPI",
            "00001",
            "Pay-To Provider NPI length cannot exceed 10 characters."
        );

end


rule 'Pay-To NPI Validity Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null) from $provider.providerSetupInformation
        $payTo: PayToProviderType($npi: NPI, NPI != null, NPI not matches "^[\\s]*$") from $payToList
        $report: ErrorReporter() 
    then
        int index = $payToList.indexOf($payTo);
        insertLogical(new NPIEntry(
            "Pay-To Provider NPI",
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/NPI",
            $npi
        ));
end

rule 'Pay-To Phone Number Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null ) from $provider.providerSetupInformation
        $payTo: PayToProviderType(phoneNumber == null || phoneNumber matches "^[\\s]*$") from $payToList
        $report: ErrorReporter() 
    then
        int index = $payToList.indexOf($payTo);
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/PhoneNumber",
            "00001",
            "Pay-To Provider phone number is required."
        );

end

rule 'Pay-To Phone Number Must Be In A Valid Format'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null ) from $provider.providerSetupInformation
        $payTo: PayToProviderType($phoneNumber: phoneNumber, phoneNumber != null, phoneNumber not matches "^[\\s]*$") from $payToList
    then
        int index = $payToList.indexOf($payTo);
        insertLogical(new PhoneNumberEntry(
            "Pay-To Provider phone number", 
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/PhoneNumber",
            $phoneNumber
        ));

end

rule 'Pay-To Providers Should Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        not ProviderTypeException(type == "AskProviderSetupInfo", providerType == $provider.providerType)
        $setupInformation: ProviderSetupInformationType( ) from $provider.providerSetupInformation
        PayToProviderType( ) from $setupInformation.payToProvider
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation",
            "00001",
            "Provider setup information should be left empty for this provider."
        );

end

rule 'Pay-To Type Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null ) from $provider.providerSetupInformation
        $payTo: PayToProviderType(type == null || type matches "^[\\s]*$") from $payToList
        $report: ErrorReporter() 
    then
        int index = $payToList.indexOf($payTo);
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/Type",
            "00001",
            "Pay-To Provider type is required."
        );

end

rule 'Pay-To Type Must Be One Of the Following Values'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_SETUP.value())
        IsOrganization($provider : provider)
        ProviderSetupInformationType($payToList : payToProvider, payToProvider != null ) from $provider.providerSetupInformation
        $payTo: PayToProviderType(type != null , type not matches "^[\\s]*$", type not in ("Claim", "ERA", "Both")) from $payToList
        $report: ErrorReporter() 
    then
        int index = $payToList.indexOf($payTo);
        $report.addError(
            "/ProviderInformation/ProviderSetupInformation/PayToProvider[" + index + "]/Type",
            "00001",
            "Pay-To Provider type must be one of Claim, ERA or Both."
        );

end

rule 'PCA Billing Person Date Of Birth cannot be in the future'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskPCABillingPersonDesignation", providerType == $provider.providerType)
        DesignatedContactInformationType($contactList : designatedContact) from $provider.designatedContactInformation
        $contact: DesignatedContactType($dateOfBirth: dateOfBirth, dateOfBirth != null, designationType == "PCA_BILLING") from $contactList
        eval($dateOfBirth.after(java.util.Calendar.getInstance())) 
        $report: ErrorReporter() 
    then
        int index = $contactList.indexOf($contact);
        $report.addError(
            "/ProviderInformation/DesignatedContactInformation/DesignatedContact[" + index + "]/DateOfBirth",
            "00001",
            "PCA Billing Person date of Birth cannot be a future date."
        );

end

rule 'PCA Billing Person Date Of Birth cannot be before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskPCABillingPersonDesignation", providerType == $provider.providerType)
        DesignatedContactInformationType($contactList : designatedContact) from $provider.designatedContactInformation
        $contact: DesignatedContactType($dateOfBirth: dateOfBirth, dateOfBirth != null, designationType == "PCA_BILLING") from $contactList
        eval($dateOfBirth.before(getEarliestAcceptableDate())) 
        $report: ErrorReporter() 
    then
        int index = $contactList.indexOf($contact);
        $report.addError(
            "/ProviderInformation/DesignatedContactInformation/DesignatedContact[" + index + "]/DateOfBirth",
            "00001",
            "PCA Billing Person date of Birth cannot be earlier than 01/01/1900."
        );

end

rule 'PCA Billing Person Date Of Employment cannot be in the future'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskPCABillingPersonDesignation", providerType == $provider.providerType)
        DesignatedContactInformationType($contactList : designatedContact) from $provider.designatedContactInformation
        $contact: DesignatedContactType($hireDate: hireDate, hireDate != null, designationType == "PCA_BILLING") from $contactList
        eval($hireDate.after(java.util.Calendar.getInstance())) 
        $report: ErrorReporter() 
    then
        int index = $contactList.indexOf($contact);
        $report.addError(
            "/ProviderInformation/DesignatedContactInformation/DesignatedContact[" + index + "]/HireDate",
            "00001",
            "PCA Billing Person date of employment cannot be a future date."
        );

end

rule 'PCA Billing Person Date Of Employment cannot be before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskPCABillingPersonDesignation", providerType == $provider.providerType)
        DesignatedContactInformationType($contactList : designatedContact) from $provider.designatedContactInformation
        $contact: DesignatedContactType($hireDate: hireDate, hireDate != null, designationType == "PCA_BILLING") from $contactList
        eval($hireDate.before(getEarliestAcceptableDate())) 
        $report: ErrorReporter() 
    then
        int index = $contactList.indexOf($contact);
        $report.addError(
            "/ProviderInformation/DesignatedContactInformation/DesignatedContact[" + index + "]/HireDate",
            "00001",
            "PCA Billing Person date of employment cannot be earlier than 01/01/1900."
        );

end


rule 'PCA Billing Person Designation Is Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskPCABillingPersonDesignation", ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value()));

end

rule 'PCA Billing Person Is Required I'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskPCABillingPersonDesignation", providerType == $provider.providerType)
        ProviderInformationType( designatedContactInformation == null )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/DesignatedContactInformation",
            "00001",
            "PCA Billing Person is required."
        );

end

rule 'PCA Billing Person Is Required II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskPCABillingPersonDesignation", providerType == $provider.providerType)
        DesignatedContactInformationType($contactList : designatedContact) from $provider.designatedContactInformation
        not DesignatedContactType(designationType == "PCA_BILLING") from $contactList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/DesignatedContactInformation",
            "00001",
            "PCA Billing Person is required."
        );

end

rule 'PCA Billing Person Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskPCABillingPersonDesignation", providerType == $provider.providerType)
        DesignatedContactInformationType($contactList : designatedContact) from $provider.designatedContactInformation
        $contact: DesignatedContactType(fullName == null || fullName matches "^[\\s]*$", designationType == "PCA_BILLING") from $contactList
        $report: ErrorReporter() 
    then
        int index = $contactList.indexOf($contact);
        $report.addError(
            "/ProviderInformation/DesignatedContactInformation/DesignatedContact[" + index + "]/FullName",
            "00001",
            "PCA Billing Person name is required."
        );

end

rule 'PCA Billing Person Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskPCABillingPersonDesignation", providerType == $provider.providerType)
        DesignatedContactInformationType($contactList : designatedContact) from $provider.designatedContactInformation
        $contact: DesignatedContactType(fullName != null, fullName not matches "^.{0,100}$", designationType == "PCA_BILLING") from $contactList
        $report: ErrorReporter() 
    then
        int index = $contactList.indexOf($contact);
        $report.addError(
            "/ProviderInformation/DesignatedContactInformation/DesignatedContact[" + index + "]/FullName",
            "00001",
            "PCA Billing Person name length cannot exceed 100 characters."
        );

end

rule 'PCA Billing Person SSN Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskPCABillingPersonDesignation", providerType == $provider.providerType)
        DesignatedContactInformationType($contactList : designatedContact) from $provider.designatedContactInformation
        $contact: DesignatedContactType(socialSecurityNumber == null || socialSecurityNumber matches "^[\\s]*$", designationType == "PCA_BILLING") from $contactList
        $report: ErrorReporter() 
    then
        int index = $contactList.indexOf($contact);
        $report.addError(
            "/ProviderInformation/DesignatedContactInformation/DesignatedContact[" + index + "]/SocialSecurityNumber",
            "00001",
            "PCA Billing Person SSN is required."
        );

end

rule 'PCA Billing Person SSN Maximum Length Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskPCABillingPersonDesignation", providerType == $provider.providerType)
        DesignatedContactInformationType($contactList : designatedContact) from $provider.designatedContactInformation
        $contact: DesignatedContactType(socialSecurityNumber != null, socialSecurityNumber not matches "^[\\s]*$", socialSecurityNumber not matches "\\d{9}", designationType == "PCA_BILLING") from $contactList
        $report: ErrorReporter() 
    then
        int index = $contactList.indexOf($contact);
        $report.addError(
            "/ProviderInformation/DesignatedContactInformation/DesignatedContact[" + index + "]/SocialSecurityNumber",
            "00001",
            "PCA Billing Person SSN must have 9 digits."
        );

end

rule 'PCA Billing Person Title Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskPCABillingPersonDesignation", providerType == $provider.providerType)
        DesignatedContactInformationType($contactList : designatedContact) from $provider.designatedContactInformation
        $contact: DesignatedContactType(prefix == null || prefix matches "^[\\s]*$", designationType == "PCA_BILLING") from $contactList
        $report: ErrorReporter() 
    then
        int index = $contactList.indexOf($contact);
        $report.addError(
            "/ProviderInformation/DesignatedContactInformation/DesignatedContact[" + index + "]/Prefix",
            "00001",
            "PCA Billing Person title is required."
        );

end

rule 'PCA Billing Person Title Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskPCABillingPersonDesignation", providerType == $provider.providerType)
        DesignatedContactInformationType($contactList : designatedContact) from $provider.designatedContactInformation
        $contact: DesignatedContactType(prefix != null, prefix not matches "^.{0,100}$", designationType == "PCA_BILLING") from $contactList
        $report: ErrorReporter() 
    then
        int index = $contactList.indexOf($contact);
        $report.addError(
            "/ProviderInformation/DesignatedContactInformation/DesignatedContact[" + index + "]/Prefix",
            "00001",
            "PCA Billing Person title length cannot exceed 100 characters."
        );

end

rule 'PCA Training certification is required for PCA.'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType, providerType == ProviderType.PERSONAL_CARE_ASSISTANT.value())
        LicenseInformationType($licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.PCA_TRAINING_CERTIFICATE.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License",
            "00001",
            "PCA training certificate is required for this provider."
        );

end

rule 'Pharmacist license or specialty certification is required for pharmacists.'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType, providerType == ProviderType.PHARMACIST.value())
        LicenseInformationType( worksOnReservation != "Y", $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.PHARMACIST_LICENSE.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License",
            "00001",
            "Pharmacy license is required unless providing services at a Public Health Service (PHS) Indian Hospital."
        );

end

rule 'Pharmacy License Is Required For Pharmacy'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.PHARMACY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.PHARMACY_LICENSE.value() )  from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Pharmacy license is required for this provider."
        );

end

rule 'PHN Copy Of Contract With County Is Required If County Indicator is N'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskPHNForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType(  ) from $provider.facilityCredentials
        CountyContractType(contractAttachmentObjectId == null, countyInd == "N") from $credentials.contractWithCounty
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/ContractAttachmentObjectId",
            "00001",
            "Copy of contract with county is required for this provider type."
        );

end

rule 'PHN County Indicator Is Required'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskPHNForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType( ) from $provider.facilityCredentials
        CountyContractType( countyInd != "Y", countyInd != "N") from $credentials.contractWithCounty
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/CountyInd",
            "00001",
            "County Indicator is required for this provider type."
        );

end

rule 'PHN County Name Is Required If County Indicator Is Y'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskPHNForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType(  ) from $provider.facilityCredentials
        CountyContractType(countyName == null || countyName matches "^[\\s]*$",  countyInd == "Y") from $credentials.contractWithCounty
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/CountyName",
            "00001",
            "Please specify the county for this provider type."
        );

end

rule 'PHN County Name Maximum Length Check'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskPHNForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType(  ) from $provider.facilityCredentials
        CountyContractType(countyName != null, countyName not matches "^[\\s]*$", countyName not matches "^.{0,100}$", countyInd == "Y") from $credentials.contractWithCounty
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/CountyName",
            "00001",
            "County name cannot exceed 100 characters."
        );

end

rule 'PHN Form Is Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskPHNForm", ProviderType.PUBLIC_HEALTH_NURSING_ORGANIZATION.value()));

end

rule 'Phone Number Must Be In A Valid Format'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        IsIndividual($provider : provider)
        $individual: IndividualApplicantType()
        ContactInformationType($phoneNumber: phoneNumber, phoneNumber != null) from $individual.contactInformation
    then
        insertLogical(new PhoneNumberEntry(
            "Phone Number", 
            "/ProviderInformation/ApplicantInformation/PersonalInformation/ContactInformation/PhoneNumber",
            $phoneNumber
        ));

end

rule 'Physical Rehabilitative Provider Members Must Have One Of The Following Types'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.BILLING_ENTITY_FOR_PHYSICAL_REHABILITATIVE_PROVIDERS.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        GroupMemberType(providerType not in 
            (
                ProviderType.OCCUPATIONAL_THERAPIST.value(),
                ProviderType.AUDIOLOGIST.value(),
                ProviderType.PHYSICAL_THERAPIST.value(),
                ProviderType.CHIROPRACTOR.value(),
                ProviderType.SPEECH_LANGUAGE_PATHOLOGIST.value(),
                ProviderType.HEARING_AID_DISPENSER.value()
            )
        ) from $memberList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MemberInformation",
            "00001",
            "Member types are expected to be one of Occupational Therapist, Audiologist, Physical Therapist, Chiropractor, Speech Language Pathologists or Hearing Aid Dispenser."
        );

end

rule 'Practice Address Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        IsIndividual($provider : provider)
        $practice: PracticeInformationType() from $provider.practiceInformation
        ContactInformationType( address == null ) from $practice.contactInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/ContactInformation/Address",
            "00001",
            "Practice Address is required."
        );

end

rule 'Practice Address Cannot Be A PO Box'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        IsIndividual($provider : provider)
        $practice: PracticeInformationType() from $provider.practiceInformation
        $contactInformation: ContactInformationType(  ) from $practice.contactInformation
        LookupEntry($value : value, type == "POBoxWordRegex")
        AddressType($addressLine2: addressLine2, addressLine2 != null) from $contactInformation.address 
        eval($addressLine2.matches($value))
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/ContactInformation/Address",
            "00001",
            "Practice Address cannot be a PO Box."
        );
end


rule 'Practice Address Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        IsIndividual($provider : provider)
        $practice: PracticeInformationType() from $provider.practiceInformation
        $contact: ContactInformationType() from $practice.contactInformation
        $address: AddressType() from $contact.address
    then
        insertLogical(new AddressEntry(
            "Practice Address",
            "/ProviderInformation/PracticeInformation/ContactInformation/Address", 
            $address
        ));

end

rule 'Practice Contact Information Is Required.'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        IsIndividual($provider : provider)
        PracticeInformationType(contactInformation == null) from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/ContactInformation",
            "00001",
            "Practice contact information is required."
        );

end

rule 'Practice FAX Number Must Be In A Valid Format'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        IsIndividual($provider : provider)
        $practice: PracticeInformationType() from $provider.practiceInformation
        ContactInformationType($faxNumber: faxNumber, faxNumber != null, faxNumber not matches "^[\\s]*$") from $practice.contactInformation
    then
        insertLogical(new PhoneNumberEntry(
            "Practice Fax Number", 
            "/ProviderInformation/PracticeInformation/ContactInformation/FaxNumber",
            $faxNumber
        ));

end

rule 'Practice FEIN Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        PracticeInformationType(FEIN != null, FEIN not matches "^.{0,100}$") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/FEIN",
            "00001",
            "FEIN length cannot exceed 100 characters."
        );

end

rule 'Practice FEIN Should Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice != "Y" )
        PracticeInformationType(FEIN != null, FEIN != "") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/FEIN",
            "00001",
            "FEIN must be left empty if not in private practice."
        );

end

rule 'Practice Group NPI,UMPI Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice != "Y" )
        PracticeInformationType(groupNPI == null || groupNPI matches "^[\\s]*$") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/GroupNPI",
            "00001",
            "Practice group NPI/UMPI is required."
        );
end

rule 'Primary Practice Effective Date Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice != "Y" )
        PracticeInformationType(effectiveDate == null) from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/EffectiveDate",
            "00001",
            "Requested effective date is required."
        );
end

rule 'Practice Effective Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType()
        PracticeInformationType($effectiveDate: effectiveDate, effectiveDate != null) from $provider.practiceInformation
        eval($effectiveDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/EffectiveDate",
            "00001",
            "Effective date cannot be earlier than 01/01/1900."
        );
end

rule 'Practice Group NPI,UMPI Maximum Length Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType()
        PracticeInformationType(groupNPI != null, groupNPI not matches "^.{0,100}$") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/GroupNPI",
            "00001",
            "Practice group NPI/UMPI length cannot exceed 100 characters."
        );

end

rule 'Practice Group NPI,UMPI Validity Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType()
        PracticeInformationType($npi: groupNPI, groupNPI != null, groupNPI not matches "^[\\s]*$") from $provider.practiceInformation
    then
        insertLogical(new NPIEntry(
            "Practice group NPI/UMPI",
            "/ProviderInformation/PracticeInformation/GroupNPI",
            $npi
        ));
end

rule 'Practice Information Must Be Provided For Individual Applicants'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        IsIndividual($provider : provider)
        not PracticeInformationType( ) from $provider.practiceInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation",
            "00001",
            "Practice Information must be provided for individual applicants."
        );

end

rule 'Practice Phone Number Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        IsIndividual($provider : provider)
        $practice: PracticeInformationType() from $provider.practiceInformation
        ContactInformationType( phoneNumber == null || phoneNumber matches "^[\\s]*$") from $practice.contactInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/ContactInformation/PhoneNumber",
            "00001",
            "Practice Phone Number is required."
        );

end

rule 'Practice Phone Number Must Be In A Valid Format'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        IsIndividual($provider : provider)
        $practice: PracticeInformationType() from $provider.practiceInformation
        ContactInformationType($phoneNumber: phoneNumber, phoneNumber != null, phoneNumber not matches "^[\\s]*$") from $practice.contactInformation
    then
        insertLogical(new PhoneNumberEntry(
            "Practice Phone Number", 
            "/ProviderInformation/PracticeInformation/ContactInformation/PhoneNumber",
            $phoneNumber
        ));

end

rule 'Primary Practice Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice != "Y" )
        PracticeInformationType(name == null || name matches "^[\\s]*$") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/Name",
            "00001",
            "Primary practice name is required."
        );

end

rule 'Primary Practice Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice != "Y" )
        PracticeInformationType(name != null, name not matches "^.{0,100}$") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/Name",
            "00001",
            "Primary practice name length cannot exceed 100 characters."
        );

end

rule 'Private Practice Indicator Is Required With Exceptions'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType(maintainsOwnPrivatePractice  == null || maintainsOwnPrivatePractice matches "^[\\s]*$" )
        not ProviderTypeException(type == "PrivatePracticeExemption", providerType == $provider.providerType )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MaintainsOwnPrivatePractice",
            "00001",
            "You must indicate if the applicant maintains their own private practice."
        );

end

rule 'Private Practice Indicator should be answered in Y,N'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType(maintainsOwnPrivatePractice != null, maintainsOwnPrivatePractice not matches "^[YN]$" )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MaintainsOwnPrivatePractice",
            "00001",
            "Private Practice indicator can only be answered by Y or N."
        );

end

rule 'Private Practice Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice == "Y" )
        PracticeInformationType(name == null || name matches "^[\\s]*$") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/Name",
            "00001",
            "Private practice name is required."
        );

end

rule 'Private Practice Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice == "Y" )
        PracticeInformationType(name != null, name not matches "^.{0,100}$") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/Name",
            "00001",
            "Private practice name length cannot exceed 100 characters."
        );

end

rule 'Professional Association Type Is Required If Entity Is A Professional Association'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskOwnershipInfo", providerType == $provider.providerType)
        OwnershipInformationType(entityType == EntityType.PROFESSIONAL_ASSOCIATION.value(), 
            entitySubType == null || entitySubType matches "^[\\s]*$") from $provider.ownershipInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/OwnershipInformation/EntitySubType",
            "00001",
            "Entity sub type is required."
        );

end

rule 'Provider Cannot Be In Private Practice'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType(maintainsOwnPrivatePractice == "Y")
        ProviderTypeException(type == "PrivatePracticeExemption", providerType == $provider.providerType )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MaintainsOwnPrivatePractice",
            "00001",
            "The selected provider type can not be in private practice."
        );

end

rule 'Provider Setup Is Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskProviderSetupInfo", ProviderType.CLEARING_HOUSE.value()));
        insertLogical(new ProviderTypeException("AskProviderSetupInfo", ProviderType.EDI_TRADING_PARTNER.value()));
        insertLogical(new ProviderTypeException("AskProviderSetupInfo", ProviderType.BILLING_INTERMEDIARY.value()));

end

rule 'Provider Statement Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual($provider : provider)
        not ProviderStatementType() from $provider.providerStatement
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement",
            "00001",
            "Provider statement is required."
        );

end

rule 'Provider Statement Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual($provider : provider)
        ProviderStatementType(name == null || name matches "^[\\s]*$") from $provider.providerStatement
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/Name",
            "00001",
            "Provider statement name is required."
        );

end

rule 'Provider Statement Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual($provider : provider)
        ProviderStatementType(name != null, name not matches "^.{0,100}$") from $provider.providerStatement
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/Name",
            "00001",
            "Provider statement name length cannot exceed 100 characters."
        );

end

rule 'Provider Statement Signature Date Cannot Be In The Future'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual($provider : provider)
        ProviderStatementType($signDate: signDate, signDate != null) from $provider.providerStatement
        eval($signDate.after(Calendar.getInstance()))
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/SignDate",
            "00001",
            "Provider statement signature date cannot be a future date."
        );

end

rule 'Provider Statement Signature Date Cannot be past date'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual($provider : provider)
        ProviderStatementType($signDate: signDate, signDate != null) from $provider.providerStatement
        eval($signDate.before(getNow()))
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/SignDate",
            "00001",
            "Provider statement signature date cannot be a past date."
        );
end


rule 'Provider Statement Signature Date Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual($provider : provider)
        ProviderStatementType(signDate == null) from $provider.providerStatement
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/SignDate",
            "00001",
            "Provider statement signature date is required."
        );

end

rule 'Provider Statement Title Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual($provider : provider)
        ProviderStatementType(title == null || title matches "^[\\s]*$") from $provider.providerStatement
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/Title",
            "00001",
            "Provider statement title is required."
        );

end

rule 'Provider Statement Title Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 4
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PROVIDER_STATEMENT.value())
        IsIndividual($provider : provider)
        ProviderStatementType(title != null, title not matches "^.{0,100}$") from $provider.providerStatement
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderStatement/Title",
            "00001",
            "Provider statement title length cannot exceed 100 characters."
        );

end

rule 'Provider Type Cannot Be A Community Health Board'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization( )
        $provider: ProviderInformationType(providerType not in (ProviderType.CHILD_AND_TEEN_CHECKUP_CLINIC.value()))
        FacilityCredentialsType(communityHealthBoard == "Y") from $provider.facilityCredentials
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/CommunityHealthBoard",
            "00001",
            "This provider type cannot be a community health board."
        );

end

rule 'Provider Type is required for all requests'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        ProviderInformationType(providerType == null || providerType matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderType",
            "00001",
            "Provider Type is required for all requests."
        );

end

rule 'Provider Type should be one of the configured types'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        ProviderInformationType($providerType: providerType, providerType != null, providerType not matches "^[\\s]*$")
        not LookupEntry(type == "ProviderType", value == $providerType)
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ProviderType",
            "00001",
            "Provider Type specified is not recognized."
        );

end

rule 'Provider Types Not Eligible To Obtain NPI Should Leave It Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value())
        $provider: ProviderInformationType(NPI != null, providerType in ("TBD"))
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/NPI",
            "00001",
            "Provider Type Is not eligible for NPI."
        );

end

rule 'QP BGS Clearance Date Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType(BGSClearanceDate == null) from $qpList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/BGSClearanceDate",
            "00001",
            "QP BGS clearance date is required."
        );
end

rule 'QP BGS Clearance Date Cannot Be A Future Date'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($clearanceDate: BGSClearanceDate, BGSClearanceDate != null) from $qpList
        eval($clearanceDate.after(Calendar.getInstance()))
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/BGSClearanceDate",
            "00001",
            "QP BGS clearance date cannot be a future date."
        );
end

rule 'QP BGS Clearance Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($clearanceDate: BGSClearanceDate, BGSClearanceDate != null) from $qpList
        eval($clearanceDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/BGSClearanceDate",
            "00001",
            "QP BGS clearance date cannot be earlier than 01/01/1900."
        );
end



rule 'QP BGS Number Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType(BGSNumber == null || BGSNumber matches "^[\\s]*$") from $qpList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/BGSNumber",
            "00001",
            "QP BGS number is required."
        );

end

rule 'QP BGS Number Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType(BGSNumber != null, BGSNumber not matches "^[\\s]*$", BGSNumber not matches "^.{0,100}$") from $qpList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/BGSNumber",
            "00001",
            "QP BGS number length cannot exceed 100 characters."
        );

end

rule 'QP Date Of Employment Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType(startDate == null) from $qpList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/StartDate",
            "00001",
            "QP start date is required."
        );

end

rule 'QP Date Of Employment Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($startDate: startDate, startDate != null) from $qpList
        eval($startDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/StartDate",
            "00001",
            "QP start date cannot be before 01/01/1900."
        );

end


rule 'QP Date Of Birth Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType(dateOfBirth  == null) from $qpList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/DateOfBirth",
            "00001",
            "QP date of birth is required."
        );
end

rule 'QP Date Of Birth Cannot Be A Future Date'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($dateOfBirth: dateOfBirth, dateOfBirth  != null) from $qpList
        eval($dateOfBirth.after(Calendar.getInstance()))
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/DateOfBirth",
            "00001",
            "QP date of birth cannot be a future date."
        );
end

rule 'QP Date Of Birth Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($dateOfBirth: dateOfBirth, dateOfBirth  != null) from $qpList
        eval($dateOfBirth.before(getEarliestAcceptableDate()))
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/DateOfBirth",
            "00001",
            "QP date of birth cannot be earlier than 01/01/1900."
        );
end




rule 'QP License Copy Attachment Id Must Reference A Valid Attachment I'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        $license: LicenseType(attachmentObjectId != null) from $licenseList
        not AttachedDocumentsType(  ) from $provider.attachedDocuments
        $report: ErrorReporter()
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/AttachmentObjectId",
            "00001",
            "Copy of QP license must be provided as an attachment."
        );

end

rule 'QP License Copy Attachment Id Must Reference A Valid Attachment II'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        $license: LicenseType(attachmentObjectId != null) from $licenseList
        $attachedDocuments: AttachedDocumentsType(  ) from $provider.attachedDocuments
        not DocumentType( objectId == $license.attachmentObjectId ) from $attachedDocuments.attachment
        $report: ErrorReporter()
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/AttachmentObjectId",
            "00001",
            "Copy of QP license must be provided as an attachment."
        );

end

rule 'QP License Copy Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        not LicenseType(licenseType  == LicenseNames.PCA_1_OR_3_DAY_STEPS_FOR_SUCCESS_TRAINING.value()) from $licenseList
        $license: LicenseType(attachmentObjectId == null) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/AttachmentObjectId",
            "00001",
            "Copy of QP license is required."
        );

end

rule 'QP License Issuing State Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        not LicenseType(licenseType  == LicenseNames.PCA_1_OR_3_DAY_STEPS_FOR_SUCCESS_TRAINING.value()) from $licenseList
        $license: LicenseType(issuingState == null || issuingState matches "^[\\s]*$" ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/IssuingState",
            "00001",
            "QP license issuing state is required."
        );

end

rule 'QP License Issuing State Maximum Length Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        $license: LicenseType(issuingState == null, issuingState not matches "^[\\s]*$", issuingState not matches "^.{0,20}$") from $licenseList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/IssuingState",
            "00001",
            "QP license issuing state length cannot exceed 20 characters."
        );

end

rule 'QP License Number Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        not LicenseType(licenseType  == LicenseNames.PCA_1_OR_3_DAY_STEPS_FOR_SUCCESS_TRAINING.value()) from $licenseList
        $license: LicenseType(licenseNumber == null || licenseNumber matches "^[\\s]*$" ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/LicenseNumber",
            "00001",
            "QP license number is required."
        );

end

rule 'QP License Number Maximum Length Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        $license: LicenseType(licenseNumber != null, licenseNumber not matches "^[\\s]*$", licenseNumber not matches "^.{0,100}$") from $licenseList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/LicenseNumber",
            "00001",
            "QP license number length cannot exceed 100 characters."
        );

end

rule 'QP License Original Issue Date Is Required'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        not LicenseType(licenseType  == LicenseNames.PCA_1_OR_3_DAY_STEPS_FOR_SUCCESS_TRAINING.value()) from $licenseList
        $license: LicenseType(originalIssueDate == null) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/OriginalIssueDate",
            "00001",
            "QP license original issue date is required."
        );
end

rule 'QP License Original Issue Date Cannot Be A Future Date'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        $license: LicenseType($originalIssueDate : originalIssueDate, originalIssueDate != null) from $licenseList
        eval($originalIssueDate.after(Calendar.getInstance()))
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/OriginalIssueDate",
            "00001",
            "QP license original issue date cannot be a future date."
        );
end

rule 'QP License Original Issue Date Cannot Be Before 01-01-1900'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        $license: LicenseType($originalIssueDate : originalIssueDate, originalIssueDate != null) from $licenseList
        eval($originalIssueDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/OriginalIssueDate",
            "00001",
            "QP license original issue date cannot be earlier than 01/01/1900."
        );
end

rule 'QP License Renewal Date Cannot Be Before 01-01-1900'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        $license: LicenseType($renewalDate : renewalDate, renewalDate != null) from $licenseList
        eval($renewalDate.before(getEarliestAcceptableDate()))
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/RenewalDate",
            "00001",
            "QP license renewal date cannot be earlier than 01/01/1900."
        );
end


rule 'QP License Renewal Date Is Required'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        not LicenseType(licenseType  == LicenseNames.PCA_1_OR_3_DAY_STEPS_FOR_SUCCESS_TRAINING.value()) from $licenseList
        $license: LicenseType(renewalDate == null) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/RenewalDate",
            "00001",
            "QP license renewal date is required."
        );
end

rule 'QP License Type Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($licenseList: license) from $qpList
        $license: LicenseType(licenseType == null || licenseType matches "^[\\s]*$" ) from $licenseList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        int index2 = $licenseList.indexOf($license);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/License["+ index2+ "]/LicenseType",
            "00001",
            "QP license type is required."
        );

end

rule 'QP Name Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType(fullName == null || fullName matches "^[\\s]*$") from $qpList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/FullName",
            "00001",
            "QP name is required."
        );

end

rule 'QP Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType(fullName != null, fullName not matches "^[\\s]*$", fullName not matches "^.{0,100}$") from $qpList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/FullName",
            "00001",
            "QP name length cannot exceed 100 characters."
        );

end

rule 'QP NPI Maximum Length Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType(NPI != null, NPI not matches "^[\\s]*$", NPI not matches "^.{0,10}$") from $qpList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/NPI",
            "00001",
            "QP NPI length cannot exceed 10 characters."
        );

end

rule 'QP NPI Validity Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType($npi: NPI, NPI != null, NPI not matches "^[\\s]*$", NPI not matches "^.{0,10}$") from $qpList
    then
        int index = $qpList.indexOf($qp);
        insertLogical(new NPIEntry(
            "QP NPI",
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/NPI",
            $npi
        ));
end

rule 'QP SSN Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType(socialSecurityNumber == null || socialSecurityNumber matches "^[\\s]*$") from $qpList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/SocialSecurityNumber",
            "00001",
            "QP SSN is required."
        );

end

rule 'QP SSN Maximum Length Check'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType(socialSecurityNumber != null, socialSecurityNumber not matches "^[\\s]*$", socialSecurityNumber not matches "^.{0,9}$") from $qpList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/SocialSecurityNumber",
            "00001",
            "QP SSN length cannot exceed 9 characters."
        );

end

rule 'QP Type Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType(type == null || type matches "^[\\s]*$") from $qpList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/Type",
            "00001",
            "QP Type is required."
        );

end

rule 'QP Type Must Be One Of Enumerated Values Configured'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        QualifiedProfessionalsType($qpList : qualifiedProfessional) from $provider.qualifiedProfessionals
        $qp: QualifiedProfessionalType(type != null, type not matches "^[\\s]*$", type not in ("Registered Nurse","Licensed Social Worker","Mental Health Professional","Qualified Developmental Disability Specialist")) from $qpList
        $report: ErrorReporter() 
    then
        int index = $qpList.indexOf($qp);
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals/QualifiedProfessional[" + index + "]/Type",
            "00001",
            "QP Type specified is not recognized."
        );

end

rule 'Qualification Type Is Required For Federally Qualified Health Center'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.FEDERALLY_QUALIFIED_HEALTH_CENTER.value())
        FacilityCredentialsType(federalQualificationType == null) from $provider.facilityCredentials
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/FederalQualificationType",
            "00001",
            "Qualification type is required for this provider."
        );

end

rule 'Qualification Type Must Be One Of The Following Values'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.FEDERALLY_QUALIFIED_HEALTH_CENTER.value())
        FacilityCredentialsType(federalQualificationType != null,
            federalQualificationType not in (
                DocumentNames.APPROVAL_LETTER_FROM_HEALTH_CARE_FINANCE_ADMINISTRATION_HCFA.value(),
                DocumentNames.COPIES_OF_THE_330_GRANT_DOCUMENTS.value(),
                DocumentNames.COVER_PAGE_OF_PUBLIC_LAW_93_638_STATUS_CONTRACT.value(),
                DocumentNames.COMPACT_WITH_THE_INDIAN_HEALTH_SERVICE.value()
            )
        ) from $provider.facilityCredentials
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/FederalQualificationType",
            "00001",
            "Qualification type specified is not recognized."
        );

end

rule 'Qualified Professional Is Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskForQualifiedProfessionals", ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value()));

end

rule 'Qualified Professional Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        ProviderTypeException(type == "AskForQualifiedProfessionals", providerType == $provider.providerType)
        not QualifiedProfessionalsType( ) from $provider.qualifiedProfessionals
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals",
            "00001",
            "At least one qualified professional must be provided."
        );

end

rule 'Qualified Professional Must Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.QUALIFIED_PROFESSIONALS.value())
        IsOrganization( $provider : provider )
        not ProviderTypeException(type == "AskForQualifiedProfessionals", providerType == $provider.providerType)
        QualifiedProfessionalsType() from $provider.qualifiedProfessionals
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/QualifiedProfessionals",
            "00001",
            "Qualified Professionals must be left empty for this provider."
        );

end

rule 'Real Property Ownership Must Be Left Empty'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        not ProviderTypeException(type == "AskResidentialPropertyOwnership", providerType == $provider.providerType)
        OwnershipInformationType($rpList: realProperty) from $provider.ownershipInformation
        RealPropertyType(  ) from $rpList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/OwnershipInformation",
            "00001",
            "Real property ownership must be left empty for this provider."
        );

end

rule 'Regional Treatment Center Certification Is Required For Regional Treatment Centers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.REGIONAL_TREATMENT_CENTER.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.REGIONAL_TREATMENT_CENTER_CERTIFICATION.value() )  from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Regional treatment center certification is required for this provider."
        );

end

rule 'Reimbursement Address Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice != "Y" )
        PracticeInformationType(reimbursementAddress == null) from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/ReimbursementAddress",
            "00001",
            "Reimbursement address is required."
        );

end

rule 'Reimbursement Address Must Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice == "Y" )
        PracticeInformationType(reimbursementAddress != null) from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/ReimbursementAddress",
            "00001",
            "Reimbursement address must be left empty if applicant is in private practice."
        );

end

rule 'Reimbursement Address Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        IsIndividual($provider : provider)
        $practice: PracticeInformationType(reimbursementSameAsPrimary == 'N') from $provider.practiceInformation
        $address: AddressType() from $practice.reimbursementAddress
    then
        insertLogical(new AddressEntry(
            "Reimbursement Address",
            "/ProviderInformation/PracticeInformation/ReimbursementAddress", 
            $address
        ));

end

rule 'Remittance Sequence Is Asked For The Specified Providers'
dialect 'mvel'
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value()));
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.PHARMACY.value()));
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.PRIVATE_DUTY_NURSING_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.PUBLIC_HEALTH_NURSING_ORGANIZATION.value()));
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.PUBLIC_HEALTH_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.REGIONAL_TREATMENT_CENTER.value()));
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.REHABILITATION_AGENCY.value()));
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.RURAL_HEALTH_CLINIC.value()));
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.TARGETED_CASE_MANAGEMENT.value()));
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.WIC_PROGRAM.value()));
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.X_RAY_SERVICES.value()));
        
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.FEDERALLY_QUALIFIED_HEALTH_CENTER.value()));
        insertLogical(new ProviderTypeException("AskRemittanceSequence", ProviderType.INDIVIDUAL_EDUCATION_PLAN.value()));

end

rule 'Remittance Sequence Number Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice == "Y", remittanceSequenceNumber == null || remittanceSequenceNumber matches "^[\\s]*$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/RemittanceSequenceNumber",
            "00001",
            "Remittance sequence number is required."
        );

end

rule 'Remittance Sequence Number Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        $provider: ProviderInformationType(remittanceSequenceNumber != null, remittanceSequenceNumber not matches "^.{0,100}$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/RemittanceSequenceNumber",
            "00001",
            "Remittance sequence number length cannot exceed 100 characters."
        );

end

rule 'Remittance Sequence Number Should Be Left Empty For Organization'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        $provider: ProviderInformationType(remittanceSequenceNumber != null, remittanceSequenceNumber != "")
        ProviderTypeException(type == "AskRemittanceSequence", providerType == $provider.providerType)
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/RemittanceSequenceNumber",
            "00001",
            "Remittance sequence number must be left empty for this provider type."
        );

end

rule 'Remittance Sequence Number Should Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice != "Y", remittanceSequenceNumber != null, remittanceSequenceNumber != "")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/RemittanceSequenceNumber",
            "00001",
            "Remittance sequence number must be left empty if not in private practice."
        );

end

rule 'Effective Date Is Required For Organizations'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider, provider.providerType not in (
                ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value(), 
                ProviderType.NURSING_FACILITY.value(),
                ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value()
            )
        )
        // not ProviderTypeException(type == "NonPracticeOrganization", providerType == $provider.providerType)
        not ProviderTypeException(type == "AgencyApplication", providerType == $provider.providerType)
        not ProviderTypeException(type == "EducationPlan", providerType == $provider.providerType)
        EnrollmentType(effectiveDate == null) 
        $report: ErrorReporter()
    then
        $report.addError(
            "/EffectiveDate",
            "00001",
            "Effective Date is required."
        );

end

rule 'Effective Date For Cannot Be Past Date'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        ProviderInformationType($providerType: providerType, providerType not in (
                ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value(), 
                ProviderType.NURSING_FACILITY.value(),
                ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value()
            )
        )
        // not ProviderTypeException(type == "NonPracticeOrganization", providerType == $providerType)
        not ProviderTypeException(type == "AgencyApplication", providerType == $providerType)
        not ProviderTypeException(type == "EducationPlan", providerType == $providerType)
        EnrollmentType($effectiveDate: effectiveDate, effectiveDate != null)
        eval($effectiveDate.before(get1YearFromNow())) 
        $report: ErrorReporter()
    then
        $report.addError(
            "/EffectiveDate",
            "00001",
            "Effective Date can only be as far back as 12 month from now."
        );
end

rule 'Requested Enrollment Date Is Required For Education Plans'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "EducationPlan", providerType == $provider.providerType)
        EnrollmentType(effectiveDate == null) 
        $report: ErrorReporter()
    then
        $report.addError(
            "/EffectiveDate",
            "00001",
            "Requested Enrollment Date is required."
        );

end

rule 'Requested Enrollment Date Cannot Be Before 01-01-1900'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization($provider: provider)
        ProviderTypeException(type == "EducationPlan", providerType == $provider.providerType)
        EnrollmentType($effectiveDate: effectiveDate, effectiveDate != null)
        eval($effectiveDate.before(getEarliestAcceptableDate())) 
        $report: ErrorReporter()
    then
        $report.addError(
            "/EffectiveDate",
            "00001",
            "Requested Enrollment Date cannot be before 01/01/1900."
        );

end


rule 'Require Highest Degree Earned For this Provider'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        IndividualApplicantType(highestDegreeEarned  == null || highestDegreeEarned matches "^[\\s]*$")
        LookupEntry(type == "AskForHighestDegreeEarned", code == "Y", $value : value)
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/HighestDegreeEarned",
            "00001",
            $value
        );

end

rule 'Residential Address Cannot Be A PO Box'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value())
        IsIndividual()
        $individual: IndividualApplicantType(contactInformation != null, contactInformation.address != null)
        LookupEntry($value : value, type == "POBoxWordRegex")
        AddressType($addressLine2: addressLine2, addressLine2 != null) from $individual.contactInformation.address 
        eval($addressLine2.matches($value))
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/ContactInformation/Address",
            "00001",
            "Residential Address cannot be a PO Box."
        );

end

rule 'Residential Address Is Required For The Specified Provider Types II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value())
        IsIndividual($provider : provider, provider.providerType == ProviderType.PERSONAL_CARE_ASSISTANT.value())
        IndividualApplicantType(contactInformation != null, contactInformation.address == null)
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/ContactInformation/Address",
            "00001",
            "Residential Address is required."
        );

end

rule 'Residential Address Is Required For The Specified Provider Types'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value())
        IsIndividual($provider : provider, provider.providerType == ProviderType.PERSONAL_CARE_ASSISTANT.value())
        IndividualApplicantType(contactInformation == null)
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/ContactInformation/Address",
            "00001",
            "Residential Address is required."
        );

end

rule 'Residential Address Must Be Valid'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value())
        IsIndividual()
        $individual: IndividualApplicantType(contactInformation != null, contactInformation.address != null)
        $address: AddressType(  ) from $individual.contactInformation.address 
    then
        insertLogical(new AddressEntry(
            "Residential Address",
            "/ProviderInformation/ApplicantInformation/PersonalInformation/ContactInformation/Address",
            $address
        ));

end

rule 'Residential Property Ownership Is Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskResidentialPropertyOwnership", ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value()));

end

rule 'Rule 29 License Is required for Community Mental Health Center'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.RULE_29_LICENSE.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Rule 29 license is required for this provider."
        );

end

rule 'Rule 36 Licensed Facility Is Required For Intensive Residential Treatment Facility'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.INTENSIVE_RESIDENTIAL_TREATMENT_FACILITY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.RULE_36_LICENSED_FACILITY.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Rule 36 Licensed Facility is required for this provider."
        );

end

rule 'Rule 5 License Is Required For CMHR treatment facility'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.CHILDRENS_MENTAL_HEALTH_RESIDENTIAL_TREATMENT_FACILITY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.RULE_5_LICENSE_ISSUED_FROM_MN_DEPARTMENT_OF_HUMAN_SERVICES.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Rule 5 License issued from MN Department of Human Services is required for this provider."
        );

end

rule 'Selected Clinical Services Must Be One Of The Defined Options'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_ELIGIBILITY.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskForAgencyEligibility", providerType == $provider.providerType)
        AgencyEligibilityType($selectionList: clinicalServices) from $provider.agencyEligibility
        $selection: String() from $selectionList
        not LookupEntry( type  == "ClinicalServices", code == $provider.providerType, value == $selection )
        $report: ErrorReporter() 
    then
        int index = $selectionList.indexOf($selection);
        $report.addError(
            "/ProviderInformation/AgencyEligibility/ClinicalServices[" + index + "]",
            "00001",
            "Specified clinical services is not recognized for this provider type."
        );

end

rule 'Selected Service Categories Must Be One Of Defined Values For This Provider Type'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization($provider: provider)
        CategoriesOfServiceType( $serviceList : categoryName ) from $provider.categoriesOfService 
        $service: String() from $serviceList
        not LookupEntry( type  == "ServiceOption", code == $provider.providerType, value == $service )
        $report: ErrorReporter() 
    then
        int index = $serviceList.indexOf($service);
        $report.addError(
            "/ProviderInformation/CategoriesOfService/CategoryName[" + index + "]",
            "00001",
            "Specified service is not recognized for this provider type."
        );

end

rule 'Selected Service Units Must Be One Of The Defined Options'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_ELIGIBILITY.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskForAgencyEligibility", providerType == $provider.providerType)
        AgencyEligibilityType($selectionList: eligibleServiceUnits) from $provider.agencyEligibility
        $selection: String() from $selectionList
        not LookupEntry( type  == "ServiceUnits", code == $provider.providerType, value == $selection )
        $report: ErrorReporter() 
    then
        int index = $selectionList.indexOf($selection);
        $report.addError(
            "/ProviderInformation/AgencyEligibility/EligibleServiceUnits[" + index + "]",
            "00001",
            "Specified service units is not recognized for this provider type."
        );

end

rule 'Selected Supervision And Qualification Must Be One Of The Defined Options'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_ELIGIBILITY.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskForAgencyEligibility", providerType == $provider.providerType)
        AgencyEligibilityType($selectionList: supervisionAndQualification) from $provider.agencyEligibility
        $selection: String() from $selectionList
        not LookupEntry( type  == "SupervisionAndQualification", code == $provider.providerType, value == $selection )
        $report: ErrorReporter() 
    then
        int index = $selectionList.indexOf($selection);
        $report.addError(
            "/ProviderInformation/AgencyEligibility/SupervisionAndQualification[" + index + "]",
            "00001",
            "Specified supervision and qualification option is not recognized for this provider type."
        );

end

rule 'Selected Target Population Must Be One Of The Defined Options'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.AGENCY_ELIGIBILITY.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskForAgencyEligibility", providerType == $provider.providerType)
        AgencyEligibilityType($targetPopulation: targetPopulation) from $provider.agencyEligibility
        $population: String() from $targetPopulation
        not LookupEntry( type  == "TargetPopulation", code == $provider.providerType, value == $population )
        $report: ErrorReporter() 
    then
        int index = $targetPopulation.indexOf($population);
        $report.addError(
            "/ProviderInformation/AgencyEligibility/TargetPopulation[" + index + "]",
            "00001",
            "Specified eligible recipient is not recognized for this provider type."
        );

end

rule 'Setup validation reporting'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        not ErrorReporter()
        $validation: ValidationResultType() 
    then
        insert(new ErrorReporter($validation));

end

rule 'Sliding Fee Schedule Is Required For The Specified Provider Typers II'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType in (ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value()))
        AttachedDocumentsType($attachments : attachment) from $provider.attachedDocuments
        not DocumentType(name == DocumentNames.SLIDING_FEE_SCHEDULE.value()) from $attachments
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments/Document[name=\"Sliding Fee Schedule\"]",
            "00001",
            "Sliding fee schedule is required for this provider."
        );

end

rule 'Sliding Fee Schedule Is Required For The Specified Provider Typers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 9
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType in (ProviderType.COMMUNITY_MENTAL_HEALTH_CENTER.value()))
        not AttachedDocumentsType(  ) from $provider.attachedDocuments
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/AttachedDocuments/Document[name=\"Sliding Fee Schedule\"]",
            "00001",
            "Sliding fee schedule is required for this provider."
        );

end

rule 'Specialty certification from PHS is required for pharmacists working at a PHS Indian Hospital.'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 10
 */
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType, providerType == ProviderType.PHARMACIST.value())
        LicenseInformationType( worksOnReservation == "Y", $tribalCode : tribalCode, $licenses: license ) from $provider.licenseInformation
        not LicenseType(specialtyType == $tribalCode) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License",
            "00001",
            "Specialty certificate from the Public Health Service (PHS) Indian Hospital is required."
        );

end

rule 'Specialty Type And License Type Cannot Both Be Provided If the Specialty Certificate Behavior Defined is XOR'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        LookupEntry(value == $providerType, type == "SpecialtyTypeBehavior", code=="XOR")
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(specialtyType != null, licenseType != null) from $licenses
        $report: ErrorReporter() 
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/SpecialtyType",
            "00001",
            "Specialty Type cannot be provided with License Type for this provider."
        );

end

rule 'Specialty Type Is Required If Defined Specialty Certificate Behavior Is AND'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        LookupEntry(value == $providerType, type == "SpecialtyTypeBehavior", code=="AND")
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(specialtyType == null || specialtyType matches "^[\\s]*$") from $licenses
        $report: ErrorReporter() 
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/SpecialtyType",
            "00001",
            "Specialty Type is required."
        );

end

rule 'Specialty Type Or License Type Must Be Provided If the Defined Specialty Certificate Behavior is OR, XOR'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 1
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType($providerType: providerType)
        LookupEntry(value == $providerType, type == "SpecialtyTypeBehavior", code=="XOR" || code == "OR")
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        $license: LicenseType(specialtyType == null || specialtyType matches "^[\\s]*$", licenseType == null || licenseType matches "^[\\s]*$") from $licenses
        $report: ErrorReporter() 
    then
        int index = $licenses.indexOf($license);
        $report.addError(
            "/ProviderInformation/LicenseInformation/License["+ index+ "]/SpecialtyType",
            "00001",
            "Specialty Type or License Type is required."
        );

end

rule 'Specified Providers Must Have A license in the state of practice'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType(
            providerType in (
                ProviderType.CLINICAL_NURSE_SPECIALIST.value(),
                ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST.value(),
                ProviderType.PHYSICIAN.value()
            )
        )
        $practice: PracticeInformationType( ) from $provider.practiceInformation
        $contact: ContactInformationType(  ) from $practice.contactInformation
        AddressType( $practiceState : state, state != null) from $contact.address
        LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(issuingState == $practiceState) from $licenses
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation",
            "00001",
            "Provider must have a license in the state of practice."
        );

end

rule 'SSN Maximum Length Check'
dialect 'mvel'
    when
        IsIndividual($provider : provider)
        IndividualApplicantType(socialSecurityNumber != null, socialSecurityNumber not matches "^[\\s]*$", socialSecurityNumber not matches "\\d{9}") 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/SocialSecurityNumber",
            "00001",
            "Social Security Number must have 9 digits."
        );

end

rule 'State Tax Id Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( )
        PracticeInformationType(stateTaxId != null, stateTaxId not matches "^.{0,100}$") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/StateTaxId",
            "00001",
            "State tax ID length cannot exceed 100 characters."
        );

end

rule 'State Tax Id Should Be Left Empty'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 2
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.PRACTICE_INFORMATION.value())
        $provider: ProviderInformationType( maintainsOwnPrivatePractice != "Y" )
        PracticeInformationType(stateTaxId != null, stateTaxId != "") from $provider.practiceInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/PracticeInformation/StateTaxId",
            "00001",
            "State tax ID must be left empty if not in private practice."
        );

end

rule 'Subcontractor Name Is Required If Beneficial Owner Type Is Subcontractor'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(beneficialOwnerType == "Subcontractor", subcontractorName == null || subcontractorName matches "^[\\s]*$") from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/SubcontractorName",
            "00001",
            "Subcontractor name is required."
        );

end

rule 'Subcontractor Name Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.OWNERSHIP_INFORMATION.value())
        IsOrganization($provider : provider)
        OwnershipInformationType($ownerList: beneficialOwner) from $provider.ownershipInformation
        $owner: BeneficialOwnerType(subcontractorName != null, subcontractorName not matches "^.{0,100}$") from $ownerList
        $report: ErrorReporter() 
    then
        int index = $ownerList.indexOf($owner);
        $report.addError(
            "/ProviderInformation/OwnershipInformation/BeneficialOwner[" + index + "]/SubcontractorName",
            "00001",
            "Subcontractor name length cannot exceed 100 characters."
        );

end


rule 'TaxPayer Name Is Required For PCPO'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization(provider.providerType == ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value())
        OrganizationApplicantType( legalName == null || legalName matches "^[\\s]*$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/LegalName",
            "00001",
            "Taxpayer Name is required."
        );

end

rule 'TaxPayer Name Is Required For Nursing Facility'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization(provider.providerType == ProviderType.NURSING_FACILITY.value())
        OrganizationApplicantType( legalName == null || legalName matches "^[\\s]*$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/LegalName",
            "00001",
            "Taxpayer Name is required."
        );

end

rule 'TaxPayer Name Is Required For PWDD Intermediate Care Facility'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization(provider.providerType == ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value())
        OrganizationApplicantType( legalName == null || legalName matches "^[\\s]*$" )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/LegalName",
            "00001",
            "Taxpayer Name is required."
        );

end

rule 'TaxPayer Name Maximum Length Check'
dialect 'mvel'
    when
        IsOrganization(provider.providerType in (
                ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value(), 
                ProviderType.NURSING_FACILITY.value(),
                ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value()
            )
        )        
        OrganizationApplicantType( legalName != null, legalName not matches "^.{0,35}$" )
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/LegalName",
            "00001",
            "Taxpayer Name length cannot exceed 35 characters."
        );

end

rule 'TCM Contract With County Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskTCMForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType(  ) from $provider.facilityCredentials
        CountyContractType(contractAttachmentObjectId == null) from $credentials.contractWithCounty
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/ContractAttachmentObjectId",
            "00001",
            "Copy of contract with county is required."
        );

end

rule 'TCM Cover Sheet Type Is Required'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskTCMForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType(  ) from $provider.facilityCredentials
        CountyContractType(coverSheetName == null || coverSheetName matches "^[\\s]*$") from $credentials.contractWithCounty
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/CoverSheetName",
            "00001",
            "Cover sheet type of contract with county is required."
        );

end

rule 'TCM Cover Sheet Type Must Be One Of The Following'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        IsOrganization()
        $provider: ProviderInformationType(facilityCredentials != null)
        ProviderTypeException(type == "AskTCMForm", providerType == $provider.providerType)
        $credentials: FacilityCredentialsType(  ) from $provider.facilityCredentials
        CountyContractType(coverSheetName != null, coverSheetName not matches "^[\\s]*$", coverSheetName not in ("DHS-5638","DHS-5639", "DHS-5702")) from $credentials.contractWithCounty
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials/ContractWithCounty/CoverSheetName",
            "00001",
            "Cover sheet type of contract with county is expected to be one of DHS-5638, DHS-5639 or DHS-5702."
        );

end

rule 'TCM Form Is Asked For The Specified Providers'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 7
 */
salience 10
    when
    then
        insertLogical(new ProviderTypeException("AskTCMForm", ProviderType.TARGETED_CASE_MANAGEMENT.value()));

end

rule 'Trading Partner Type Is Required For EDI Trading Partner'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        ProviderInformationType(providerType == ProviderType.EDI_TRADING_PARTNER.value())
        OrganizationApplicantType( subType == null )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/SubType",
            "00001",
            "Trading Partner Type is required for this provider."
        );

end

rule 'Trading Partner Type Must Be One Of Enumerated Types'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.ORGANIZATION_INFORMATION.value())
        IsOrganization()
        OrganizationApplicantType($subType: subType, subType != null)
        not LookupEntry( type == "EDITradingPartnerType", value == $subType )
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/OrganizationInformation/SubType",
            "00001",
            "Trading Partner Type specified is not recognized."
        );

end

rule 'Tribal Code Is Required If Employed By a PHS Indian Hospital'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType( )
        LicenseInformationType( tribalCode == null || tribalCode matches "^[\\s]*$", worksOnReservation == "Y" ) from $provider.licenseInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/TribalCode",
            "00001",
            "Tribal code is required if employed by a PHS Indian Hospital."
        );

end

rule 'Tribal Code Should be left Empty If Not Employed By a PHS Indian Hospital'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 3
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
        $provider: ProviderInformationType( )
        LicenseInformationType(tribalCode != null, tribalCode != "", worksOnReservation != "Y") from $provider.licenseInformation
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/TribalCode",
            "00001",
            "Tribal code should be left empty if not employed by a PHS Indian Hospital."
        );

end

rule 'UMPI Maximum Length Check'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        ProviderInformationType(UMPI != null, UMPI not matches "^.{0,10}$")
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/UMPI",
            "00001",
            "UMPI length cannot exceed 10 characters."
        );

end

rule 'Verification of IHS status Is Required For Indian Health Service Facility'
dialect 'mvel'
/*
 * Copyright (C) 2012 TopCoder Inc., All Rights Reserved.
 *
 * @author TCSASSEMBLER
 * @version 1.0
 * @since Provider Enrollment Drools Front End Validation Part 5
 */
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.INDIAN_HEALTH_SERVICE_FACILITY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.VERIFICATION_OF_IHS_STATUS.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Verification of IHS status is required for this provider."
        );

end

rule 'CMS 1539 Form Is Required For Nursing Facilities'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.NURSING_FACILITY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.LICENSE_AND_TRANSMITTAL_CMS_1539_FORM_FROM_MN_DEPARTMENT_OF_HEALTH.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "CMS 1539 Form is required for this provider."
        );
end

rule 'CMS 1539 Form Is Required For PWDD Intermediate Care Facilities'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.INTERMEDIATE_CARE_FACILITIES_FOR_PERSONS_WITH_DEVELOPMENTAL_DISABILITIES.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.LICENSE_AND_TRANSMITTAL_CMS_1539_FORM_FROM_MN_DEPARTMENT_OF_HEALTH.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "CMS 1539 Form is required for this provider."
        );
end

rule 'CMS Medicare Certification Is Required For Hospice'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.HOSPICE.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.CMS_MEDICARE_CERTIFICATION_LETTER.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "CMS Medicare Certification Letter is required for this provider."
        );
end

rule 'Hospice license from MDH Is Required For Hospice'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.HOSPICE.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.HOSPICE_LICENSE_FROM_THE_MN_DEPT_OF_HEALTH.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Hospice license from the MN Dept of Health is required for this provider."
        );
end

rule 'State license Is Required For Hospitals'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.HOSPITAL.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.STATE_LICENSE_TO_OPERATE_AS_A_HOSPITAL.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "State license to operate is required for this provider."
        );
end

rule 'Define Exceptions For PCA Training Certificate'
salience 10
    when
    then
        insertLogical(new CertificateException("RenewalEndDate", "PCA Training Certificate", (String) "*"));
end

/**
 * Added by cyberjag - Fix for PESP-297 
**/
rule 'CMS 1539 Form Is Required For Renal Dialysis Facility'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.RENAL_DIALYSIS_FACILITY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.LICENSE_AND_TRANSMITTAL_CMS_1539_FORM_FROM_MN_DEPARTMENT_OF_HEALTH.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "CMS 1539 Form is required for this provider."
        );
end

rule 'Renal Dialysis Facility Approval letter from regional CMS office Is Required For Renal Dialysis Facility'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.RENAL_DIALYSIS_FACILITY.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.RENAL_DIALYSIS_FACILITY_APPROVAL_LETTER_FROM_REGIONAL_CMS_OFFICE.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Renal Dialysis Facility Approval letter from regional CMS office is required."
        );
end

/**
 * Added by cyberjag - Fix for PESP-307 
**/
rule 'Provider age should be 18 or above during enrollment'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value())
        IsIndividual($provider : provider)
        IndividualApplicantType($dateOfBirth: dateOfBirth, dateOfBirth != null)
        eval($dateOfBirth.after(get18YearsFromNow())) 
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/ApplicantInformation/PersonalInformation/DateOfBirth",
            "00001",
            "Provider age should be 18 or above during enrollment."
        );

end

rule 'Provider age for Organization Members should be 18 or above during enrollment'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType($dateOfBirth: dateOfBirth, dateOfBirth != null) from $memberList
        eval($dateOfBirth.after(get18YearsFromNow())) 
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/DateOfBirth",
            "00001",
            "Member age should be 18 or above during enrollment."
        );
end

rule 'BGS Study ID is required for Organization Members PCPO'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType(bGSStudyId == null || bGSStudyId matches "^[\\s]*$") from $memberList
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/BGSStudyId",
            "00001",
            "BGS Study ID is required."
        );
end

rule 'BGS Clearance Date is required for Organization Members PCPO'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType(bGSClearanceDate == null) from $memberList
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/BGSClearanceDate",
            "00001",
            "BGS Clearance Date is required."
        );
end

rule 'Start Date cannot Precede BGS Clearance Date for Organization Members PCPO'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.PERSONAL_CARE_PROVIDER_ORGANIZATION.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member: GroupMemberType($startDate: startDate, startDate != null, $bGSClearanceDate : bGSClearanceDate, bGSClearanceDate != null) from $memberList
        eval($startDate.before($bGSClearanceDate)) 
        $report: ErrorReporter() 
    then
        int index = $memberList.indexOf($member);
        $report.addError(
            "/ProviderInformation/MemberInformation/GroupMember[" + index + "]/BGSClearanceDate",
            "00001",
            "Start Date cannot precede BGS Clearance Date."
        );
end

/**
 * Added by cyberjag - Fix for PESP-282
 */ 
rule 'Dental License is required for Dentist'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.DENTIST.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType( licenseType == LicenseNames.DENTAL.value() ) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Dental License is required."
        );
end

/**
 * Added by cyberjag - Fix for PESP-259
 */ 
rule "Acupuncturist License in the state of practice is required for Acupuncturist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.ACUPUNCTURIST.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType( licenseType == LicenseNames.ACUPUNCTURIST.value() ) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Copy of Acupuncturist License in the state of practice is required."
        );
end 

rule "Dental Hygienist license is required for Allied Dental Professional"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.ALLIED_DENTAL_PROFESSIONAL.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType( licenseType == LicenseNames.DENTAL_HYGIENIST.value() ) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Copy of Dental Hygienist license is required."
        );
end

rule "Valid national certification as a certified rehabilitation counselor or Certified psychosocial rehabilitation practitioner is required for CMHRP"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_MENTAL_HEALTH_REHAB_PROF_CPRP.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType( licenseType == LicenseNames.PSYCHOSOCIAL_REHAB_PRACTITIONER_CERTIFICATION.value() || licenseType == LicenseNames.REHAB_COUNSELOR_CERTIFICATION.value() ) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Valid national certification as a certified rehabilitation counselor or Certified psychosocial rehabilitation practitioner is required."
        );
end

rule "Traditional Midwife license is required for Certified Professional Midwife"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_PROFESSIONAL_MIDWIFE.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType( licenseType == LicenseNames.TRADITIONAL_MIDWIFE.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Traditional Midwife license is required."
        );
end

rule "Professional Midwife certification from the North American Registry of Midwives is required for Certified Professional Midwife"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_PROFESSIONAL_MIDWIFE.value())
   		not SpecialtiesType(specialtyName contains SpecialtyNames.CERTIFIED_PROFESSIONAL_MIDWIFE.value()) from $provider.specialties
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Professional Midwife certification from the North American Registry of Midwives is required."
        );
end

rule "Registered Nurse license is required for Certified Registered Nurse Anesthetist and Clinical Nurse Specialist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType in (ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST.value(), ProviderType.CLINICAL_NURSE_SPECIALIST.value()))
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType( licenseType == LicenseNames.REGISTERED_NURSE.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Registered Nurse license is required."
        );
end

rule "Clinical Nurse Specialist Certification from the American Nurses Credentialing Center, or other accepted National Board is required for Clinical Nurse Specialist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType in (ProviderType.CLINICAL_NURSE_SPECIALIST.value()))
   		not SpecialtiesType(specialtyName contains SpecialtyNames.PSYCHIATRIC_MENTAL_HEALTH.value()) from $provider.specialties
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Clinical Nurse Specialist Certification from the American Nurses Credentialing Center, or other accepted National Board is required."
        );
end

rule "CRNA Certification from the American Association of Nurse Anesthetists is required for Certified Registered Nurse Anesthetist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.CERTIFIED_REGISTERED_NURSE_ANESTHETIST.value())
   		not SpecialtiesType(specialtyName contains SpecialtyNames.CRNA_CERTIFICATION.value()) from $provider.specialties
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "CRNA Certification from the American Association of Nurse Anesthetists is required."
        );
end

rule "Copy of MnSCU certification is required for Community Health Worker"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.COMMUNITY_HEALTH_CARE_WORKER.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType( issuingState == "MN", licenseType == LicenseNames.MN_SCU_CERTIFICATION.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Copy of MnSCU certification is required."
        );
end

rule "Copy of Hearing Instrument Dispenser Certificate is required for Hearing Aid Dispenser"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.HEARING_AID_DISPENSER.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.HEARING_AID_DISPENSER.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Copy of Hearing Instrument Dispenser Certificate is required."
        );
end

rule "Dietician or Nutritionist License from the state of practice is required for Registered Dietician and Nutritionist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.LICENSED_DIETICIAN_OR_LICENSED_NUTRITIONIST.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.DIETICIAN_OR_NUTRITIONIST.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Dietician or Nutritionist License from the state of practice is required."
        );
end

rule "Clinical Socail Worker License from the state of practice is required for licensed independent clinical social worker"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.CLINICAL_SOCIAL_WORKER.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Independent Clinical Social Worker license from the state of practice is required."
        );
end

rule "Marriage and Family Therapist license or equivalent is required for licensed marriage and family therapist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.LICENSED_MARRIAGE_AND_FAMILY_THERAPIST.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.MARRIAGE_AND_FAMILY_THERAPIST.value()) from $licenses
        $applicant: ApplicantInformationType(  ) from $provider.applicantInformation
        not IndividualApplicantType(highestDegreeEarned == "MASTERS" || highestDegreeEarned == "DOCTORATE") from $applicant.personalInformation
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Marriage and Family Therapist license or equivalent is required."
        );
end

rule "Professional Clinical Counselor License from the state of practice is required for licensed professional clinical counselor"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.LICENSED_PROFESSIONAL_CLINICAL_COUNSELOR.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.PROFESSIONAL_CLINICAL_COUNSELOR.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Professional Clinical Counselor License is required."
        );
end 

rule "Current License from the state of practice is required for licensed psychologist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.LICENSED_PSYCHOLOGIST.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.PSYCHOLOGIST.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Current License from the state of practice is required."
        );
end 

rule "Registered Nurse license in state of practice is required for certified nurse midwife, nurse practitioner"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType in (ProviderType.NURSE_MIDWIFE.value(),  ProviderType.NURSE_PRACTITIONER.value()))
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.REGISTERED_NURSE.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Registered Nurse license in state of practice is required."
        );
end

rule "Registered Nurse license in state of practice is required for private duty nurse"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType  == ProviderType.PRIVATE_DUTY_NURSE.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
   		not LicenseType(licenseType == LicenseNames.LICENSED_PRACTICAL_NURSE.value()) from $licenses
   		not LicenseType(licenseType == LicenseNames.CLASS_A_LICENSE.value()) from $licenses
        not LicenseType(licenseType == LicenseNames.REGISTERED_NURSE.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Registered Nurse license in state of practice OR the LPN & Class A license is required."
        );
end

rule "Class A license is required when LPN is selected for private duty nurse"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.PRIVATE_DUTY_NURSE.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        LicenseType(licenseType == LicenseNames.LICENSED_PRACTICAL_NURSE.value()) from $licenses
        not LicenseType(licenseType == LicenseNames.CLASS_A_LICENSE.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "LPNs who are independent must also have a Class A license from the MN Dept of Health."
        );
end

rule "LPN is required when Class A is selected for private duty nurse"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.PRIVATE_DUTY_NURSE.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        LicenseType(licenseType == LicenseNames.CLASS_A_LICENSE.value()) from $licenses
        not LicenseType(licenseType == LicenseNames.LICENSED_PRACTICAL_NURSE.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "LPNs who are independent must also have a LPN license from the MN Dept of Health."
        );
end

rule "Nurse Midwife Certification from the American Midwifery Certification Board is required for certified nurse midwife"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.NURSE_MIDWIFE.value())
   		not SpecialtiesType(specialtyName contains SpecialtyNames.CERTIFIED_NURSE_MIDWIFE.value()) from $provider.specialties
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Nurse Midwife Certification from the American Midwifery Certification Board is required."
        );
end

rule "Copy of license as occupational therapist in state of practice is required for Occupational Therapist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.OCCUPATIONAL_THERAPIST.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.OCCUPATIONAL_THERAPY.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Copy of license as occupational therapist in state of practice is required."
        );
end

rule "Copy of certification by the NBCOT is required for Occupational Therapist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.OCCUPATIONAL_THERAPIST.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.NBCOT_CERTIFICATION.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Copy of certification by the NBCOT is required."
        );
end

rule "Optometrist License is required for Optometrist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.OPTOMETRIST.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.OPTOMETRIST.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Optometrist License from the state of practice is required."
        );
end

rule "Pharmacist License from the state of practice is required for Pharmacist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.PHARMACIST.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.PHARMACIST_LICENSE.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Pharmacist License from the state of practice is required."
        );
end

rule "Copy of license as a physical therapist in the state of practice is required for Physical Therapist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.PHYSICAL_THERAPIST.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.PHYSICAL_THERAPIST.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Physical Therapist License in the state of practice is required."
        );
end

rule "Physician License in the state of practice is required for Physician"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.PHYSICIAN.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.PHYSICIAN.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Physician License in the state of practice is required."
        );
end

rule "Physician Assistant License in the state of practice is required for Physician"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.PHYSICIAN_ASSISTANT.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.PHYSICIAN_ASSISTANT.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Physician Assistant License in the state of practice is required."
        );
end

rule "Copy of license as a podiatrist from the MN Board of Podiatric Medicine or current state of practice is required for Podiatrist"
	when
        LookupEntry(type == "FieldGroup", value == UISection.LICENSE_INFORMATION.value())
   		$provider: ProviderInformationType(providerType == ProviderType.PODIATRIST.value())
   		LicenseInformationType( $licenses: license ) from $provider.licenseInformation
        not LicenseType(licenseType == LicenseNames.PODIATRIST_LICENSE.value()) from $licenses
        $report: ErrorReporter()
    then
        $report.addError(
            "/ProviderInformation/LicenseInformation/License/Required",
            "00001",
            "Copy of license as a podiatrist from the MN Board of Podiatric Medicine or current state of practice is required."
        );
end

/**
 * Added by cyberjag - Fix for PESP-308
 */
rule 'Minimum of 2 licensed chiropractors working at the clinic'
activation-group "member-info-license-required"
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.CHIROPRACTIC_CLINIC.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        List (size  < 2) from collect (GroupMemberType(providerType == ProviderType.CHIROPRACTOR.value()) from $memberList)
        $report: ErrorReporter()
    then
    	$report.addError(
           "/ProviderInformation/MemberInformation",
           "00001",
           "Minimum of 2 licensed chiropractors working at the clinic is required."
        );
end

rule 'Minimum of 2 licensed Physicians working at the Physicians Clinic'
activation-group "member-info-license-required"
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.PHYSICIAN_CLINIC.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        List (size  < 2) from collect (GroupMemberType(providerType == ProviderType.PHYSICIAN.value()) from $memberList)
        $report: ErrorReporter()
    then
    	$report.addError(
           "/ProviderInformation/MemberInformation",
           "00001",
           "Minimum of 2 licensed physician working at the clinic is required."
        );
end

rule 'Duplicate NPI is not allowed for Member Info'
dialect 'mvel'
activation-group "duplicate-member-npi"
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        IsOrganization($provider : provider)
        ProviderTypeException(type == "AskIndividualMemberInfo", providerType == $provider.providerType)
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        $member1: PersonType($npi1 : nPI, nPI != null) from $memberList
        $member2: PersonType(nPI == $npi1, this != $member1) from $memberList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/MemberInformation",
            "00001",
            "Duplicate NPI is provided."
        );
end

/**
 * Added by cyberjag - Fix for PESP-308 
**/
rule 'Birth Center license from the MN Department of Health is Required for Birthing Center'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.BIRTHING_CENTER.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.BIRTH_CENTER_LICENSE_FROM_THE_MN_DEPARTMENT_OF_HEALTH.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Birth Center license from the MN Department of Health is required for this provider."
        );
end

rule 'Accreditation from the Commission for the Accreditation of Birth Centers is Required For Birthing Center'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.FACILITY_CREDENTIALS.value())
        $provider: ProviderInformationType(providerType == ProviderType.BIRTHING_CENTER.value())
        $credentials: FacilityCredentialsType($licenseList : license) from $provider.facilityCredentials
        not LicenseType( licenseType == LicenseNames.ACCREDITATION_FROM_THE_COMMISSION_FOR_THE_ACCREDITATION_OF_BIRTH_CENTERS.value() ) from $licenseList
        $report: ErrorReporter() 
    then
        $report.addError(
            "/ProviderInformation/FacilityCredentials",
            "00001",
            "Accreditation from the Commission for the Accreditation of Birth Centers is required for this provider."
        );
end

rule 'Billing entity for physician services - Cannot accept any other providers except Physicians, Physician Assistant, Nurse Practitioner, LICSW, Chiropractor, and Dentist.'
dialect 'mvel'
activation-group "billing-entity-for-phy-svc-members"
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.BILLING_ENTITY_FOR_PHYSICIAN_SERVICES.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        not GroupMemberType(providerType in (
        	ProviderType.PHYSICIAN.value(),
        	ProviderType.PHYSICIAN_ASSISTANT.value(),
   			ProviderType.NURSE_PRACTITIONER.value(),
   			ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value(),
   			ProviderType.CHIROPRACTOR.value(),
   			ProviderType.DENTIST.value()									     	
		)) from $memberList
        $report: ErrorReporter()
    then
    	$report.addError(
           "/ProviderInformation/MemberInformation",
           "00001",
           "Member information must consist of a combination of Physicians, Physician Assistant, Nurse Practitioner, LICSW, Chiropractor, and Dentist."
        );
end

rule 'Billing entity for physician services - Must consist of a combination of Physicians, Physician Assistant, Nurse Practitioner, LICSW, Chiropractor, and Dentist.'
dialect 'mvel'
activation-group "billing-entity-for-phy-svc-members"
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.BILLING_ENTITY_FOR_PHYSICIAN_SERVICES.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        List (size  < 2) from collect (GroupMemberType(providerType in (
        	ProviderType.PHYSICIAN.value(),
        	ProviderType.PHYSICIAN_ASSISTANT.value(),
   			ProviderType.NURSE_PRACTITIONER.value(),
   			ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value(),
   			ProviderType.CHIROPRACTOR.value(),
   			ProviderType.DENTIST.value()									     	
		)) from $memberList)
        $report: ErrorReporter()
    then
    	$report.addError(
           "/ProviderInformation/MemberInformation",
           "00001",
           "Member information must consist of a combination of Physicians, Physician Assistant, Nurse Practitioner, LICSW, Chiropractor, and Dentist."
        );
end

/**
 * Added by cyberjag - PESP-313
 */
rule 'Billing Entity for Mental Health - Cannot accept any other providers except LICSW, LMFT, LP, LPCC, or CNS with mental health specialty.'
dialect 'mvel'
activation-group "billing-entity-for-mh"
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.BILLING_ENTITY_FOR_MENTAL_HEALTH.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        not GroupMemberType(providerType in (
        	ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value(),
        	ProviderType.LICENSED_MARRIAGE_AND_FAMILY_THERAPIST.value(),
        	ProviderType.LICENSED_PSYCHOLOGIST.value(),
        	ProviderType.LICENSED_PROFESSIONAL_CLINICAL_COUNSELOR.value(),
   			ProviderType.CLINICAL_NURSE_SPECIALIST.value()
		)) from $memberList
        $report: ErrorReporter()
    then
    	$report.addError(
           "/ProviderInformation/MemberInformation",
           "00001",
           "Member information must consist of a combination of LICSW, LMFT, LP, LPCC, or CNS with mental health specialty."
        );
end

rule 'Billing Entity for Mental Health - Minimum of 2 licensed and enrolled providers of the following types: LICSW, LMFT, LP, LPCC, or CNS with mental health specialty.'
dialect 'mvel'
activation-group "billing-entity-for-mh"
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.BILLING_ENTITY_FOR_MENTAL_HEALTH.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        List (size  < 2) from collect (GroupMemberType(providerType in (
        	ProviderType.LICENSED_INDEPENDENT_CLINICAL_SOCIAL_WORKER.value(),
        	ProviderType.LICENSED_MARRIAGE_AND_FAMILY_THERAPIST.value(),
        	ProviderType.LICENSED_PSYCHOLOGIST.value(),
        	ProviderType.LICENSED_PROFESSIONAL_CLINICAL_COUNSELOR.value(),
   			ProviderType.CLINICAL_NURSE_SPECIALIST.value()									     	
		)) from $memberList)
        $report: ErrorReporter()
    then
    	$report.addError(
           "/ProviderInformation/MemberInformation",
           "00001",
           "Member information must consist minimum of 2 licensed and enrolled providers of the following types: LICSW, LMFT, LP, LPCC, or CNS with mental health specialty."
        );
end

rule 'Pharmacy - Cannot accept any other providers except Pharmacist.'
dialect 'mvel'
    when
        LookupEntry(type == "FieldGroup", value == UISection.INDIVIDUAL_MEMBER_INFORMATION.value())
        $provider: ProviderInformationType(providerType == ProviderType.PHARMACY.value())
        MemberInformationType($memberList : groupMember, groupMember != null ) from $provider.memberInformation
        List (size  > 0) from collect (GroupMemberType () from $memberList)
        not GroupMemberType(providerType == ProviderType.PHARMACIST.value()) from $memberList
        $report: ErrorReporter()
    then
    	$report.addError(
           "/ProviderInformation/MemberInformation",
           "00001",
           "Member information can accept only Pharmacist."
        );
end

// generated rules from dslr
rule "Require First Name For All Individual Providers"
	when
	    LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value()) $report: ErrorReporter()
	    IndividualApplicantType(firstName == null || firstName matches "^[\\s]*$")
	then

        $report.addError("/ProviderInformation/ApplicantInformation/PersonalInformation/FirstName", "00001", "First Name is required for individual applicants.");
end

rule "Require Last Name For All Individual Providers"
	when
	    LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value()) $report: ErrorReporter()
	    IndividualApplicantType(lastName == null || lastName matches "^[\\s]*$")
	then

        $report.addError("/ProviderInformation/ApplicantInformation/PersonalInformation/LastName", "00001", "Last Name is required for individual applicants.");
end

rule "Require SSN For All Individual Providers"
    when
        LookupEntry(type == "FieldGroup", value == UISection.PERSONAL_INFORMATION.value()) $report: ErrorReporter()
        IndividualApplicantType(socialSecurityNumber == null || socialSecurityNumber matches "^[\\s]*$")
    then

        $report.addError("/ProviderInformation/ApplicantInformation/PersonalInformation/SocialSecurityNumber", "00001", "Social Security Number is required for individual applicants.");
end